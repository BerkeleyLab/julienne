var tipuesearch = {"pages":[{"title":" Julienne ","text":"Julienne Julienne: Idiomatic Correctness Checking for Fortran 2023 The Julienne framework offers a unified approach to unit testing and runtime\nassertion checking.  Julienne defines idioms for specifying correctness\nconditions in a common way when writing tests that wrap the tested procedures\nor assertions that conditionally execute inside procedures to check correctness.\nJulienne's idioms center around expressions built from defined operations: a\nuniquely flexible Fortran capability allowing developers to define new operators in addition to overloading Fortran's intrinsic operators.  The\nfollowing table provides examples of the expressions Julienne supports: Example expressions Operand types x .approximates. y .within. tolerance real , double precision x .approximates. y .withinFraction. tolerance real , double precision x .approximates. y .withinPercentage. tolerance real , double precision .all. ([i,j] .lessThan. k) integer , real , double precision .all. ([i,j] .lessThan. [k,m]) integer , real , double precision .all. (i .lessThan. [k,m]) integer , real , double precision (i .lessThan. j) .also. (k .equalsExpected. m)) integer , real , double precision x .lessThan. y integer , real , double precision x .greaterThan. y integer , real , double precision i .equalsExpected. j integer , character , type(c_ptr) i .isAtLeast. j integer , real , double precision i .isAtMost. j integer , real , double precision s .isBefore. t character s .isAfter. t character .expect. allocated(A) // \" (expected allocated A)\" logical where \n* .isAtLeast. and .isAtMost. can alternatively be spelled .greaterThanOrEqualTo. and .lessThanOrEqualTo. , respectively;\n* .equalsExpected. uses == , which implies that trailing blank spaces are ignored in character operands; * .equalsExpected. with integer operands supports default integers and integer(c_size_t) ;\n* .isBefore. and .isAfter. verify alphabetical and reverse-alphabetical  order, respectively; and\n* .all. aggregates arrays of expression results, reports a consensus result, and shows diagnostics only for failing tests, if any;\n* .equalsExpected. generates asymmetric diagnostic output for failures, denoting the left- and right-hand sides as the actual value and expected values, respectively; and.\n* // appends the subsequent string to diagnostics strings, if any. Expressive idioms Assertions Any of the above expressions can be the actual argument in an invocation\nof Julienne's call_julienne_assert function-line preprocessor macro: call_julienne_assert ( x . lessThan . y ) which a preprocessor will replace with a call to Julienne's assertion subroutine\nwhen compiling with -DASSERTIONS .  Otherwise, the preprocessor will remove the\nabove line entirely when -DASSERTIONS is not present. Unit tests The above tabulated expressions can also serve as function results in unit tests. Constraints All operands in an expression must be compatible in type and kind as well as\nconformable in rank, where the latter condition implies that the operands must\nbe all scalars or all arrays with the same shape or a combination of scalars and\narrays with the same shape. This constraint follows from each of the binary\noperators being elemental .  The unary .all. operator applies to operands of\nany rank. Each tabulated expression above produces a test_diagnosis_t object with two\ncomponents: a logical indicator of test success if .true . or failure if .false. and an automated diagnostic messages generated only if the test or assertion fails. Custom Test Diagnostics For cases in which Julienne's operators do not support the desired correctness\ncondition, the framework provides string-handling utilities for use in crafting\ncustom diagnostic messages.  The string utilities center around Julienne's string_t derived type, which offers elemental constructor functions, i.e., \nfunctions that one invokes via the same name as the derived type: string_t() .\nThe string_t() constructor functions convert data of numeric type to character type, storing the resulting character representation in a private\ncomponent of the constructor function result.  The actual argument provided to\nthe constructor function can be of any one of several types, kinds, and ranks. Julienne provides defined operations for concatenating string_t objects\n( // ), forming a concatenated string_t object from an array of string_t objects ( .cat. ), forming a separated-value list ( .separatedBy. or\nequivalently .sv. ), including a comma-separated value list (.csv.) .  The\ntable below shows some expressions that Julienne supports with these defined\noperations. Example expression Result s%bracket() , where s=string_t(\"abc\") , string_t(\"[abc]\") s%bracket(\"_\") , where s=string_t(\"abc\") string_t(\"_abc_\") s%bracket(\"{\",\"}\") , where s=string_t(\"abc\") string_t(\"{abc}\") string_t([\"a\", \"b\", \"c\"]) [string_t(\"a\"), string_t(\"b\"), string_t(\"c\")] .cat. string_t([9,8,7]) string_t(\"987\") .csv. string_t([1.5,2.0,3.25]) string_t(\"1.50000000,2.00000000,3.25000000\") \"-\" .separatedBy. string_t([1,2,4]) string_t(\"1-2-4\") string_t(\"ab\") // string_t(\"cd\") string_t(\"abcd\") \"ab\" // string_t(\"cd\") string_t(\"abcd\") string_t(\"ab\") // \"cd\" string_t(\"abcd\") One can use such expressions to craft a diagnostic message when constructing\na custom test function result: type ( test_diagnosis_t ) test_diagnosis test_diagnosis = test_diagnosis_t ( & test_passed = i == j , & diagnostics_string = \"expected \" // string_t ( i ) // \"; actual \" // string_t ( j ) & ) A file abstraction Arrays of string_t objects provide a convenient way to store a ragged-length\narray of character data.  Julienne's file_t derived type has a private\ncomponent that is a string_t array, wherein each element is one line of a text\nfile. By storing a file in a file_t object using the file_t derived type's\nconstructor function one can confine a program's file input/output (I/O) to one\nor two procedures.  The resulting file_t object can be manipulated elsewhere\nwithout incurring the costs associated with file I/O.  For example, the following\nline reads a file named data.txt into a file_t object and associates the name file with the resulting object. type ( file_t ) file associate ( file => file_t ( \"data.txt\" )) end associate This style supports functional programming patterns in two ways. First, the rest\nof the program can be comprised of pure procedures, which are precluded from\nperforming I/O.  Second, an associate name is immutable when associated with an\nexpression, including an expression that is simply a function reference. \nFunctional programming revolves around creating and using immutable state.\n(By contrast, when associating a name with a variable or array instead of with\nan expression, only certain attributes, such as the entity's allocation status,\nare immutable. The value of such a variable or array can be redefined.) Functional Programming Functional programming patterns centered around pure procedures enhance\ncode clarity, ease refactoring, and encourage optimization.  For example,\nthe constraints on pure procedures make it easier for a developer or a\ncompiler to safely reorder program statements.  Moreover, Fortran allows\ninvoking only pure procedures inside do concurrent , a construct that\ncompilers can automatically offload to a graphics processing unit (GPU). Julienne lowers a widely stated barrier to writing pure procedures (including simple procedures): the difficulty in printing values while debugging code.\nThe Julienne philosophy is that printing a value for debugging purposes implies\nan expectation about the value.  Assert such expectations by writing Julienne\nexpressions inspired by natural language.  A program will proceed quietly past\na correct assertion.  An incorrect assertion produces either automated or custom\ndiagnostic messages during error termination. Getting Started Writing Unit Tests Please see demo/README.md for a detailed demonstration of\ntest setup. Writing Assertions To write a Julienne assertion, insert a function-like preprocessor macro call_julienne_assert on a single line as in each of the two macro\ninvocations below: #include \"julienne-assertion-macros.h\" program main use , julienne_m , only : call_julienne_assert_ implicit none real , parameter :: x = 1. , y = 2. , tolerance = 3. call_julienne_assert ( x . approximates . y . within . tolerance ) call_julienne_assert ( abs ( x - y ) < tolerance ) end program where inserting -DASSERTIONS in a compile command will expand the macros to call call_julienne_assert_ ( x . approximates . y . within . tolerance , __ FILE__ , __ LINE__ ) call call_julienne_assert_ ( allocated ( a ), __ FILE__ , __ LINE__ ) and where dots ( . ) delimit Julienne operators.  The above expression containing\nJulienne operators evaluates to a Julienne test_diagnosis_t object, whereas\nexpression allocated(a) on the subsequent line evaluates to a logical value.\nIf an assertion containing a Julienne expression fails, Julienne inserts diagnostic\ninformation into the stop code in an ultimate error stop .  If an expression\nevaluates to a logical value of false. , the error stop code will contain a\nliteral copy of the expression (e.g., allocated(a) ).  In either case, Julienne\nalso inserts the file and line number into the stop code using via the __FILE__ and __LINE__ macros, respectively.  Most compilers write the resulting stop code\nto error_unit . An Origin Story Julienne's name derives from the term for vegetables sliced into thin strings:\njulienned vegetables.  The Veggies and Garden unit-testing frameworks\ninspired the structure of Julienne's tests and output.  Initially developed in\nthe Sourcery repository as lightweight alternative with greater portability\nacross compilers, Julienne's chief innovation now lies in the expressive idioms\nthe framework supports. Building and Testing Compiler support When built with the compiler versions tabulated below, all Julienne tests pass. Compiler Version(s) Tested Known Issues LLVM flang-new 19, 20, 21 none NAG nagfor 7.2 Build 7235 none Intel ifx 2025.2.1 none GCC gfortran 13.4.0, 14.3.0, 15.1.0 see below With gfortran 13 through 14.2.0,\n- The test_description_t constructor's diagnosis_function actual argument\n  must be a procedure pointer declared with procedure(diagnosis_function_i) .\n- The string_t type-bound  function bracket crashes. Build/test commands LLVM ( flang-new ) compiler With version 20 or later, please run fpm test --compiler flang-new --flag \"-O3\" With version 19, please run fpm test --compiler flang-new --flag \"-O3 -mmlir -allow-assumed-rank\" to enable support for assumed-rank dummy arguments. NAG ( nagfor ) compiler Serial execution fpm test --compiler nagfor --flag \"-fpp -O3\" Parallel execution To execute build and run parallel tests in 2 images, please run export NAGFORTRAN_NUM_IMAGES = 2 fpm test -- compiler nagfor -- flag \"-fpp -O3 -coarray\" Replace the \"2\" above with any number up to the compiler limit of 1000 images. GNU ( gfortran ) compiler Serial execution For compiler versions 14 or higher, plese use fpm test --compiler gfortran --profile release For version 13, please append --flag \"-ffree-line-length-none\" to the above\ncommand to enable the Fortran 2023 line-length maximum of 5000 characters. Parallel execution With OpenCoarrays installed, please replace --compiler gfortran with --compiler caf and please append --runner \"cafrun -n 2\" to the above\ncommand. Intel ( ifx ) compiler Serial execution fpm test --compiler ifx --flag \"-fpp -O3\" --profile release Parallel execution To execute build and run parallel tests in 2 images, please run export FOR_COARRAY_NUM_IMAGES = 2 fpm test -- compiler ifx -- flag \"-fpp -O3 -coarray\" -- profile release Replace the \"2\" above with any desired number of images. Documentation See our online documentation or build the documentation locally by installing FORD and executing ford ford.md . Known Software Using Julienne Fiats : Functional inference and training for surrogates Matcha : Motility analysis of T-cell histories in activation TRACE two-phase flow solver for nuclear reactors nQMCC: Quantum Monte Carlo simulation software for nuclear physics Developer Info Berkeley Lab","tags":"home","url":"index.html"},{"title":"test_harness_t – Julienne ","text":"type, public :: test_harness_t Encapsulate a set of test fixtures, each of which can run a set of tests. Inherits type~~test_harness_t~~InheritsGraph type~test_harness_t test_harness_t type~test_fixture_t test_fixture_t type~test_harness_t->type~test_fixture_t test_fixture_ type~test_t test_t type~test_fixture_t->type~test_t test_ Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Components Type Visibility Attributes Name Initial type( test_fixture_t ), private, allocatable :: test_fixture_ (:) Constructor public        interface test_harness_t private module function component_constructor(test_fixtures) result(test_harness) Implementation → Component-wise user-defined structure constructor Arguments Type Intent Optional Attributes Name class( test_fixture_t ) :: test_fixtures (:) Return Value type( test_harness_t ) Type-Bound Procedures procedure, public :: report_results interface private module subroutine report_results(self) Implementation → If command line includes -h or --help, print usage information and stop.\nOtherwise, run tests and print results, including diagnostics for any failures.\nAlso, tally and print the numbers of passing tests, total tests, skipped tests. Arguments Type Intent Optional Attributes Name class( test_harness_t ), intent(in) :: self","tags":"","url":"type/test_harness_t.html"},{"title":"test_suite_t – Julienne ","text":"type, public :: test_suite_t Inherits type~~test_suite_t~~InheritsGraph type~test_suite_t test_suite_t type~string_t string_t type~test_suite_t->type~string_t test_subjects_ Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Components Type Visibility Attributes Name Initial type( string_t ), private, allocatable :: test_subjects_ (:) Constructor public        interface test_suite_t private pure module function from_components(test_subjects) result(test_suite) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: test_subjects (:) Return Value type( test_suite_t ) private pure module function from_file(file) result(test_suite) Implementation → Arguments Type Intent Optional Attributes Name type( file_t ), intent(in) :: file Return Value type( test_suite_t ) Type-Bound Procedures procedure, public :: driver_file interface private pure module function driver_file(self) result(file) Implementation → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self Return Value type( file_t ) procedure, public :: stub_file interface private pure module function stub_file(self, subject) result(file) Implementation → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self type( string_t ), intent(in) :: subject Return Value type( file_t ) procedure, public :: test_modules interface private pure module function test_modules(self) result(modules) Implementation → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self Return Value type( string_t ), allocatable, (:) procedure, public :: test_subjects interface private pure module function test_subjects(self) result(subjects) Implementation → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self Return Value type( string_t ), allocatable, (:) procedure, public :: test_types interface private pure module function test_types(self) result(types) Implementation → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self Return Value type( string_t ), allocatable, (:) procedure, public :: to_file interface private pure module function to_file(self) result(file) Implementation → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self Return Value type( file_t ) procedure, public :: write_driver interface private module subroutine write_driver(self, file_name) Implementation → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self character(len=*), intent(in) :: file_name","tags":"","url":"type/test_suite_t.html"},{"title":"test_fixture_t – Julienne ","text":"type, public :: test_fixture_t Inherits type~~test_fixture_t~~InheritsGraph type~test_fixture_t test_fixture_t type~test_t test_t type~test_fixture_t->type~test_t test_ Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Inherited by type~~test_fixture_t~~InheritedByGraph type~test_fixture_t test_fixture_t type~test_harness_t test_harness_t type~test_harness_t->type~test_fixture_t test_fixture_ Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Components Type Visibility Attributes Name Initial class( test_t ), private, allocatable :: test_ Constructor public        interface test_fixture_t private module function component_constructor(test) result(test_fixture) Implementation → Construct a test_fixture_t object from its components Arguments Type Intent Optional Attributes Name class( test_t ), intent(in) :: test Return Value type( test_fixture_t ) Type-Bound Procedures procedure, public :: report interface private module subroutine report(self, passes, tests, skips) Implementation → Print the test results and increment the tallies of passing tests, total tests, and skipped tests. Arguments Type Intent Optional Attributes Name class( test_fixture_t ), intent(in) :: self integer, intent(inout) :: passes integer, intent(inout) :: tests integer, intent(inout) :: skips","tags":"","url":"type/test_fixture_t.html"},{"title":"test_t – Julienne ","text":"type, public, abstract :: test_t Facilitate testing and test reporting Inherited by type~~test_t~~InheritedByGraph type~test_t test_t type~test_fixture_t test_fixture_t type~test_fixture_t->type~test_t test_ type~test_harness_t test_harness_t type~test_harness_t->type~test_fixture_t test_fixture_ Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Type-Bound Procedures procedure, public :: report interface private module subroutine report(test, passes, tests, skips) Implementation → Print the test results and increment the tallies of passing tests, total tests, and skipped tests. Arguments Type Intent Optional Attributes Name class( test_t ), intent(in) :: test integer, intent(inout) :: passes integer, intent(inout) :: tests integer, intent(inout) :: skips procedure( results_interface ), public, deferred, nopass :: results function results_interface() result(test_results) Prototype The result is an array of test results for subsequent reporting in the \"report\" type-bound procedure Arguments None Return Value type( test_result_t ), allocatable, (:) procedure, public :: run interface private module function run(test, test_descriptions) result(test_results) Implementation → Construct an array of test results from a set of tests filtered for descriptions and subjects with\nthe '--contains' flag's value if the flag was included on the command line at program launch. Arguments Type Intent Optional Attributes Name class( test_t ), intent(in) :: test type( test_description_t ), intent(in) :: test_descriptions (:) Return Value type( test_result_t ), allocatable, (:) procedure( subject_interface ), public, deferred, nopass :: subject pure function subject_interface() result(specimen_description) Prototype The result is the name of the test specimen (the subject of testing) Arguments None Return Value character(len=:), allocatable","tags":"","url":"type/test_t.html"},{"title":"test_diagnosis_t – Julienne ","text":"type, public :: test_diagnosis_t Encapsulate test outcome and diagnostic information Inherited by type~~test_diagnosis_t~~InheritedByGraph type~test_diagnosis_t test_diagnosis_t type~test_result_t test_result_t type~test_result_t->type~test_diagnosis_t diagnosis_ Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Components Type Visibility Attributes Name Initial character(len=:), private, allocatable :: diagnostics_string_ logical, private :: test_passed_ = .false. Constructor public        interface test_diagnosis_t private elemental module function construct_from_character(test_passed, diagnostics_string) result(test_diagnosis) Implementation → The result is a test_diagnosis_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name logical, intent(in) :: test_passed character(len=*), intent(in) :: diagnostics_string Return Value type( test_diagnosis_t ) private elemental module function construct_from_string_t(test_passed, diagnostics_string) result(test_diagnosis) Implementation → The result is a test_diagnosis_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name logical, intent(in) :: test_passed type( string_t ), intent(in) :: diagnostics_string Return Value type( test_diagnosis_t ) Type-Bound Procedures procedure, public, non_overridable :: diagnostics_string interface private elemental module function diagnostics_string(self) result(string_) Implementation → The result is a string describing the condition(s) that caused a test failure Arguments Type Intent Optional Attributes Name class( test_diagnosis_t ), intent(in) :: self Return Value type( string_t ) procedure, public, non_overridable :: test_passed interface private elemental module function test_passed(self) result(passed) Implementation → The result is .true. if the test passed and false otherwise Arguments Type Intent Optional Attributes Name class( test_diagnosis_t ), intent(in) :: self Return Value logical","tags":"","url":"type/test_diagnosis_t.html"},{"title":"double_precision_operands_t – Julienne ","text":"type, private :: double_precision_operands_t Components Type Visibility Attributes Name Initial double precision, public :: actual double precision, public :: expected","tags":"","url":"type/double_precision_operands_t.html"},{"title":"operands_t – Julienne ","text":"type, private :: operands_t Components Type Visibility Attributes Name Initial real(kind=k), public :: actual real(kind=k), public :: expected integer, public, kind :: k = default_real","tags":"","url":"type/operands_t~2.html"},{"title":"operands_t – Julienne ","text":"type, private :: operands_t Components Type Visibility Attributes Name Initial real, public :: actual real, public :: expected","tags":"","url":"type/operands_t.html"},{"title":"command_line_t – Julienne ","text":"type, public :: command_line_t Type-Bound Procedures procedure, public, nopass :: argument_present interface private module function argument_present(acceptable_argument) result(found) Implementation → result is .true. only if a command-line argument matches an element of this function's argument Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: acceptable_argument (:) sample list: [character(len=len( )):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"]\nwhere dashes support Linux/macOS, slashes support Windows, and must be replaced\nby the longest list element (\"--benchmark\" above) Return Value logical procedure, public, nopass :: flag_value interface private module function flag_value(flag) Implementation → result = { the value passed immediately after a command-line flag if the flag is present or\n         { an empty string otherwise. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: flag Return Value character(len=:), allocatable","tags":"","url":"type/command_line_t.html"},{"title":"string_t – Julienne ","text":"type, public :: string_t Inherited by type~~string_t~~InheritedByGraph type~string_t string_t type~file_t file_t type~file_t->type~string_t lines_ type~test_result_t test_result_t type~test_result_t->type~string_t description_ type~test_suite_t test_suite_t type~test_suite_t->type~string_t test_subjects_ Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Components Type Visibility Attributes Name Initial character(len=:), private, allocatable :: string_ Constructor public        interface string_t private elemental module function from_characters(string) result(new_string) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string Return Value type( string_t ) private elemental module function from_default_complex(z) result(string) Implementation → Arguments Type Intent Optional Attributes Name complex, intent(in) :: z Return Value type( string_t ) private elemental module function from_default_integer(i) result(string) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: i Return Value type( string_t ) private elemental module function from_default_logical(b) result(string) Implementation → Arguments Type Intent Optional Attributes Name logical, intent(in) :: b Return Value type( string_t ) private elemental module function from_default_real(x) result(string) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: x Return Value type( string_t ) private elemental module function from_double_precision(x) result(string) Implementation → Arguments Type Intent Optional Attributes Name double precision, intent(in) :: x Return Value type( string_t ) private elemental module function from_double_precision_complex(z) result(string) Implementation → Arguments Type Intent Optional Attributes Name complex(kind=kind(1D0)), intent(in) :: z Return Value type( string_t ) private elemental module function from_integer_c_size_t(i) result(string) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_size_t), intent(in) :: i Return Value type( string_t ) private elemental module function from_logical_c_bool(b) result(string) Implementation → Arguments Type Intent Optional Attributes Name logical(kind=c_bool), intent(in) :: b Return Value type( string_t ) Type-Bound Procedures procedure, public :: as_character interface private pure module function as_character(self) result(raw_string) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value character(len=:), allocatable generic, public :: assignment(= ) => assign_string_t_to_character , assign_character_to_string_t private  interface assign_string_t_to_character () Arguments None private  interface assign_character_to_string_t () Arguments None procedure, public :: base_name interface private elemental module function base_name(self) result(base) Implementation → result contains all characters in file_name before the last dot (.) Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) procedure, public :: bracket interface private elemental module function bracket(self, opening, closing) result(bracketed_self) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in), optional :: opening character(len=*), intent(in), optional :: closing Return Value type( string_t ) procedure, public :: file_extension interface private elemental module function file_extension(self) result(extension) Implementation → result contains all characters in file_name after the last dot (.) Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) procedure, public :: get_json_key interface private elemental module function get_json_key(self) result(unquoted_key) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) generic, public :: get_json_value => get_string_with_string_key , get_string_with_character_key , get_character_with_string_key , get_character_with_character_key , get_string_t_array_with_character_key , get_string_t_array_with_string_t_key , get_real , get_real_with_character_key , get_logical , get_logical_with_character_key , get_real_array , get_real_array_with_character_key , get_integer_array , get_integer_array_with_character_key , get_integer , get_integer_with_character_key , get_double_precision , get_double_precision_with_character_key , get_double_precision_array , get_double_precision_array_with_character_key private  interface get_string_with_string_key () Arguments None private  interface get_string_with_character_key () Arguments None private  interface get_character_with_string_key () Arguments None private  interface get_character_with_character_key () Arguments None private  interface get_string_t_array_with_character_key () Arguments None private  interface get_string_t_array_with_string_t_key () Arguments None private  interface get_real () Arguments None private  interface get_real_with_character_key () Arguments None private  interface get_logical () Arguments None private  interface get_logical_with_character_key () Arguments None private  interface get_real_array () Arguments None private  interface get_real_array_with_character_key () Arguments None private  interface get_integer_array () Arguments None private  interface get_integer_array_with_character_key () Arguments None private  interface get_integer () Arguments None private  interface get_integer_with_character_key () Arguments None private  interface get_double_precision () Arguments None private  interface get_double_precision_with_character_key () Arguments None private  interface get_double_precision_array () Arguments None private  interface get_double_precision_array_with_character_key () Arguments None procedure, public :: is_allocated interface private elemental module function is_allocated(self) result(string_allocated) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value logical generic, public :: operator(//) => string_t_cat_string_t , string_t_cat_character , character_cat_string_t private  interface string_t_cat_string_t () Arguments None private  interface string_t_cat_character () Arguments None private  interface character_cat_string_t () Arguments None generic, public :: operator(/=) => string_t_ne_string_t , string_t_ne_character , character_ne_string_t private  interface string_t_ne_string_t () Arguments None private  interface string_t_ne_character () Arguments None private  interface character_ne_string_t () Arguments None generic, public :: operator(==) => string_t_eq_string_t , string_t_eq_character , character_eq_string_t private  interface string_t_eq_string_t () Arguments None private  interface string_t_eq_character () Arguments None private  interface character_eq_string_t () Arguments None generic, public :: string => as_character private  interface as_character () Arguments None procedure, private :: assign_character_to_string_t interface private elemental module subroutine assign_character_to_string_t(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(inout) :: lhs character(len=*), intent(in) :: rhs procedure, private, pass(rhs) :: assign_string_t_to_character interface private pure module subroutine assign_string_t_to_character(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=:), intent(out), allocatable :: lhs class( string_t ), intent(in) :: rhs procedure, private, pass(rhs) :: character_cat_string_t interface private elemental module function character_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t ) procedure, private, pass(rhs) :: character_eq_string_t interface private elemental module function character_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical procedure, private, pass(rhs) :: character_ne_string_t interface private elemental module function character_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical procedure, private :: get_character_with_character_key interface private pure module function get_character_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key character(len=*), intent(in) :: mold Return Value character(len=:), allocatable procedure, private :: get_character_with_string_key interface private pure module function get_character_with_string_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key character(len=*), intent(in) :: mold Return Value character(len=:), allocatable procedure, private :: get_double_precision interface private pure module function get_double_precision(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key double precision, intent(in) :: mold Return Value double precision procedure, private :: get_double_precision_array interface private pure module function get_double_precision_array(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key double precision, intent(in) :: mold (:) Return Value double precision, allocatable, (:) procedure, private :: get_double_precision_array_with_character_key interface private pure module function get_double_precision_array_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key double precision, intent(in) :: mold (:) Return Value double precision, allocatable, (:) procedure, private :: get_double_precision_with_character_key interface private pure module function get_double_precision_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key double precision, intent(in) :: mold Return Value double precision procedure, private :: get_integer interface private pure module function get_integer(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold Return Value integer procedure, private :: get_integer_array interface private pure module function get_integer_array(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold (:) Return Value integer, allocatable, (:) procedure, private :: get_integer_array_with_character_key interface private pure module function get_integer_array_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key integer, intent(in) :: mold (:) Return Value integer, allocatable, (:) procedure, private :: get_integer_with_character_key interface private pure module function get_integer_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key integer, intent(in) :: mold Return Value integer procedure, private :: get_logical interface private pure module function get_logical(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key logical, intent(in) :: mold Return Value logical procedure, private :: get_logical_with_character_key interface private pure module function get_logical_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key logical, intent(in) :: mold Return Value logical procedure, private :: get_real interface private pure module function get_real(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold Return Value real procedure, private :: get_real_array interface private pure module function get_real_array(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold (:) Return Value real, allocatable, (:) procedure, private :: get_real_array_with_character_key interface private pure module function get_real_array_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key real, intent(in) :: mold (:) Return Value real, allocatable, (:) procedure, private :: get_real_with_character_key interface private pure module function get_real_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key real, intent(in) :: mold Return Value real procedure, private :: get_string_t_array_with_character_key interface private pure module function get_string_t_array_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key type( string_t ), intent(in) :: mold (:) Return Value type( string_t ), allocatable, (:) procedure, private :: get_string_t_array_with_string_t_key interface private pure module function get_string_t_array_with_string_t_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self type( string_t ), intent(in) :: key type( string_t ), intent(in) :: mold (:) Return Value type( string_t ), allocatable, (:) procedure, private :: get_string_with_character_key interface private pure module function get_string_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key class( string_t ), intent(in) :: mold Return Value type( string_t ) procedure, private :: get_string_with_string_key interface private pure module function get_string_with_string_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key class( string_t ), intent(in) :: mold Return Value type( string_t ) procedure, private :: string_t_cat_character interface private elemental module function string_t_cat_character(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( string_t ) procedure, private :: string_t_cat_string_t interface private elemental module function string_t_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t ) procedure, private :: string_t_eq_character interface private elemental module function string_t_eq_character(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical procedure, private :: string_t_eq_string_t interface private elemental module function string_t_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical procedure, private :: string_t_ne_character interface private elemental module function string_t_ne_character(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical procedure, private :: string_t_ne_string_t interface private elemental module function string_t_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical","tags":"","url":"type/string_t.html"},{"title":"test_result_t – Julienne ","text":"type, public :: test_result_t Encapsulate a test-description string and optionally a test diagnosis.\nThis type is similar to test_description_t and test_diagnosis_t type but\n1. Doesn't need the former's procedure(diagnosis_function_i) component and\n2. Allocates an instance of the latter if and only if the test wasn't skipped. Inherits type~~test_result_t~~InheritsGraph type~test_result_t test_result_t type~string_t string_t type~test_result_t->type~string_t description_ type~test_diagnosis_t test_diagnosis_t type~test_result_t->type~test_diagnosis_t diagnosis_ Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Components Type Visibility Attributes Name Initial type( string_t ), private :: description_ type( test_diagnosis_t ), private, allocatable :: diagnosis_ Constructor public        interface test_result_t private elemental module function construct_from_character(description, diagnosis) result(test_result) Implementation → The result is a test_result_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description type( test_diagnosis_t ), intent(in), optional :: diagnosis Return Value type( test_result_t ) private elemental module function construct_from_string(description, diagnosis) result(test_result) Implementation → The result is a test_result_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description type( test_diagnosis_t ), intent(in), optional :: diagnosis Return Value type( test_result_t ) Type-Bound Procedures procedure, public :: characterize interface private pure module function characterize(self) result(characterization) Implementation → The result is a character description of the test and its outcome Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value character(len=:), allocatable generic, public :: description_contains => description_contains_string , description_contains_characters private  interface description_contains_string () Arguments None private  interface description_contains_characters () Arguments None procedure, public :: passed interface private impure elemental module function passed(self) result(test_passed) Implementation → The result is true if and only if the test passed on all images Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value logical procedure, public :: skipped interface private impure elemental module function skipped(self) result(test_skipped) Implementation → The result is true if and only if the test result contains no diagnosis on any image Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value logical procedure, private :: description_contains_characters interface private elemental module function description_contains_characters(self, substring) result(substring_found) Implementation → The result is true if and only if the test description contains the substring Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical procedure, private :: description_contains_string interface private elemental module function description_contains_string(self, substring) result(substring_found) Implementation → The result is true if and only if the test description contains the substring Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical","tags":"","url":"type/test_result_t.html"},{"title":"bin_t – Julienne ","text":"type, public :: bin_t encapsulate a range of item numbers associated with a bin Components Type Visibility Attributes Name Initial integer, private :: first_ integer, private :: last_ Constructor public        interface bin_t private elemental module function construct(num_items, num_bins, bin_number) result(bin) Implementation → the result is a bin associated with a range of item numbers Arguments Type Intent Optional Attributes Name integer, intent(in) :: num_items integer, intent(in) :: num_bins integer, intent(in) :: bin_number Return Value type( bin_t ) Type-Bound Procedures procedure, public :: first interface private elemental module function first(self) result(first_item_number) Implementation → the result is the first item number associated with the given bin Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer procedure, public :: last interface private elemental module function last(self) result(last_item_number) Implementation → the result is the last item number associated with the given bin Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer","tags":"","url":"type/bin_t.html"},{"title":"test_description_t – Julienne ","text":"type, public :: test_description_t Encapsulate test descriptions and test-functions Components Type Visibility Attributes Name Initial character(len=:), private, allocatable :: description_ procedure( diagnosis_function_i ), private, pointer, nopass :: diagnosis_function_ => null() Constructor public        interface test_description_t private module function construct_from_characters(description, diagnosis_function) result(test_description) Implementation → The result is a test_description_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description procedure( diagnosis_function_i ), intent(in), optional, pointer :: diagnosis_function Return Value type( test_description_t ) private module function construct_from_string(description, diagnosis_function) result(test_description) Implementation → The result is a test_description_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description procedure( diagnosis_function_i ), intent(in), optional, pointer :: diagnosis_function Return Value type( test_description_t ) Type-Bound Procedures generic, public :: contains_text => contains_string_t , contains_characters private  interface contains_string_t () Arguments None private  interface contains_characters () Arguments None generic, public :: operator(==) => equals private  interface equals () Arguments None procedure, public :: run interface private impure elemental module function run(self) result(test_result) Implementation → The result encapsulates the test description and test outcome Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self Return Value type( test_result_t ) procedure, private :: contains_characters interface private elemental module function contains_characters(self, substring) result(match) Implementation → The result is .true. if the test description includes the value of substring Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical procedure, private :: contains_string_t interface private elemental module function contains_string_t(self, substring) result(match) Implementation → The result is .true. if the test description includes the value of substring Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical procedure, private :: equals interface private elemental module function equals(lhs, rhs) result(lhs_eq_rhs) Implementation → The result is .true. if the components of the lhs & rhs are equal Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: lhs class( test_description_t ), intent(in) :: rhs Return Value logical","tags":"","url":"type/test_description_t.html"},{"title":"file_t – Julienne ","text":"type, public :: file_t Inherits type~~file_t~~InheritsGraph type~file_t file_t type~string_t string_t type~file_t->type~string_t lines_ Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Components Type Visibility Attributes Name Initial type( string_t ), private, allocatable :: lines_ (:) Constructor public        interface file_t private module function from_file_with_character_name(file_name) result(file_object) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: file_name Return Value type( file_t ) private module function from_file_with_string_name(file_name) result(file_object) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: file_name Return Value type( file_t ) private pure module function from_lines(lines) result(file_object) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lines (:) Return Value type( file_t ) Type-Bound Procedures procedure, public :: lines interface private pure module function lines(self) result(my_lines) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self Return Value type( string_t ), allocatable, (:) generic, public :: write_lines => write_to_output_unit , write_to_character_file_name , write_to_string_file_name private  interface write_to_output_unit () Arguments None private  interface write_to_character_file_name () Arguments None private  interface write_to_string_file_name () Arguments None procedure, private :: write_to_character_file_name interface private impure elemental module subroutine write_to_character_file_name(self, file_name) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self character(len=*), intent(in) :: file_name procedure, private :: write_to_output_unit interface private module subroutine write_to_output_unit(self) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self procedure, private :: write_to_string_file_name interface private impure elemental module subroutine write_to_string_file_name(self, file_name) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self type( string_t ), intent(in) :: file_name","tags":"","url":"type/file_t.html"},{"title":"results_interface – Julienne","text":"interface private  function results_interface() result(test_results) Arguments None Return Value type( test_result_t ),allocatable,(:) Description The result is an array of test results for subsequent reporting in the \"report\" type-bound procedure","tags":"","url":"interface/results_interface.html"},{"title":"subject_interface – Julienne","text":"interface private pure function subject_interface() result(specimen_description) Arguments None Return Value character(len=:),allocatable Description The result is the name of the test specimen (the subject of testing)","tags":"","url":"interface/subject_interface.html"},{"title":"diagnosis_function_i – Julienne","text":"interface public  function diagnosis_function_i() result(test_diagnosis) Arguments None Return Value type( test_diagnosis_t )","tags":"","url":"interface/diagnosis_function_i.html"},{"title":"help_requested – Julienne","text":"function help_requested() Arguments None Return Value logical Calls proc~~help_requested~~CallsGraph proc~help_requested help_requested interface~argument_present command_line_t%argument_present proc~help_requested->interface~argument_present Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~help_requested~~CalledByGraph proc~help_requested help_requested program~scaffold scaffold program~scaffold->proc~help_requested Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/help_requested.html"},{"title":"print_usage_info_and_stop – Julienne","text":"subroutine print_usage_info_and_stop() Arguments None Called by proc~~print_usage_info_and_stop~~CalledByGraph proc~print_usage_info_and_stop print_usage_info_and_stop program~scaffold scaffold program~scaffold->proc~print_usage_info_and_stop Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/print_usage_info_and_stop.html"},{"title":"compiler – Julienne","text":"pure function compiler() Arguments None Return Value type( string_t ) Called by proc~~compiler~~CalledByGraph proc~compiler compiler program~create_markdown_table create_markdown_table program~create_markdown_table->proc~compiler Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/compiler.html"},{"title":"markdown_table – Julienne","text":"pure function markdown_table(row_header, column_header, body_cells, side_borders) result(lines) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: row_header (first_body_row:) type( string_t ), intent(in) :: column_header (:) type( string_t ), intent(in) :: body_cells (first_body_row:,:) logical, intent(in) :: side_borders Return Value type( string_t ), (size(body_cells,1)+rank(column_header)+num_rule_lines) Calls proc~~markdown_table~~CallsGraph proc~markdown_table markdown_table interface~bracket string_t%bracket proc~markdown_table->interface~bracket Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~markdown_table~~CalledByGraph proc~markdown_table markdown_table program~create_markdown_table create_markdown_table program~create_markdown_table->proc~markdown_table Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/markdown_table.html"},{"title":"test_harness_t – Julienne","text":"public interface test_harness_t Functions private module function component_constructor(test_fixtures) result(test_harness) Implementation → Component-wise user-defined structure constructor Arguments Type Intent Optional Attributes Name class( test_fixture_t ) :: test_fixtures (:) Return Value type( test_harness_t )","tags":"","url":"interface/test_harness_t.html"},{"title":"report_results – Julienne","text":"interface private module subroutine report_results(self) Implementation → Arguments Type Intent Optional Attributes Name class( test_harness_t ), intent(in) :: self Description If command line includes -h or --help, print usage information and stop.\nOtherwise, run tests and print results, including diagnostics for any failures.\nAlso, tally and print the numbers of passing tests, total tests, skipped tests.","tags":"","url":"interface/report_results.html"},{"title":"test_suite_t – Julienne","text":"public interface test_suite_t Functions private pure module function from_components(test_subjects) result(test_suite) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: test_subjects (:) Return Value type( test_suite_t ) private pure module function from_file(file) result(test_suite) Implementation → Arguments Type Intent Optional Attributes Name type( file_t ), intent(in) :: file Return Value type( test_suite_t )","tags":"","url":"interface/test_suite_t.html"},{"title":"driver_file – Julienne","text":"interface private pure module function driver_file(self) result(file) Implementation → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self Return Value type( file_t )","tags":"","url":"interface/driver_file.html"},{"title":"stub_file – Julienne","text":"interface private pure module function stub_file(self, subject) result(file) Implementation → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self type( string_t ), intent(in) :: subject Return Value type( file_t )","tags":"","url":"interface/stub_file.html"},{"title":"test_modules – Julienne","text":"interface Called by interface~~test_modules~~CalledByGraph interface~test_modules test_suite_t%test_modules proc~driver_file driver_file proc~driver_file->interface~test_modules Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private pure module function test_modules(self) result(modules) Implementation → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self Return Value type( string_t ),allocatable,(:)","tags":"","url":"interface/test_modules.html"},{"title":"test_subjects – Julienne","text":"interface private pure module function test_subjects(self) result(subjects) Implementation → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self Return Value type( string_t ),allocatable,(:)","tags":"","url":"interface/test_subjects.html"},{"title":"test_types – Julienne","text":"interface Called by interface~~test_types~~CalledByGraph interface~test_types test_suite_t%test_types proc~driver_file driver_file proc~driver_file->interface~test_types proc~write_driver write_driver proc~write_driver->interface~test_types Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private pure module function test_types(self) result(types) Implementation → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self Return Value type( string_t ),allocatable,(:)","tags":"","url":"interface/test_types.html"},{"title":"to_file – Julienne","text":"interface private pure module function to_file(self) result(file) Implementation → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self Return Value type( file_t )","tags":"","url":"interface/to_file.html"},{"title":"write_driver – Julienne","text":"interface Called by interface~~write_driver~~CalledByGraph interface~write_driver test_suite_t%write_driver program~scaffold scaffold program~scaffold->interface~write_driver Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private module subroutine write_driver(self, file_name) Implementation → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self character(len=*), intent(in) :: file_name","tags":"","url":"interface/write_driver.html"},{"title":"one_image_prints – Julienne","text":"public interface one_image_prints Called by interface~~one_image_prints~~CalledByGraph interface~one_image_prints one_image_prints proc~print_usage_info_and_stop_if_requested print_usage_info_and_stop_if_requested proc~print_usage_info_and_stop_if_requested->interface~one_image_prints proc~report_results report_results proc~report_results->interface~one_image_prints proc~report_results->proc~print_usage_info_and_stop_if_requested proc~report~2 report proc~report~2->interface~one_image_prints Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Subroutines private module subroutine print_character(character_string) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: character_string (..) private module subroutine print_string(string) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: string (..)","tags":"","url":"interface/one_image_prints.html"},{"title":"test_fixture_t – Julienne","text":"public interface test_fixture_t Functions private module function component_constructor(test) result(test_fixture) Implementation → Construct a test_fixture_t object from its components Arguments Type Intent Optional Attributes Name class( test_t ), intent(in) :: test Return Value type( test_fixture_t )","tags":"","url":"interface/test_fixture_t.html"},{"title":"report – Julienne","text":"interface Called by interface~~report~~CalledByGraph interface~report test_fixture_t%report proc~report_results report_results proc~report_results->interface~report Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private module subroutine report(self, passes, tests, skips) Implementation → Arguments Type Intent Optional Attributes Name class( test_fixture_t ), intent(in) :: self integer, intent(inout) :: passes integer, intent(inout) :: tests integer, intent(inout) :: skips Description Print the test results and increment the tallies of passing tests, total tests, and skipped tests.","tags":"","url":"interface/report.html"},{"title":"call_julienne_assert_ – Julienne","text":"public interface call_julienne_assert_ Subroutines private pure module subroutine idiomatic_assert(test_diagnosis, file, line, description) Implementation → Error terminate if test_diagnosis%test_passed() == .false. , in which\ncase the stop code contains The description argument if present and if called via\n     `julienne_assert; otherwise, a copy of the invoking statement, The value of test_diagnosis%diagnostics_string(), , The file name if present, and The line number if present. Most compilers write the stop code to error_unit . Usage call julienne_assert(.all. ([\"a\",\"b\",\"c\"] .isBefore. \"efg\")) call_julienne_assert(.all. ([\"a\",\"b\",\"c\"] .isBefore. \"efg\")) The first line above guarantees execution, whereas the second ensures\nremoval when compiled without -DASSERTIONS .  When invoked via macro,\nthe second line also causes the automatic insertion of items 1-4 above. Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: test_diagnosis character(len=*), intent(in), optional :: file integer, intent(in), optional :: line character(len=*), intent(in), optional :: description private pure module subroutine logical_assert(assertion, file, line, description) Implementation → Error terminate if assertion == .false. , in which case the stop code\ncontains The description argument if present and if called via \n   `julienne_assert; otherwise, a copy of the invoking statement, The file name if present, and The line number if present. Most compilers write the stop code to error_unit . Usage call julienne_assert(associated(A)) call_julienne_assert(associated(A)) The first line above guarantees execution, whereas the second ensures\nremoval when compiled without -DASSERTIONS .  When invoked via macro,\nthe second line also causes the automatic insertion of items 1-4 above. Arguments Type Intent Optional Attributes Name logical, intent(in) :: assertion character(len=*), intent(in), optional :: file integer, intent(in), optional :: line character(len=*), intent(in), optional :: description","tags":"","url":"interface/call_julienne_assert_.html"},{"title":"julienne_assert – Julienne","text":"public interface julienne_assert Module Procedures private pure module subroutine idiomatic_assert(test_diagnosis, file, line, description) Implementation → Error terminate if test_diagnosis%test_passed() == .false. , in which\ncase the stop code contains The description argument if present and if called via\n     `julienne_assert; otherwise, a copy of the invoking statement, The value of test_diagnosis%diagnostics_string(), , The file name if present, and The line number if present. Most compilers write the stop code to error_unit . Usage call julienne_assert(.all. ([\"a\",\"b\",\"c\"] .isBefore. \"efg\")) call_julienne_assert(.all. ([\"a\",\"b\",\"c\"] .isBefore. \"efg\")) The first line above guarantees execution, whereas the second ensures\nremoval when compiled without -DASSERTIONS .  When invoked via macro,\nthe second line also causes the automatic insertion of items 1-4 above. Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: test_diagnosis character(len=*), intent(in), optional :: file integer, intent(in), optional :: line character(len=*), intent(in), optional :: description private pure module subroutine logical_assert(assertion, file, line, description) Implementation → Error terminate if assertion == .false. , in which case the stop code\ncontains The description argument if present and if called via \n   `julienne_assert; otherwise, a copy of the invoking statement, The file name if present, and The line number if present. Most compilers write the stop code to error_unit . Usage call julienne_assert(associated(A)) call_julienne_assert(associated(A)) The first line above guarantees execution, whereas the second ensures\nremoval when compiled without -DASSERTIONS .  When invoked via macro,\nthe second line also causes the automatic insertion of items 1-4 above. Arguments Type Intent Optional Attributes Name logical, intent(in) :: assertion character(len=*), intent(in), optional :: file integer, intent(in), optional :: line character(len=*), intent(in), optional :: description","tags":"","url":"interface/julienne_assert.html"},{"title":"report – Julienne","text":"interface Called by interface~~report~2~~CalledByGraph interface~report~2 test_t%report proc~report report proc~report->interface~report~2 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private module subroutine report(test, passes, tests, skips) Implementation → Arguments Type Intent Optional Attributes Name class( test_t ), intent(in) :: test integer, intent(inout) :: passes integer, intent(inout) :: tests integer, intent(inout) :: skips Description Print the test results and increment the tallies of passing tests, total tests, and skipped tests.","tags":"","url":"interface/report~2.html"},{"title":"run – Julienne","text":"interface private module function run(test, test_descriptions) result(test_results) Implementation → Arguments Type Intent Optional Attributes Name class( test_t ), intent(in) :: test type( test_description_t ), intent(in) :: test_descriptions (:) Return Value type( test_result_t ),allocatable,(:) Description Construct an array of test results from a set of tests filtered for descriptions and subjects with\nthe '--contains' flag's value if the flag was included on the command line at program launch.","tags":"","url":"interface/run.html"},{"title":"co_all – Julienne","text":"interface Called by interface~~co_all~~CalledByGraph interface~co_all co_all proc~passed passed proc~passed->interface~co_all proc~report~2 report proc~report~2->interface~co_all proc~skipped skipped proc~skipped->interface~co_all Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. public impure elemental module subroutine co_all(boolean) Implementation → Arguments Type Intent Optional Attributes Name logical, intent(inout) :: boolean Description If any image in a team calls this subroutine, then every image in the \nthe same team must call this subroutine.  This subroutine sets the\n\"boolean\" argument .true. if it is true in all participating images\nupon entry and .false. otherwise.","tags":"","url":"interface/co_all.html"},{"title":"operator(.all.) – Julienne","text":"public interface operator(.all.) Functions private pure module function aggregate_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (..) Return Value type( test_diagnosis_t ) private pure module function aggregate_rank10_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:,:,:,:) Return Value type( test_diagnosis_t ) private pure module function aggregate_rank11_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:,:,:,:,:) Return Value type( test_diagnosis_t ) private pure module function aggregate_rank12_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:,:,:,:,:,:) Return Value type( test_diagnosis_t ) private pure module function aggregate_rank13_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:,:,:,:,:,:,:) Return Value type( test_diagnosis_t ) private pure module function aggregate_rank14_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:,:,:,:,:,:,:,:) Return Value type( test_diagnosis_t ) private pure module function aggregate_rank15_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:,:,:,:,:,:,:,:,:) Return Value type( test_diagnosis_t ) private pure module function aggregate_rank2_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:) Return Value type( test_diagnosis_t ) private pure module function aggregate_rank3_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:) Return Value type( test_diagnosis_t ) private pure module function aggregate_rank4_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:) Return Value type( test_diagnosis_t ) private pure module function aggregate_rank5_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:) Return Value type( test_diagnosis_t ) private pure module function aggregate_rank6_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:) Return Value type( test_diagnosis_t ) private pure module function aggregate_rank7_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:) Return Value type( test_diagnosis_t ) private pure module function aggregate_rank8_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:,:) Return Value type( test_diagnosis_t ) private pure module function aggregate_rank9_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:,:,:) Return Value type( test_diagnosis_t ) private pure module function aggregate_scalar_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses Return Value type( test_diagnosis_t ) private pure module function aggregate_vector_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:) Return Value type( test_diagnosis_t )","tags":"","url":"interface/operator(.all.).html"},{"title":"operator(.also.) – Julienne","text":"public interface operator(.also.) Functions private elemental module function also(lhs, rhs) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: lhs type( test_diagnosis_t ), intent(in) :: rhs Return Value type( test_diagnosis_t )","tags":"","url":"interface/operator(.also.).html"},{"title":"operator(.and.) – Julienne","text":"public interface operator(.and.) Module Procedures private elemental module function also(lhs, rhs) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: lhs type( test_diagnosis_t ), intent(in) :: rhs Return Value type( test_diagnosis_t )","tags":"","url":"interface/operator(.and.).html"},{"title":"operator(.approximates.) – Julienne","text":"public interface operator(.approximates.) Functions private elemental module function approximates_double_precision(actual, expected) result(operands) Implementation → Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected Return Value type( operands_t (double_precision)) private elemental module function approximates_real(actual, expected) result(operands) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected Return Value type( operands_t )","tags":"","url":"interface/operator(.approximates.).html"},{"title":"operator(.equalsExpected.) – Julienne","text":"public interface operator(.equalsExpected.) Functions private elemental module function equals_expected_c_ptr(actual, expected) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: actual type(c_ptr), intent(in) :: expected Return Value type( test_diagnosis_t ) private elemental module function equals_expected_character(actual, expected) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: actual character(len=*), intent(in) :: expected Return Value type( test_diagnosis_t ) private elemental module function equals_expected_character_vs_string(actual, expected) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: actual type( string_t ), intent(in) :: expected Return Value type( test_diagnosis_t ) private elemental module function equals_expected_integer(actual, expected) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected Return Value type( test_diagnosis_t ) private elemental module function equals_expected_integer_c_size_t(actual, expected) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_size_t), intent(in) :: actual integer(kind=c_size_t), intent(in) :: expected Return Value type( test_diagnosis_t ) private elemental module function equals_expected_string(actual, expected) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: actual type( string_t ), intent(in) :: expected Return Value type( test_diagnosis_t ) private elemental module function equals_expected_string_vs_character(actual, expected) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: actual character(len=*), intent(in) :: expected Return Value type( test_diagnosis_t )","tags":"","url":"interface/operator(.equalsexpected.).html"},{"title":"operator(.expect.) – Julienne","text":"public interface operator(.expect.) Functions private elemental module function expect(expected_true) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name logical, intent(in) :: expected_true Return Value type( test_diagnosis_t )","tags":"","url":"interface/operator(.expect.).html"},{"title":"operator(.greaterThan.) – Julienne","text":"public interface operator(.greaterThan.) Functions private elemental module function greater_than_double(actual, expected_floor) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected_floor Return Value type( test_diagnosis_t ) private elemental module function greater_than_integer(actual, expected_floor) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_floor Return Value type( test_diagnosis_t ) private elemental module function greater_than_real(actual, expected_floor) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected_floor Return Value type( test_diagnosis_t )","tags":"","url":"interface/operator(.greaterthan.).html"},{"title":"operator(.greaterThanOrEqualTo.) – Julienne","text":"public interface operator(.greaterThanOrEqualTo.) Functions private elemental module function greater_than_or_equal_to_double_precision(actual, expected_min) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected_min Return Value type( test_diagnosis_t ) private elemental module function greater_than_or_equal_to_integer(actual, expected_min) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_min Return Value type( test_diagnosis_t ) private elemental module function greater_than_or_equal_to_real(actual, expected_min) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected_min Return Value type( test_diagnosis_t )","tags":"","url":"interface/operator(.greaterthanorequalto.).html"},{"title":"operator(.isAfter.) – Julienne","text":"public interface operator(.isAfter.) Functions private elemental module function reverse_alphabetical_character_vs_character(lhs, rhs) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( test_diagnosis_t ) private elemental module function reverse_alphabetical_character_vs_string(lhs, rhs) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs type( string_t ), intent(in) :: rhs Return Value type( test_diagnosis_t ) private elemental module function reverse_alphabetical_string_vs_character(lhs, rhs) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( test_diagnosis_t ) private elemental module function reverse_alphabetical_string_vs_string(lhs, rhs) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lhs type( string_t ), intent(in) :: rhs Return Value type( test_diagnosis_t )","tags":"","url":"interface/operator(.isafter.).html"},{"title":"operator(.isAtLeast.) – Julienne","text":"public interface operator(.isAtLeast.) Module Procedures private elemental module function greater_than_or_equal_to_integer(actual, expected_min) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_min Return Value type( test_diagnosis_t ) private elemental module function greater_than_or_equal_to_real(actual, expected_min) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected_min Return Value type( test_diagnosis_t ) private elemental module function greater_than_or_equal_to_double_precision(actual, expected_min) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected_min Return Value type( test_diagnosis_t )","tags":"","url":"interface/operator(.isatleast.).html"},{"title":"operator(.isAtMost.) – Julienne","text":"public interface operator(.isAtMost.) Module Procedures private elemental module function less_than_or_equal_to_integer(actual, expected_max) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_max Return Value type( test_diagnosis_t ) private elemental module function less_than_or_equal_to_real(actual, expected_max) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected_max Return Value type( test_diagnosis_t ) private elemental module function less_than_or_equal_to_double_precision(actual, expected_max) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected_max Return Value type( test_diagnosis_t )","tags":"","url":"interface/operator(.isatmost.).html"},{"title":"operator(.isBefore.) – Julienne","text":"public interface operator(.isBefore.) Functions private elemental module function alphabetical_character_vs_character(lhs, rhs) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( test_diagnosis_t ) private elemental module function alphabetical_character_vs_string(lhs, rhs) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs type( string_t ), intent(in) :: rhs Return Value type( test_diagnosis_t ) private elemental module function alphabetical_string_vs_character(lhs, rhs) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( test_diagnosis_t ) private elemental module function alphabetical_string_vs_string(lhs, rhs) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lhs type( string_t ), intent(in) :: rhs Return Value type( test_diagnosis_t )","tags":"","url":"interface/operator(.isbefore.).html"},{"title":"operator(.lessThan.) – Julienne","text":"public interface operator(.lessThan.) Functions private elemental module function less_than_double(actual, expected_ceiling) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected_ceiling Return Value type( test_diagnosis_t ) private elemental module function less_than_integer(actual, expected_ceiling) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_ceiling Return Value type( test_diagnosis_t ) private elemental module function less_than_real(actual, expected_ceiling) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected_ceiling Return Value type( test_diagnosis_t )","tags":"","url":"interface/operator(.lessthan.).html"},{"title":"operator(.lessThanOrEqualTo.) – Julienne","text":"public interface operator(.lessThanOrEqualTo.) Functions private elemental module function less_than_or_equal_to_double_precision(actual, expected_max) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected_max Return Value type( test_diagnosis_t ) private elemental module function less_than_or_equal_to_integer(actual, expected_max) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_max Return Value type( test_diagnosis_t ) private elemental module function less_than_or_equal_to_real(actual, expected_max) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected_max Return Value type( test_diagnosis_t )","tags":"","url":"interface/operator(.lessthanorequalto.).html"},{"title":"operator(.within.) – Julienne","text":"public interface operator(.within.) Functions private elemental module function within_double_precision(operands, tolerance) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( operands_t (double_precision)), intent(in) :: operands double precision, intent(in) :: tolerance Return Value type( test_diagnosis_t ) private elemental module function within_real(operands, tolerance) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( operands_t ), intent(in) :: operands real, intent(in) :: tolerance Return Value type( test_diagnosis_t )","tags":"","url":"interface/operator(.within.).html"},{"title":"operator(.withinFraction.) – Julienne","text":"public interface operator(.withinFraction.) Functions private elemental module function within_double_precision_fraction(operands, fractional_tolerance) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( operands_t (double_precision)), intent(in) :: operands double precision, intent(in) :: fractional_tolerance Return Value type( test_diagnosis_t ) private elemental module function within_real_fraction(operands, fractional_tolerance) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( operands_t ), intent(in) :: operands real, intent(in) :: fractional_tolerance Return Value type( test_diagnosis_t )","tags":"","url":"interface/operator(.withinfraction.).html"},{"title":"operator(.withinPercentage.) – Julienne","text":"public interface operator(.withinPercentage.) Functions private elemental module function within_double_precision_percentage(operands, percentage_tolerance) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( operands_t (double_precision)), intent(in) :: operands double precision, intent(in) :: percentage_tolerance Return Value type( test_diagnosis_t ) private elemental module function within_real_percentage(operands, percentage_tolerance) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( operands_t ), intent(in) :: operands real, intent(in) :: percentage_tolerance Return Value type( test_diagnosis_t )","tags":"","url":"interface/operator(.withinpercentage.).html"},{"title":"operator(//) – Julienne","text":"public interface operator(//) Functions private elemental module function append_character_if_test_failed(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( test_diagnosis_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( test_diagnosis_t ) private elemental module function append_string_if_test_failed(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( test_diagnosis_t ), intent(in) :: lhs type( string_t ), intent(in) :: rhs Return Value type( test_diagnosis_t )","tags":"","url":"interface/operator(SLASHSLASH).html"},{"title":"test_diagnosis_t – Julienne","text":"public interface test_diagnosis_t Functions private elemental module function construct_from_character(test_passed, diagnostics_string) result(test_diagnosis) Implementation → The result is a test_diagnosis_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name logical, intent(in) :: test_passed character(len=*), intent(in) :: diagnostics_string Return Value type( test_diagnosis_t ) private elemental module function construct_from_string_t(test_passed, diagnostics_string) result(test_diagnosis) Implementation → The result is a test_diagnosis_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name logical, intent(in) :: test_passed type( string_t ), intent(in) :: diagnostics_string Return Value type( test_diagnosis_t )","tags":"","url":"interface/test_diagnosis_t.html"},{"title":"diagnostics_string – Julienne","text":"interface Called by interface~~diagnostics_string~~CalledByGraph interface~diagnostics_string test_diagnosis_t%diagnostics_string proc~characterize characterize proc~characterize->interface~diagnostics_string proc~idiomatic_assert idiomatic_assert proc~idiomatic_assert->interface~diagnostics_string Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private elemental module function diagnostics_string(self) result(string_) Implementation → Arguments Type Intent Optional Attributes Name class( test_diagnosis_t ), intent(in) :: self Return Value type( string_t ) Description The result is a string describing the condition(s) that caused a test failure","tags":"","url":"interface/diagnostics_string.html"},{"title":"test_passed – Julienne","text":"interface Called by interface~~test_passed~~CalledByGraph interface~test_passed test_diagnosis_t%test_passed proc~characterize characterize proc~characterize->interface~test_passed proc~idiomatic_assert idiomatic_assert proc~idiomatic_assert->interface~test_passed proc~passed passed proc~passed->interface~test_passed Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private elemental module function test_passed(self) result(passed) Implementation → Arguments Type Intent Optional Attributes Name class( test_diagnosis_t ), intent(in) :: self Return Value logical Description The result is .true. if the test passed and false otherwise","tags":"","url":"interface/test_passed.html"},{"title":"argument_present – Julienne","text":"interface Called by interface~~argument_present~~CalledByGraph interface~argument_present command_line_t%argument_present proc~help_requested help_requested proc~help_requested->interface~argument_present proc~print_usage_info_and_stop_if_requested print_usage_info_and_stop_if_requested proc~print_usage_info_and_stop_if_requested->interface~argument_present program~check_for_command_line_argument check_for_command_line_argument program~check_for_command_line_argument->interface~argument_present proc~report_results report_results proc~report_results->proc~print_usage_info_and_stop_if_requested program~scaffold scaffold program~scaffold->proc~help_requested Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private module function argument_present(acceptable_argument) result(found) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: acceptable_argument (:) sample list: [character(len=len( )):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"]\nwhere dashes support Linux/macOS, slashes support Windows, and must be replaced\nby the longest list element (\"--benchmark\" above) Return Value logical Description result is .true. only if a command-line argument matches an element of this function's argument","tags":"","url":"interface/argument_present.html"},{"title":"flag_value – Julienne","text":"interface Called by interface~~flag_value~~CalledByGraph interface~flag_value command_line_t%flag_value proc~filter filter proc~filter->interface~flag_value program~get_command_line_flag_value get_command_line_flag_value program~get_command_line_flag_value->interface~flag_value program~scaffold scaffold program~scaffold->interface~flag_value Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private module function flag_value(flag) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: flag Return Value character(len=:),allocatable Description result = { the value passed immediately after a command-line flag if the flag is present or\n         { an empty string otherwise.","tags":"","url":"interface/flag_value.html"},{"title":"array_of_strings – Julienne","text":"interface public pure module function array_of_strings(delimited_strings, delimiter) result(strings_array) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: delimited_strings character(len=*), intent(in) :: delimiter Return Value type( string_t ),allocatable,(:)","tags":"","url":"interface/array_of_strings.html"},{"title":"operator(.cat.) – Julienne","text":"public interface operator(.cat.) Functions private pure module function concatenate_elements(strings) result(concatenated_strings) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) Return Value type( string_t )","tags":"","url":"interface/operator(.cat.).html"},{"title":"operator(.csv.) – Julienne","text":"public interface operator(.csv.) Functions private pure module function characters_with_comma_separator(strings) result(csv) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: strings (:) Return Value type( string_t ) private pure module function strings_with_comma_separator(strings) result(csv) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) Return Value type( string_t )","tags":"","url":"interface/operator(.csv.).html"},{"title":"operator(.separatedBy.) – Julienne","text":"public interface operator(.separatedBy.) Module Procedures private pure module function strings_with_character_separator(strings, separator) result(sv) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) character(len=*), intent(in) :: separator Return Value type( string_t ) private pure module function strings_with_string_t_separator(strings, separator) result(sv) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) type( string_t ), intent(in) :: separator Return Value type( string_t ) private pure module function characters_with_character_separator(strings, separator) result(sv) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: strings (:) character(len=*), intent(in) :: separator Return Value type( string_t ) private pure module function characters_with_string_separator(strings, separator) result(sv) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: strings (:) type( string_t ), intent(in) :: separator Return Value type( string_t )","tags":"","url":"interface/operator(.separatedby.).html"},{"title":"operator(.sv.) – Julienne","text":"public interface operator(.sv.) Functions private pure module function characters_with_character_separator(strings, separator) result(sv) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: strings (:) character(len=*), intent(in) :: separator Return Value type( string_t ) private pure module function characters_with_string_separator(strings, separator) result(sv) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: strings (:) type( string_t ), intent(in) :: separator Return Value type( string_t ) private pure module function strings_with_character_separator(strings, separator) result(sv) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) character(len=*), intent(in) :: separator Return Value type( string_t ) private pure module function strings_with_string_t_separator(strings, separator) result(sv) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) type( string_t ), intent(in) :: separator Return Value type( string_t )","tags":"","url":"interface/operator(.sv.).html"},{"title":"string_t – Julienne","text":"public interface string_t Functions private elemental module function from_characters(string) result(new_string) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string Return Value type( string_t ) private elemental module function from_default_complex(z) result(string) Implementation → Arguments Type Intent Optional Attributes Name complex, intent(in) :: z Return Value type( string_t ) private elemental module function from_default_integer(i) result(string) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: i Return Value type( string_t ) private elemental module function from_default_logical(b) result(string) Implementation → Arguments Type Intent Optional Attributes Name logical, intent(in) :: b Return Value type( string_t ) private elemental module function from_default_real(x) result(string) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: x Return Value type( string_t ) private elemental module function from_double_precision(x) result(string) Implementation → Arguments Type Intent Optional Attributes Name double precision, intent(in) :: x Return Value type( string_t ) private elemental module function from_double_precision_complex(z) result(string) Implementation → Arguments Type Intent Optional Attributes Name complex(kind=kind(1D0)), intent(in) :: z Return Value type( string_t ) private elemental module function from_integer_c_size_t(i) result(string) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_size_t), intent(in) :: i Return Value type( string_t ) private elemental module function from_logical_c_bool(b) result(string) Implementation → Arguments Type Intent Optional Attributes Name logical(kind=c_bool), intent(in) :: b Return Value type( string_t )","tags":"","url":"interface/string_t.html"},{"title":"as_character – Julienne","text":"interface Called by interface~~as_character~~CalledByGraph interface~as_character string_t%as_character none~string~2 string_t%string none~string~2->interface~as_character proc~aggregate_diagnosis aggregate_diagnosis proc~aggregate_diagnosis->none~string~2 proc~alphabetical_character_vs_string alphabetical_character_vs_string proc~alphabetical_character_vs_string->none~string~2 proc~alphabetical_string_vs_character alphabetical_string_vs_character proc~alphabetical_string_vs_character->none~string~2 proc~alphabetical_string_vs_string alphabetical_string_vs_string proc~alphabetical_string_vs_string->none~string~2 proc~assign_string_t_to_character assign_string_t_to_character proc~assign_string_t_to_character->none~string~2 proc~base_name base_name proc~base_name->none~string~2 proc~character_eq_string_t character_eq_string_t proc~character_eq_string_t->none~string~2 proc~character_ne_string_t character_ne_string_t proc~character_ne_string_t->none~string~2 proc~characterize characterize proc~characterize->none~string~2 proc~concatenate_elements concatenate_elements proc~concatenate_elements->none~string~2 proc~contains_string_t contains_string_t proc~contains_string_t->none~string~2 proc~description_contains_characters description_contains_characters proc~description_contains_characters->none~string~2 proc~description_contains_string description_contains_string proc~description_contains_string->none~string~2 proc~file_extension file_extension proc~file_extension->none~string~2 proc~from_file_with_string_name from_file_with_string_name proc~from_file_with_string_name->none~string~2 proc~get_double_precision get_double_precision proc~get_double_precision->none~string~2 proc~get_double_precision_array get_double_precision_array proc~get_double_precision_array->none~string~2 proc~get_integer get_integer proc~get_integer->none~string~2 proc~get_json_key get_json_key proc~get_json_key->none~string~2 proc~get_logical get_logical proc~get_logical->none~string~2 proc~get_real get_real proc~get_real->none~string~2 proc~get_real_array get_real_array proc~get_real_array->none~string~2 proc~get_string_t_array_with_character_key get_string_t_array_with_character_key proc~get_string_t_array_with_character_key->none~string~2 proc~get_string_t_array_with_string_t_key get_string_t_array_with_string_t_key proc~get_string_t_array_with_string_t_key->none~string~2 proc~get_string_with_string_key get_string_with_string_key proc~get_string_with_string_key->none~string~2 proc~print_string print_string proc~print_string->none~string~2 proc~string_t_eq_character string_t_eq_character proc~string_t_eq_character->none~string~2 proc~string_t_eq_string_t string_t_eq_string_t proc~string_t_eq_string_t->none~string~2 proc~string_t_ne_character string_t_ne_character proc~string_t_ne_character->none~string~2 proc~string_t_ne_string_t string_t_ne_string_t proc~string_t_ne_string_t->none~string~2 proc~write_driver write_driver proc~write_driver->none~string~2 proc~write_to_character_file_name write_to_character_file_name proc~write_to_character_file_name->none~string~2 proc~write_to_output_unit write_to_output_unit proc~write_to_output_unit->none~string~2 proc~write_to_string_file_name write_to_string_file_name proc~write_to_string_file_name->none~string~2 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private pure module function as_character(self) result(raw_string) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value character(len=:),allocatable","tags":"","url":"interface/as_character.html"},{"title":"assign_character_to_string_t – Julienne","text":"interface private elemental module subroutine assign_character_to_string_t(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(inout) :: lhs character(len=*), intent(in) :: rhs","tags":"","url":"interface/assign_character_to_string_t.html"},{"title":"assign_string_t_to_character – Julienne","text":"interface private pure module subroutine assign_string_t_to_character(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=:), intent(out), allocatable :: lhs class( string_t ), intent(in) :: rhs","tags":"","url":"interface/assign_string_t_to_character.html"},{"title":"base_name – Julienne","text":"interface private elemental module function base_name(self) result(base) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) Description result contains all characters in file_name before the last dot (.)","tags":"","url":"interface/base_name.html"},{"title":"bracket – Julienne","text":"interface Called by interface~~bracket~~CalledByGraph interface~bracket string_t%bracket proc~markdown_table markdown_table proc~markdown_table->interface~bracket proc~to_file to_file proc~to_file->interface~bracket program~create_markdown_table create_markdown_table program~create_markdown_table->proc~markdown_table Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private elemental module function bracket(self, opening, closing) result(bracketed_self) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in), optional :: opening character(len=*), intent(in), optional :: closing Return Value type( string_t )","tags":"","url":"interface/bracket.html"},{"title":"character_cat_string_t – Julienne","text":"interface private elemental module function character_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t )","tags":"","url":"interface/character_cat_string_t.html"},{"title":"character_eq_string_t – Julienne","text":"interface private elemental module function character_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical","tags":"","url":"interface/character_eq_string_t.html"},{"title":"character_ne_string_t – Julienne","text":"interface private elemental module function character_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical","tags":"","url":"interface/character_ne_string_t.html"},{"title":"file_extension – Julienne","text":"interface private elemental module function file_extension(self) result(extension) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) Description result contains all characters in file_name after the last dot (.)","tags":"","url":"interface/file_extension.html"},{"title":"get_character_with_character_key – Julienne","text":"interface private pure module function get_character_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key character(len=*), intent(in) :: mold Return Value character(len=:),allocatable","tags":"","url":"interface/get_character_with_character_key.html"},{"title":"get_character_with_string_key – Julienne","text":"interface private pure module function get_character_with_string_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key character(len=*), intent(in) :: mold Return Value character(len=:),allocatable","tags":"","url":"interface/get_character_with_string_key.html"},{"title":"get_double_precision – Julienne","text":"interface Called by interface~~get_double_precision~~CalledByGraph interface~get_double_precision string_t%get_double_precision proc~get_double_precision_with_character_key get_double_precision_with_character_key proc~get_double_precision_with_character_key->interface~get_double_precision Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private pure module function get_double_precision(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key double precision, intent(in) :: mold Return Value double precision","tags":"","url":"interface/get_double_precision.html"},{"title":"get_double_precision_array – Julienne","text":"interface Called by interface~~get_double_precision_array~~CalledByGraph interface~get_double_precision_array string_t%get_double_precision_array proc~get_double_precision_array_with_character_key get_double_precision_array_with_character_key proc~get_double_precision_array_with_character_key->interface~get_double_precision_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private pure module function get_double_precision_array(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key double precision, intent(in) :: mold (:) Return Value double precision,allocatable,(:)","tags":"","url":"interface/get_double_precision_array.html"},{"title":"get_double_precision_array_with_character_key – Julienne","text":"interface private pure module function get_double_precision_array_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key double precision, intent(in) :: mold (:) Return Value double precision,allocatable,(:)","tags":"","url":"interface/get_double_precision_array_with_character_key.html"},{"title":"get_double_precision_with_character_key – Julienne","text":"interface private pure module function get_double_precision_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key double precision, intent(in) :: mold Return Value double precision","tags":"","url":"interface/get_double_precision_with_character_key.html"},{"title":"get_integer – Julienne","text":"interface Called by interface~~get_integer~~CalledByGraph interface~get_integer string_t%get_integer proc~get_integer_with_character_key get_integer_with_character_key proc~get_integer_with_character_key->interface~get_integer Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private pure module function get_integer(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold Return Value integer","tags":"","url":"interface/get_integer.html"},{"title":"get_integer_array – Julienne","text":"interface Called by interface~~get_integer_array~~CalledByGraph interface~get_integer_array string_t%get_integer_array proc~get_integer_array_with_character_key get_integer_array_with_character_key proc~get_integer_array_with_character_key->interface~get_integer_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private pure module function get_integer_array(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold (:) Return Value integer,allocatable,(:)","tags":"","url":"interface/get_integer_array.html"},{"title":"get_integer_array_with_character_key – Julienne","text":"interface private pure module function get_integer_array_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key integer, intent(in) :: mold (:) Return Value integer,allocatable,(:)","tags":"","url":"interface/get_integer_array_with_character_key.html"},{"title":"get_integer_with_character_key – Julienne","text":"interface private pure module function get_integer_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key integer, intent(in) :: mold Return Value integer","tags":"","url":"interface/get_integer_with_character_key.html"},{"title":"get_json_key – Julienne","text":"interface Called by interface~~get_json_key~~CalledByGraph interface~get_json_key string_t%get_json_key proc~get_double_precision get_double_precision proc~get_double_precision->interface~get_json_key proc~get_double_precision_array get_double_precision_array proc~get_double_precision_array->interface~get_json_key proc~get_integer get_integer proc~get_integer->interface~get_json_key proc~get_logical get_logical proc~get_logical->interface~get_json_key proc~get_real get_real proc~get_real->interface~get_json_key proc~get_real_array get_real_array proc~get_real_array->interface~get_json_key proc~get_string_t_array_with_character_key get_string_t_array_with_character_key proc~get_string_t_array_with_character_key->interface~get_json_key proc~get_string_with_string_key get_string_with_string_key proc~get_string_with_string_key->interface~get_json_key Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private elemental module function get_json_key(self) result(unquoted_key) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t )","tags":"","url":"interface/get_json_key.html"},{"title":"get_logical – Julienne","text":"interface Called by interface~~get_logical~~CalledByGraph interface~get_logical string_t%get_logical proc~get_logical_with_character_key get_logical_with_character_key proc~get_logical_with_character_key->interface~get_logical Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private pure module function get_logical(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key logical, intent(in) :: mold Return Value logical","tags":"","url":"interface/get_logical.html"},{"title":"get_logical_with_character_key – Julienne","text":"interface private pure module function get_logical_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key logical, intent(in) :: mold Return Value logical","tags":"","url":"interface/get_logical_with_character_key.html"},{"title":"get_real – Julienne","text":"interface Called by interface~~get_real~~CalledByGraph interface~get_real string_t%get_real proc~get_real_with_character_key get_real_with_character_key proc~get_real_with_character_key->interface~get_real Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private pure module function get_real(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold Return Value real","tags":"","url":"interface/get_real.html"},{"title":"get_real_array – Julienne","text":"interface Called by interface~~get_real_array~~CalledByGraph interface~get_real_array string_t%get_real_array proc~get_integer_array get_integer_array proc~get_integer_array->interface~get_real_array proc~get_real_array_with_character_key get_real_array_with_character_key proc~get_real_array_with_character_key->interface~get_real_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private pure module function get_real_array(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold (:) Return Value real,allocatable,(:)","tags":"","url":"interface/get_real_array.html"},{"title":"get_real_array_with_character_key – Julienne","text":"interface private pure module function get_real_array_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key real, intent(in) :: mold (:) Return Value real,allocatable,(:)","tags":"","url":"interface/get_real_array_with_character_key.html"},{"title":"get_real_with_character_key – Julienne","text":"interface private pure module function get_real_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key real, intent(in) :: mold Return Value real","tags":"","url":"interface/get_real_with_character_key.html"},{"title":"get_string_t_array_with_character_key – Julienne","text":"interface Called by interface~~get_string_t_array_with_character_key~~CalledByGraph interface~get_string_t_array_with_character_key string_t%get_string_t_array_with_character_key proc~get_string_t_array_with_string_t_key get_string_t_array_with_string_t_key proc~get_string_t_array_with_string_t_key->interface~get_string_t_array_with_character_key Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private pure module function get_string_t_array_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key type( string_t ), intent(in) :: mold (:) Return Value type( string_t ),allocatable,(:)","tags":"","url":"interface/get_string_t_array_with_character_key.html"},{"title":"get_string_t_array_with_string_t_key – Julienne","text":"interface private pure module function get_string_t_array_with_string_t_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self type( string_t ), intent(in) :: key type( string_t ), intent(in) :: mold (:) Return Value type( string_t ),allocatable,(:)","tags":"","url":"interface/get_string_t_array_with_string_t_key.html"},{"title":"get_string_with_character_key – Julienne","text":"interface private pure module function get_string_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key class( string_t ), intent(in) :: mold Return Value type( string_t )","tags":"","url":"interface/get_string_with_character_key.html"},{"title":"get_string_with_string_key – Julienne","text":"interface Called by interface~~get_string_with_string_key~~CalledByGraph interface~get_string_with_string_key string_t%get_string_with_string_key proc~get_character_with_character_key get_character_with_character_key proc~get_character_with_character_key->interface~get_string_with_string_key proc~get_character_with_string_key get_character_with_string_key proc~get_character_with_string_key->interface~get_string_with_string_key proc~get_string_with_character_key get_string_with_character_key proc~get_string_with_character_key->interface~get_string_with_string_key Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private pure module function get_string_with_string_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key class( string_t ), intent(in) :: mold Return Value type( string_t )","tags":"","url":"interface/get_string_with_string_key.html"},{"title":"is_allocated – Julienne","text":"interface private elemental module function is_allocated(self) result(string_allocated) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value logical","tags":"","url":"interface/is_allocated.html"},{"title":"string_t_cat_character – Julienne","text":"interface private elemental module function string_t_cat_character(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( string_t )","tags":"","url":"interface/string_t_cat_character.html"},{"title":"string_t_cat_string_t – Julienne","text":"interface private elemental module function string_t_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t )","tags":"","url":"interface/string_t_cat_string_t.html"},{"title":"string_t_eq_character – Julienne","text":"interface private elemental module function string_t_eq_character(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical","tags":"","url":"interface/string_t_eq_character.html"},{"title":"string_t_eq_string_t – Julienne","text":"interface private elemental module function string_t_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical","tags":"","url":"interface/string_t_eq_string_t.html"},{"title":"string_t_ne_character – Julienne","text":"interface private elemental module function string_t_ne_character(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical","tags":"","url":"interface/string_t_ne_character.html"},{"title":"string_t_ne_string_t – Julienne","text":"interface private elemental module function string_t_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical","tags":"","url":"interface/string_t_ne_string_t.html"},{"title":"separated_values – Julienne","text":"interface public pure module function separated_values(separator, mold) result(format_string) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: separator class(*), intent(in) :: mold (..) Return Value character(len=:),allocatable","tags":"","url":"interface/separated_values.html"},{"title":"test_result_t – Julienne","text":"public interface test_result_t Functions private elemental module function construct_from_character(description, diagnosis) result(test_result) Implementation → The result is a test_result_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description type( test_diagnosis_t ), intent(in), optional :: diagnosis Return Value type( test_result_t ) private elemental module function construct_from_string(description, diagnosis) result(test_result) Implementation → The result is a test_result_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description type( test_diagnosis_t ), intent(in), optional :: diagnosis Return Value type( test_result_t )","tags":"","url":"interface/test_result_t.html"},{"title":"characterize – Julienne","text":"interface private pure module function characterize(self) result(characterization) Implementation → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value character(len=:),allocatable Description The result is a character description of the test and its outcome","tags":"","url":"interface/characterize.html"},{"title":"description_contains_characters – Julienne","text":"interface Called by interface~~description_contains_characters~~CalledByGraph interface~description_contains_characters test_result_t%description_contains_characters proc~description_contains_string description_contains_string proc~description_contains_string->interface~description_contains_characters Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private elemental module function description_contains_characters(self, substring) result(substring_found) Implementation → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical Description The result is true if and only if the test description contains the substring","tags":"","url":"interface/description_contains_characters.html"},{"title":"description_contains_string – Julienne","text":"interface private elemental module function description_contains_string(self, substring) result(substring_found) Implementation → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical Description The result is true if and only if the test description contains the substring","tags":"","url":"interface/description_contains_string.html"},{"title":"passed – Julienne","text":"interface private impure elemental module function passed(self) result(test_passed) Implementation → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value logical Description The result is true if and only if the test passed on all images","tags":"","url":"interface/passed.html"},{"title":"skipped – Julienne","text":"interface private impure elemental module function skipped(self) result(test_skipped) Implementation → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value logical Description The result is true if and only if the test result contains no diagnosis on any image","tags":"","url":"interface/skipped.html"},{"title":"bin_t – Julienne","text":"public interface bin_t Functions private elemental module function construct(num_items, num_bins, bin_number) result(bin) Implementation → the result is a bin associated with a range of item numbers Arguments Type Intent Optional Attributes Name integer, intent(in) :: num_items integer, intent(in) :: num_bins integer, intent(in) :: bin_number Return Value type( bin_t )","tags":"","url":"interface/bin_t.html"},{"title":"first – Julienne","text":"interface private elemental module function first(self) result(first_item_number) Implementation → Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer Description the result is the first item number associated with the given bin","tags":"","url":"interface/first.html"},{"title":"last – Julienne","text":"interface private elemental module function last(self) result(last_item_number) Implementation → Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer Description the result is the last item number associated with the given bin","tags":"","url":"interface/last.html"},{"title":"filter – Julienne","text":"interface Called by interface~~filter~~CalledByGraph interface~filter filter proc~run~2 run proc~run~2->interface~filter proc~run~3 run proc~run~3->interface~filter Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. public module function filter(test_descriptions, subject) result(filtered_test_descriptions) Implementation → Arguments Type Intent Optional Attributes Name type( test_description_t ), intent(in) :: test_descriptions (:) character(len=*), intent(in) :: subject Return Value type( test_description_t ),allocatable,(:) Description The result is .true. an array of test_description_t objects whose description_ or contains the substring specified \nby command-line --contains flag if present, or all test_descriptions if the subject contains the same substring","tags":"","url":"interface/filter.html"},{"title":"test_description_t – Julienne","text":"public interface test_description_t Functions private module function construct_from_characters(description, diagnosis_function) result(test_description) Implementation → The result is a test_description_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description procedure( diagnosis_function_i ), intent(in), optional, pointer :: diagnosis_function Return Value type( test_description_t ) private module function construct_from_string(description, diagnosis_function) result(test_description) Implementation → The result is a test_description_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description procedure( diagnosis_function_i ), intent(in), optional, pointer :: diagnosis_function Return Value type( test_description_t )","tags":"","url":"interface/test_description_t.html"},{"title":"contains_characters – Julienne","text":"interface Called by interface~~contains_characters~~CalledByGraph interface~contains_characters test_description_t%contains_characters none~contains_text test_description_t%contains_text none~contains_text->interface~contains_characters proc~filter filter proc~filter->none~contains_text Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private elemental module function contains_characters(self, substring) result(match) Implementation → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical Description The result is .true. if the test description includes the value of substring","tags":"","url":"interface/contains_characters.html"},{"title":"contains_string_t – Julienne","text":"interface Called by interface~~contains_string_t~~CalledByGraph interface~contains_string_t test_description_t%contains_string_t none~contains_text test_description_t%contains_text none~contains_text->interface~contains_string_t proc~filter filter proc~filter->none~contains_text Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private elemental module function contains_string_t(self, substring) result(match) Implementation → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical Description The result is .true. if the test description includes the value of substring","tags":"","url":"interface/contains_string_t.html"},{"title":"equals – Julienne","text":"interface private elemental module function equals(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: lhs class( test_description_t ), intent(in) :: rhs Return Value logical Description The result is .true. if the components of the lhs & rhs are equal","tags":"","url":"interface/equals.html"},{"title":"run – Julienne","text":"interface Called by interface~~run~2~~CalledByGraph interface~run~2 test_description_t%run proc~run~3 run proc~run~3->interface~run~2 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private impure elemental module function run(self) result(test_result) Implementation → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self Return Value type( test_result_t ) Description The result encapsulates the test description and test outcome","tags":"","url":"interface/run~2.html"},{"title":"GitHub_CI – Julienne","text":"interface public module function GitHub_CI() Implementation → Arguments None Return Value logical Description The result is true if the environment variable named \"CI\" is set to the string \"true\"","tags":"","url":"interface/github_ci.html"},{"title":"print_usage_info_and_stop_if_requested – Julienne","text":"subroutine print_usage_info_and_stop_if_requested() Arguments None Calls proc~~print_usage_info_and_stop_if_requested~~CallsGraph proc~print_usage_info_and_stop_if_requested print_usage_info_and_stop_if_requested interface~argument_present command_line_t%argument_present proc~print_usage_info_and_stop_if_requested->interface~argument_present interface~one_image_prints one_image_prints proc~print_usage_info_and_stop_if_requested->interface~one_image_prints Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~print_usage_info_and_stop_if_requested~~CalledByGraph proc~print_usage_info_and_stop_if_requested print_usage_info_and_stop_if_requested proc~report_results report_results proc~report_results->proc~print_usage_info_and_stop_if_requested Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/print_usage_info_and_stop_if_requested.html"},{"title":"file_t – Julienne","text":"public interface file_t Functions private module function from_file_with_character_name(file_name) result(file_object) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: file_name Return Value type( file_t ) private module function from_file_with_string_name(file_name) result(file_object) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: file_name Return Value type( file_t ) private pure module function from_lines(lines) result(file_object) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lines (:) Return Value type( file_t )","tags":"","url":"interface/file_t.html"},{"title":"lines – Julienne","text":"interface Called by interface~~lines~~CalledByGraph interface~lines file_t%lines proc~from_file from_file proc~from_file->interface~lines Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private pure module function lines(self) result(my_lines) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self Return Value type( string_t ),allocatable,(:)","tags":"","url":"interface/lines.html"},{"title":"write_to_character_file_name – Julienne","text":"interface Called by interface~~write_to_character_file_name~~CalledByGraph interface~write_to_character_file_name file_t%write_to_character_file_name proc~write_to_string_file_name write_to_string_file_name proc~write_to_string_file_name->interface~write_to_character_file_name Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private impure elemental module subroutine write_to_character_file_name(self, file_name) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self character(len=*), intent(in) :: file_name","tags":"","url":"interface/write_to_character_file_name.html"},{"title":"write_to_output_unit – Julienne","text":"interface private module subroutine write_to_output_unit(self) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self","tags":"","url":"interface/write_to_output_unit.html"},{"title":"write_to_string_file_name – Julienne","text":"interface private impure elemental module subroutine write_to_string_file_name(self, file_name) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self type( string_t ), intent(in) :: file_name","tags":"","url":"interface/write_to_string_file_name.html"},{"title":"idiomatic_assert – Julienne","text":"module procedure idiomatic_assert pure module subroutine idiomatic_assert(test_diagnosis, file, line, description) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: test_diagnosis character(len=*), intent(in), optional :: file integer, intent(in), optional :: line character(len=*), intent(in), optional :: description Calls proc~~idiomatic_assert~~CallsGraph proc~idiomatic_assert idiomatic_assert assert_always assert_always proc~idiomatic_assert->assert_always interface~diagnostics_string test_diagnosis_t%diagnostics_string proc~idiomatic_assert->interface~diagnostics_string interface~test_passed test_diagnosis_t%test_passed proc~idiomatic_assert->interface~test_passed Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/idiomatic_assert.html"},{"title":"logical_assert – Julienne","text":"module procedure logical_assert pure module subroutine logical_assert(assertion, file, line, description) Arguments Type Intent Optional Attributes Name logical, intent(in) :: assertion character(len=*), intent(in), optional :: file integer, intent(in), optional :: line character(len=*), intent(in), optional :: description Calls proc~~logical_assert~~CallsGraph proc~logical_assert logical_assert assert_always assert_always proc~logical_assert->assert_always Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/logical_assert.html"},{"title":"construct – Julienne","text":"module procedure construct elemental module function construct(num_items, num_bins, bin_number) result(bin) Arguments Type Intent Optional Attributes Name integer, intent(in) :: num_items integer, intent(in) :: num_bins integer, intent(in) :: bin_number Return Value type( bin_t ) Calls proc~~construct~~CallsGraph proc~construct construct call_julienne_assert call_julienne_assert proc~construct->call_julienne_assert Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/construct.html"},{"title":"first – Julienne","text":"module procedure first elemental module function first(self) result(first_item_number) Interface → Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer","tags":"","url":"proc/first.html"},{"title":"last – Julienne","text":"module procedure last elemental module function last(self) result(last_item_number) Interface → Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer","tags":"","url":"proc/last.html"},{"title":"print_character – Julienne","text":"module procedure print_character module subroutine print_character(character_string) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: character_string (..)","tags":"","url":"proc/print_character.html"},{"title":"print_string – Julienne","text":"module procedure print_string module subroutine print_string(string) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: string (..) Calls proc~~print_string~~CallsGraph proc~print_string print_string none~string~2 string_t%string proc~print_string->none~string~2 interface~as_character string_t%as_character none~string~2->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/print_string.html"},{"title":"component_constructor – Julienne","text":"module procedure component_constructor module function component_constructor(test) result(test_fixture) Arguments Type Intent Optional Attributes Name class( test_t ), intent(in) :: test Return Value type( test_fixture_t )","tags":"","url":"proc/component_constructor.html"},{"title":"report – Julienne","text":"module procedure report module subroutine report(self, passes, tests, skips) Interface → Arguments Type Intent Optional Attributes Name class( test_fixture_t ), intent(in) :: self integer, intent(inout) :: passes integer, intent(inout) :: tests integer, intent(inout) :: skips Calls proc~~report~~CallsGraph proc~report report interface~report~2 test_t%report proc~report->interface~report~2 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/report.html"},{"title":"argument_present – Julienne","text":"module procedure argument_present module function argument_present(acceptable_argument) result(found) Interface → list of acceptable arguments\nsample list: [character(len=len(longest_argument)):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"]\nwhere dashes support Linux/macOS and slashes support Windows Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: acceptable_argument (:) sample list: [character(len=len( )):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"]\nwhere dashes support Linux/macOS, slashes support Windows, and must be replaced\nby the longest list element (\"--benchmark\" above) Return Value logical Calls proc~~argument_present~~CallsGraph proc~argument_present argument_present [] [] proc~argument_present->[] Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/argument_present.html"},{"title":"flag_value – Julienne","text":"module procedure flag_value module function flag_value(flag) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: flag Return Value character(len=:), allocatable","tags":"","url":"proc/flag_value.html"},{"title":"characterize – Julienne","text":"module procedure characterize pure module function characterize(self) result(characterization) Interface → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value character(len=:), allocatable Calls proc~~characterize~~CallsGraph proc~characterize characterize interface~diagnostics_string test_diagnosis_t%diagnostics_string proc~characterize->interface~diagnostics_string interface~test_passed test_diagnosis_t%test_passed proc~characterize->interface~test_passed none~string~2 string_t%string proc~characterize->none~string~2 interface~as_character string_t%as_character none~string~2->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/characterize.html"},{"title":"construct_from_character – Julienne","text":"module procedure construct_from_character elemental module function construct_from_character(description, diagnosis) result(test_result) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description type( test_diagnosis_t ), intent(in), optional :: diagnosis Return Value type( test_result_t )","tags":"","url":"proc/construct_from_character.html"},{"title":"construct_from_string – Julienne","text":"module procedure construct_from_string elemental module function construct_from_string(description, diagnosis) result(test_result) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description type( test_diagnosis_t ), intent(in), optional :: diagnosis Return Value type( test_result_t )","tags":"","url":"proc/construct_from_string.html"},{"title":"description_contains_characters – Julienne","text":"module procedure description_contains_characters elemental module function description_contains_characters(self, substring) result(substring_found) Interface → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical Calls proc~~description_contains_characters~~CallsGraph proc~description_contains_characters description_contains_characters none~string~2 string_t%string proc~description_contains_characters->none~string~2 interface~as_character string_t%as_character none~string~2->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/description_contains_characters.html"},{"title":"description_contains_string – Julienne","text":"module procedure description_contains_string elemental module function description_contains_string(self, substring) result(substring_found) Interface → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical Calls proc~~description_contains_string~~CallsGraph proc~description_contains_string description_contains_string interface~description_contains_characters test_result_t%description_contains_characters proc~description_contains_string->interface~description_contains_characters none~string~2 string_t%string proc~description_contains_string->none~string~2 interface~as_character string_t%as_character none~string~2->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/description_contains_string.html"},{"title":"passed – Julienne","text":"module procedure passed impure elemental module function passed(self) result(test_passed) Interface → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value logical Calls proc~~passed~~CallsGraph proc~passed passed interface~co_all co_all proc~passed->interface~co_all interface~test_passed test_diagnosis_t%test_passed proc~passed->interface~test_passed Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/passed.html"},{"title":"skipped – Julienne","text":"module procedure skipped impure elemental module function skipped(self) result(test_skipped) Interface → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value logical Calls proc~~skipped~~CallsGraph proc~skipped skipped interface~co_all co_all proc~skipped->interface~co_all Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/skipped.html"},{"title":"GitHub_CI – Julienne","text":"module procedure GitHub_CI module function GitHub_CI() Interface → Arguments None Return Value logical","tags":"","url":"proc/github_ci.html"},{"title":"co_all – Julienne","text":"module procedure co_all impure elemental module subroutine co_all(boolean) Interface → Arguments Type Intent Optional Attributes Name logical, intent(inout) :: boolean","tags":"","url":"proc/co_all.html"},{"title":"array_of_strings – Julienne","text":"module procedure array_of_strings pure module function array_of_strings(delimited_strings, delimiter) result(strings_array) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: delimited_strings character(len=*), intent(in) :: delimiter Return Value type( string_t ), allocatable, (:)","tags":"","url":"proc/array_of_strings.html"},{"title":"as_character – Julienne","text":"module procedure as_character pure module function as_character(self) result(raw_string) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value character(len=:), allocatable","tags":"","url":"proc/as_character.html"},{"title":"assign_character_to_string_t – Julienne","text":"module procedure assign_character_to_string_t elemental module subroutine assign_character_to_string_t(lhs, rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(inout) :: lhs character(len=*), intent(in) :: rhs","tags":"","url":"proc/assign_character_to_string_t.html"},{"title":"assign_string_t_to_character – Julienne","text":"module procedure assign_string_t_to_character pure module subroutine assign_string_t_to_character(lhs, rhs) Interface → Arguments Type Intent Optional Attributes Name character(len=:), intent(out), allocatable :: lhs class( string_t ), intent(in) :: rhs Calls proc~~assign_string_t_to_character~~CallsGraph proc~assign_string_t_to_character assign_string_t_to_character none~string~2 string_t%string proc~assign_string_t_to_character->none~string~2 interface~as_character string_t%as_character none~string~2->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/assign_string_t_to_character.html"},{"title":"base_name – Julienne","text":"module procedure base_name elemental module function base_name(self) result(base) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) Calls proc~~base_name~~CallsGraph proc~base_name base_name none~string~2 string_t%string proc~base_name->none~string~2 interface~as_character string_t%as_character none~string~2->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/base_name.html"},{"title":"bracket – Julienne","text":"module procedure bracket elemental module function bracket(self, opening, closing) result(bracketed_self) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in), optional :: opening character(len=*), intent(in), optional :: closing Return Value type( string_t )","tags":"","url":"proc/bracket.html"},{"title":"character_cat_string_t – Julienne","text":"module procedure character_cat_string_t elemental module function character_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t )","tags":"","url":"proc/character_cat_string_t.html"},{"title":"character_eq_string_t – Julienne","text":"module procedure character_eq_string_t elemental module function character_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical Calls proc~~character_eq_string_t~~CallsGraph proc~character_eq_string_t character_eq_string_t none~string~2 string_t%string proc~character_eq_string_t->none~string~2 interface~as_character string_t%as_character none~string~2->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/character_eq_string_t.html"},{"title":"character_ne_string_t – Julienne","text":"module procedure character_ne_string_t elemental module function character_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical Calls proc~~character_ne_string_t~~CallsGraph proc~character_ne_string_t character_ne_string_t none~string~2 string_t%string proc~character_ne_string_t->none~string~2 interface~as_character string_t%as_character none~string~2->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/character_ne_string_t.html"},{"title":"characters_with_character_separator – Julienne","text":"module procedure characters_with_character_separator pure module function characters_with_character_separator(strings, separator) result(sv) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: strings (:) character(len=*), intent(in) :: separator Return Value type( string_t )","tags":"","url":"proc/characters_with_character_separator.html"},{"title":"characters_with_comma_separator – Julienne","text":"module procedure characters_with_comma_separator pure module function characters_with_comma_separator(strings) result(csv) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: strings (:) Return Value type( string_t )","tags":"","url":"proc/characters_with_comma_separator.html"},{"title":"characters_with_string_separator – Julienne","text":"module procedure characters_with_string_separator pure module function characters_with_string_separator(strings, separator) result(sv) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: strings (:) type( string_t ), intent(in) :: separator Return Value type( string_t )","tags":"","url":"proc/characters_with_string_separator.html"},{"title":"concatenate_elements – Julienne","text":"module procedure concatenate_elements pure module function concatenate_elements(strings) result(concatenated_strings) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) Return Value type( string_t ) Calls proc~~concatenate_elements~~CallsGraph proc~concatenate_elements concatenate_elements none~string~2 string_t%string proc~concatenate_elements->none~string~2 interface~as_character string_t%as_character none~string~2->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/concatenate_elements.html"},{"title":"file_extension – Julienne","text":"module procedure file_extension elemental module function file_extension(self) result(extension) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) Calls proc~~file_extension~~CallsGraph proc~file_extension file_extension none~string~2 string_t%string proc~file_extension->none~string~2 interface~as_character string_t%as_character none~string~2->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/file_extension.html"},{"title":"from_characters – Julienne","text":"module procedure from_characters elemental module function from_characters(string) result(new_string) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string Return Value type( string_t )","tags":"","url":"proc/from_characters.html"},{"title":"from_default_complex – Julienne","text":"module procedure from_default_complex elemental module function from_default_complex(z) result(string) Arguments Type Intent Optional Attributes Name complex, intent(in) :: z Return Value type( string_t )","tags":"","url":"proc/from_default_complex.html"},{"title":"from_default_integer – Julienne","text":"module procedure from_default_integer elemental module function from_default_integer(i) result(string) Arguments Type Intent Optional Attributes Name integer, intent(in) :: i Return Value type( string_t )","tags":"","url":"proc/from_default_integer.html"},{"title":"from_default_logical – Julienne","text":"module procedure from_default_logical elemental module function from_default_logical(b) result(string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: b Return Value type( string_t )","tags":"","url":"proc/from_default_logical.html"},{"title":"from_default_real – Julienne","text":"module procedure from_default_real elemental module function from_default_real(x) result(string) Arguments Type Intent Optional Attributes Name real, intent(in) :: x Return Value type( string_t )","tags":"","url":"proc/from_default_real.html"},{"title":"from_double_precision – Julienne","text":"module procedure from_double_precision elemental module function from_double_precision(x) result(string) Arguments Type Intent Optional Attributes Name double precision, intent(in) :: x Return Value type( string_t )","tags":"","url":"proc/from_double_precision.html"},{"title":"from_double_precision_complex – Julienne","text":"module procedure from_double_precision_complex elemental module function from_double_precision_complex(z) result(string) Arguments Type Intent Optional Attributes Name complex(kind=kind(1D0)), intent(in) :: z Return Value type( string_t )","tags":"","url":"proc/from_double_precision_complex.html"},{"title":"from_integer_c_size_t – Julienne","text":"module procedure from_integer_c_size_t elemental module function from_integer_c_size_t(i) result(string) Arguments Type Intent Optional Attributes Name integer(kind=c_size_t), intent(in) :: i Return Value type( string_t )","tags":"","url":"proc/from_integer_c_size_t.html"},{"title":"from_logical_c_bool – Julienne","text":"module procedure from_logical_c_bool elemental module function from_logical_c_bool(b) result(string) Arguments Type Intent Optional Attributes Name logical(kind=c_bool), intent(in) :: b Return Value type( string_t )","tags":"","url":"proc/from_logical_c_bool.html"},{"title":"get_character_with_character_key – Julienne","text":"module procedure get_character_with_character_key pure module function get_character_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key character(len=*), intent(in) :: mold Return Value character(len=:), allocatable Calls proc~~get_character_with_character_key~~CallsGraph proc~get_character_with_character_key get_character_with_character_key interface~get_string_with_string_key string_t%get_string_with_string_key proc~get_character_with_character_key->interface~get_string_with_string_key string string proc~get_character_with_character_key->string Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_character_with_character_key.html"},{"title":"get_character_with_string_key – Julienne","text":"module procedure get_character_with_string_key pure module function get_character_with_string_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key character(len=*), intent(in) :: mold Return Value character(len=:), allocatable Calls proc~~get_character_with_string_key~~CallsGraph proc~get_character_with_string_key get_character_with_string_key interface~get_string_with_string_key string_t%get_string_with_string_key proc~get_character_with_string_key->interface~get_string_with_string_key string string proc~get_character_with_string_key->string Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_character_with_string_key.html"},{"title":"get_double_precision – Julienne","text":"module procedure get_double_precision pure module function get_double_precision(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key double precision, intent(in) :: mold Return Value double precision Calls proc~~get_double_precision~~CallsGraph proc~get_double_precision get_double_precision call_julienne_assert call_julienne_assert proc~get_double_precision->call_julienne_assert interface~get_json_key string_t%get_json_key proc~get_double_precision->interface~get_json_key none~string~2 string_t%string proc~get_double_precision->none~string~2 interface~as_character string_t%as_character none~string~2->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_double_precision.html"},{"title":"get_double_precision_array – Julienne","text":"module procedure get_double_precision_array pure module function get_double_precision_array(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key double precision, intent(in) :: mold (:) Return Value double precision, allocatable, (:) Calls proc~~get_double_precision_array~~CallsGraph proc~get_double_precision_array get_double_precision_array call_julienne_assert call_julienne_assert proc~get_double_precision_array->call_julienne_assert interface~get_json_key string_t%get_json_key proc~get_double_precision_array->interface~get_json_key none~string~2 string_t%string proc~get_double_precision_array->none~string~2 interface~as_character string_t%as_character none~string~2->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_double_precision_array.html"},{"title":"get_double_precision_array_with_character_key – Julienne","text":"module procedure get_double_precision_array_with_character_key pure module function get_double_precision_array_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key double precision, intent(in) :: mold (:) Return Value double precision, allocatable, (:) Calls proc~~get_double_precision_array_with_character_key~~CallsGraph proc~get_double_precision_array_with_character_key get_double_precision_array_with_character_key interface~get_double_precision_array string_t%get_double_precision_array proc~get_double_precision_array_with_character_key->interface~get_double_precision_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_double_precision_array_with_character_key.html"},{"title":"get_double_precision_with_character_key – Julienne","text":"module procedure get_double_precision_with_character_key pure module function get_double_precision_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key double precision, intent(in) :: mold Return Value double precision Calls proc~~get_double_precision_with_character_key~~CallsGraph proc~get_double_precision_with_character_key get_double_precision_with_character_key interface~get_double_precision string_t%get_double_precision proc~get_double_precision_with_character_key->interface~get_double_precision Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_double_precision_with_character_key.html"},{"title":"get_integer – Julienne","text":"module procedure get_integer pure module function get_integer(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold Return Value integer Calls proc~~get_integer~~CallsGraph proc~get_integer get_integer call_julienne_assert call_julienne_assert proc~get_integer->call_julienne_assert interface~get_json_key string_t%get_json_key proc~get_integer->interface~get_json_key none~string~2 string_t%string proc~get_integer->none~string~2 interface~as_character string_t%as_character none~string~2->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_integer.html"},{"title":"get_integer_array – Julienne","text":"module procedure get_integer_array pure module function get_integer_array(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold (:) Return Value integer, allocatable, (:) Calls proc~~get_integer_array~~CallsGraph proc~get_integer_array get_integer_array interface~get_real_array string_t%get_real_array proc~get_integer_array->interface~get_real_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_integer_array.html"},{"title":"get_integer_array_with_character_key – Julienne","text":"module procedure get_integer_array_with_character_key pure module function get_integer_array_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key integer, intent(in) :: mold (:) Return Value integer, allocatable, (:) Calls proc~~get_integer_array_with_character_key~~CallsGraph proc~get_integer_array_with_character_key get_integer_array_with_character_key interface~get_integer_array string_t%get_integer_array proc~get_integer_array_with_character_key->interface~get_integer_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_integer_array_with_character_key.html"},{"title":"get_integer_with_character_key – Julienne","text":"module procedure get_integer_with_character_key pure module function get_integer_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key integer, intent(in) :: mold Return Value integer Calls proc~~get_integer_with_character_key~~CallsGraph proc~get_integer_with_character_key get_integer_with_character_key interface~get_integer string_t%get_integer proc~get_integer_with_character_key->interface~get_integer Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_integer_with_character_key.html"},{"title":"get_json_key – Julienne","text":"module procedure get_json_key elemental module function get_json_key(self) result(unquoted_key) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) Calls proc~~get_json_key~~CallsGraph proc~get_json_key get_json_key none~string~2 string_t%string proc~get_json_key->none~string~2 interface~as_character string_t%as_character none~string~2->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_json_key.html"},{"title":"get_logical – Julienne","text":"module procedure get_logical pure module function get_logical(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key logical, intent(in) :: mold Return Value logical Calls proc~~get_logical~~CallsGraph proc~get_logical get_logical call_assert call_assert proc~get_logical->call_assert call_julienne_assert call_julienne_assert proc~get_logical->call_julienne_assert interface~get_json_key string_t%get_json_key proc~get_logical->interface~get_json_key none~string~2 string_t%string proc~get_logical->none~string~2 interface~as_character string_t%as_character none~string~2->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_logical.html"},{"title":"get_logical_with_character_key – Julienne","text":"module procedure get_logical_with_character_key pure module function get_logical_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key logical, intent(in) :: mold Return Value logical Calls proc~~get_logical_with_character_key~~CallsGraph proc~get_logical_with_character_key get_logical_with_character_key interface~get_logical string_t%get_logical proc~get_logical_with_character_key->interface~get_logical Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_logical_with_character_key.html"},{"title":"get_real – Julienne","text":"module procedure get_real pure module function get_real(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold Return Value real Calls proc~~get_real~~CallsGraph proc~get_real get_real call_julienne_assert call_julienne_assert proc~get_real->call_julienne_assert interface~get_json_key string_t%get_json_key proc~get_real->interface~get_json_key none~string~2 string_t%string proc~get_real->none~string~2 interface~as_character string_t%as_character none~string~2->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_real.html"},{"title":"get_real_array – Julienne","text":"module procedure get_real_array pure module function get_real_array(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold (:) Return Value real, allocatable, (:) Calls proc~~get_real_array~~CallsGraph proc~get_real_array get_real_array call_julienne_assert call_julienne_assert proc~get_real_array->call_julienne_assert interface~get_json_key string_t%get_json_key proc~get_real_array->interface~get_json_key none~string~2 string_t%string proc~get_real_array->none~string~2 interface~as_character string_t%as_character none~string~2->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_real_array.html"},{"title":"get_real_array_with_character_key – Julienne","text":"module procedure get_real_array_with_character_key pure module function get_real_array_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key real, intent(in) :: mold (:) Return Value real, allocatable, (:) Calls proc~~get_real_array_with_character_key~~CallsGraph proc~get_real_array_with_character_key get_real_array_with_character_key interface~get_real_array string_t%get_real_array proc~get_real_array_with_character_key->interface~get_real_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_real_array_with_character_key.html"},{"title":"get_real_with_character_key – Julienne","text":"module procedure get_real_with_character_key pure module function get_real_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key real, intent(in) :: mold Return Value real Calls proc~~get_real_with_character_key~~CallsGraph proc~get_real_with_character_key get_real_with_character_key interface~get_real string_t%get_real proc~get_real_with_character_key->interface~get_real Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_real_with_character_key.html"},{"title":"get_string_t_array_with_character_key – Julienne","text":"module procedure get_string_t_array_with_character_key pure module function get_string_t_array_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key type( string_t ), intent(in) :: mold (:) Return Value type( string_t ), allocatable, (:) Calls proc~~get_string_t_array_with_character_key~~CallsGraph proc~get_string_t_array_with_character_key get_string_t_array_with_character_key call_julienne_assert call_julienne_assert proc~get_string_t_array_with_character_key->call_julienne_assert interface~get_json_key string_t%get_json_key proc~get_string_t_array_with_character_key->interface~get_json_key none~string~2 string_t%string proc~get_string_t_array_with_character_key->none~string~2 interface~as_character string_t%as_character none~string~2->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_string_t_array_with_character_key.html"},{"title":"get_string_t_array_with_string_t_key – Julienne","text":"module procedure get_string_t_array_with_string_t_key pure module function get_string_t_array_with_string_t_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self type( string_t ), intent(in) :: key type( string_t ), intent(in) :: mold (:) Return Value type( string_t ), allocatable, (:) Calls proc~~get_string_t_array_with_string_t_key~~CallsGraph proc~get_string_t_array_with_string_t_key get_string_t_array_with_string_t_key interface~get_string_t_array_with_character_key string_t%get_string_t_array_with_character_key proc~get_string_t_array_with_string_t_key->interface~get_string_t_array_with_character_key none~string~2 string_t%string proc~get_string_t_array_with_string_t_key->none~string~2 interface~as_character string_t%as_character none~string~2->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_string_t_array_with_string_t_key.html"},{"title":"get_string_with_character_key – Julienne","text":"module procedure get_string_with_character_key pure module function get_string_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key class( string_t ), intent(in) :: mold Return Value type( string_t ) Calls proc~~get_string_with_character_key~~CallsGraph proc~get_string_with_character_key get_string_with_character_key interface~get_string_with_string_key string_t%get_string_with_string_key proc~get_string_with_character_key->interface~get_string_with_string_key string string proc~get_string_with_character_key->string Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_string_with_character_key.html"},{"title":"get_string_with_string_key – Julienne","text":"module procedure get_string_with_string_key pure module function get_string_with_string_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key class( string_t ), intent(in) :: mold Return Value type( string_t ) Calls proc~~get_string_with_string_key~~CallsGraph proc~get_string_with_string_key get_string_with_string_key call_julienne_assert call_julienne_assert proc~get_string_with_string_key->call_julienne_assert interface~get_json_key string_t%get_json_key proc~get_string_with_string_key->interface~get_json_key none~string~2 string_t%string proc~get_string_with_string_key->none~string~2 interface~as_character string_t%as_character none~string~2->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_string_with_string_key.html"},{"title":"is_allocated – Julienne","text":"module procedure is_allocated elemental module function is_allocated(self) result(string_allocated) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value logical","tags":"","url":"proc/is_allocated.html"},{"title":"string_t_cat_character – Julienne","text":"module procedure string_t_cat_character elemental module function string_t_cat_character(lhs, rhs) result(lhs_cat_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( string_t )","tags":"","url":"proc/string_t_cat_character.html"},{"title":"string_t_cat_string_t – Julienne","text":"module procedure string_t_cat_string_t elemental module function string_t_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t )","tags":"","url":"proc/string_t_cat_string_t.html"},{"title":"string_t_eq_character – Julienne","text":"module procedure string_t_eq_character elemental module function string_t_eq_character(lhs, rhs) result(lhs_eq_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical Calls proc~~string_t_eq_character~~CallsGraph proc~string_t_eq_character string_t_eq_character none~string~2 string_t%string proc~string_t_eq_character->none~string~2 interface~as_character string_t%as_character none~string~2->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/string_t_eq_character.html"},{"title":"string_t_eq_string_t – Julienne","text":"module procedure string_t_eq_string_t elemental module function string_t_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical Calls proc~~string_t_eq_string_t~~CallsGraph proc~string_t_eq_string_t string_t_eq_string_t none~string~2 string_t%string proc~string_t_eq_string_t->none~string~2 interface~as_character string_t%as_character none~string~2->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/string_t_eq_string_t.html"},{"title":"string_t_ne_character – Julienne","text":"module procedure string_t_ne_character elemental module function string_t_ne_character(lhs, rhs) result(lhs_ne_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical Calls proc~~string_t_ne_character~~CallsGraph proc~string_t_ne_character string_t_ne_character none~string~2 string_t%string proc~string_t_ne_character->none~string~2 interface~as_character string_t%as_character none~string~2->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/string_t_ne_character.html"},{"title":"string_t_ne_string_t – Julienne","text":"module procedure string_t_ne_string_t elemental module function string_t_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical Calls proc~~string_t_ne_string_t~~CallsGraph proc~string_t_ne_string_t string_t_ne_string_t none~string~2 string_t%string proc~string_t_ne_string_t->none~string~2 interface~as_character string_t%as_character none~string~2->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/string_t_ne_string_t.html"},{"title":"strings_with_character_separator – Julienne","text":"module procedure strings_with_character_separator pure module function strings_with_character_separator(strings, separator) result(sv) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) character(len=*), intent(in) :: separator Return Value type( string_t )","tags":"","url":"proc/strings_with_character_separator.html"},{"title":"strings_with_comma_separator – Julienne","text":"module procedure strings_with_comma_separator pure module function strings_with_comma_separator(strings) result(csv) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) Return Value type( string_t )","tags":"","url":"proc/strings_with_comma_separator.html"},{"title":"strings_with_string_t_separator – Julienne","text":"module procedure strings_with_string_t_separator pure module function strings_with_string_t_separator(strings, separator) result(sv) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) type( string_t ), intent(in) :: separator Return Value type( string_t )","tags":"","url":"proc/strings_with_string_t_separator.html"},{"title":"aggregate_diagnosis – Julienne","text":"module procedure aggregate_diagnosis pure module function aggregate_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (..) Return Value type( test_diagnosis_t ) Calls proc~~aggregate_diagnosis~~CallsGraph proc~aggregate_diagnosis aggregate_diagnosis none~string~2 string_t%string proc~aggregate_diagnosis->none~string~2 interface~as_character string_t%as_character none~string~2->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/aggregate_diagnosis.html"},{"title":"aggregate_rank10_diagnosis – Julienne","text":"module procedure aggregate_rank10_diagnosis pure module function aggregate_rank10_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:,:,:,:) Return Value type( test_diagnosis_t )","tags":"","url":"proc/aggregate_rank10_diagnosis.html"},{"title":"aggregate_rank11_diagnosis – Julienne","text":"module procedure aggregate_rank11_diagnosis pure module function aggregate_rank11_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:,:,:,:,:) Return Value type( test_diagnosis_t )","tags":"","url":"proc/aggregate_rank11_diagnosis.html"},{"title":"aggregate_rank12_diagnosis – Julienne","text":"module procedure aggregate_rank12_diagnosis pure module function aggregate_rank12_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:,:,:,:,:,:) Return Value type( test_diagnosis_t )","tags":"","url":"proc/aggregate_rank12_diagnosis.html"},{"title":"aggregate_rank13_diagnosis – Julienne","text":"module procedure aggregate_rank13_diagnosis pure module function aggregate_rank13_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:,:,:,:,:,:,:) Return Value type( test_diagnosis_t )","tags":"","url":"proc/aggregate_rank13_diagnosis.html"},{"title":"aggregate_rank14_diagnosis – Julienne","text":"module procedure aggregate_rank14_diagnosis pure module function aggregate_rank14_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:,:,:,:,:,:,:,:) Return Value type( test_diagnosis_t )","tags":"","url":"proc/aggregate_rank14_diagnosis.html"},{"title":"aggregate_rank15_diagnosis – Julienne","text":"module procedure aggregate_rank15_diagnosis pure module function aggregate_rank15_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:,:,:,:,:,:,:,:,:) Return Value type( test_diagnosis_t )","tags":"","url":"proc/aggregate_rank15_diagnosis.html"},{"title":"aggregate_rank2_diagnosis – Julienne","text":"module procedure aggregate_rank2_diagnosis pure module function aggregate_rank2_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:) Return Value type( test_diagnosis_t )","tags":"","url":"proc/aggregate_rank2_diagnosis.html"},{"title":"aggregate_rank3_diagnosis – Julienne","text":"module procedure aggregate_rank3_diagnosis pure module function aggregate_rank3_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:) Return Value type( test_diagnosis_t )","tags":"","url":"proc/aggregate_rank3_diagnosis.html"},{"title":"aggregate_rank4_diagnosis – Julienne","text":"module procedure aggregate_rank4_diagnosis pure module function aggregate_rank4_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:) Return Value type( test_diagnosis_t )","tags":"","url":"proc/aggregate_rank4_diagnosis.html"},{"title":"aggregate_rank5_diagnosis – Julienne","text":"module procedure aggregate_rank5_diagnosis pure module function aggregate_rank5_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:) Return Value type( test_diagnosis_t )","tags":"","url":"proc/aggregate_rank5_diagnosis.html"},{"title":"aggregate_rank6_diagnosis – Julienne","text":"module procedure aggregate_rank6_diagnosis pure module function aggregate_rank6_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:) Return Value type( test_diagnosis_t )","tags":"","url":"proc/aggregate_rank6_diagnosis.html"},{"title":"aggregate_rank7_diagnosis – Julienne","text":"module procedure aggregate_rank7_diagnosis pure module function aggregate_rank7_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:) Return Value type( test_diagnosis_t )","tags":"","url":"proc/aggregate_rank7_diagnosis.html"},{"title":"aggregate_rank8_diagnosis – Julienne","text":"module procedure aggregate_rank8_diagnosis pure module function aggregate_rank8_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:,:) Return Value type( test_diagnosis_t )","tags":"","url":"proc/aggregate_rank8_diagnosis.html"},{"title":"aggregate_rank9_diagnosis – Julienne","text":"module procedure aggregate_rank9_diagnosis pure module function aggregate_rank9_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:,:,:) Return Value type( test_diagnosis_t )","tags":"","url":"proc/aggregate_rank9_diagnosis.html"},{"title":"aggregate_scalar_diagnosis – Julienne","text":"module procedure aggregate_scalar_diagnosis pure module function aggregate_scalar_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses Return Value type( test_diagnosis_t )","tags":"","url":"proc/aggregate_scalar_diagnosis.html"},{"title":"aggregate_vector_diagnosis – Julienne","text":"module procedure aggregate_vector_diagnosis pure module function aggregate_vector_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:) Return Value type( test_diagnosis_t )","tags":"","url":"proc/aggregate_vector_diagnosis.html"},{"title":"alphabetical_character_vs_character – Julienne","text":"module procedure alphabetical_character_vs_character elemental module function alphabetical_character_vs_character(lhs, rhs) result(test_diagnosis) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( test_diagnosis_t )","tags":"","url":"proc/alphabetical_character_vs_character.html"},{"title":"alphabetical_character_vs_string – Julienne","text":"module procedure alphabetical_character_vs_string elemental module function alphabetical_character_vs_string(lhs, rhs) result(test_diagnosis) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs type( string_t ), intent(in) :: rhs Return Value type( test_diagnosis_t ) Calls proc~~alphabetical_character_vs_string~~CallsGraph proc~alphabetical_character_vs_string alphabetical_character_vs_string none~string~2 string_t%string proc~alphabetical_character_vs_string->none~string~2 interface~as_character string_t%as_character none~string~2->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/alphabetical_character_vs_string.html"},{"title":"alphabetical_string_vs_character – Julienne","text":"module procedure alphabetical_string_vs_character elemental module function alphabetical_string_vs_character(lhs, rhs) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( test_diagnosis_t ) Calls proc~~alphabetical_string_vs_character~~CallsGraph proc~alphabetical_string_vs_character alphabetical_string_vs_character none~string~2 string_t%string proc~alphabetical_string_vs_character->none~string~2 interface~as_character string_t%as_character none~string~2->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/alphabetical_string_vs_character.html"},{"title":"alphabetical_string_vs_string – Julienne","text":"module procedure alphabetical_string_vs_string elemental module function alphabetical_string_vs_string(lhs, rhs) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lhs type( string_t ), intent(in) :: rhs Return Value type( test_diagnosis_t ) Calls proc~~alphabetical_string_vs_string~~CallsGraph proc~alphabetical_string_vs_string alphabetical_string_vs_string none~string~2 string_t%string proc~alphabetical_string_vs_string->none~string~2 interface~as_character string_t%as_character none~string~2->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/alphabetical_string_vs_string.html"},{"title":"also – Julienne","text":"module procedure also elemental module function also(lhs, rhs) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: lhs type( test_diagnosis_t ), intent(in) :: rhs Return Value type( test_diagnosis_t )","tags":"","url":"proc/also.html"},{"title":"append_character_if_test_failed – Julienne","text":"module procedure append_character_if_test_failed elemental module function append_character_if_test_failed(lhs, rhs) result(lhs_cat_rhs) Arguments Type Intent Optional Attributes Name class( test_diagnosis_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( test_diagnosis_t )","tags":"","url":"proc/append_character_if_test_failed.html"},{"title":"append_string_if_test_failed – Julienne","text":"module procedure append_string_if_test_failed elemental module function append_string_if_test_failed(lhs, rhs) result(lhs_cat_rhs) Arguments Type Intent Optional Attributes Name class( test_diagnosis_t ), intent(in) :: lhs type( string_t ), intent(in) :: rhs Return Value type( test_diagnosis_t )","tags":"","url":"proc/append_string_if_test_failed.html"},{"title":"approximates_double_precision – Julienne","text":"module procedure approximates_double_precision elemental module function approximates_double_precision(actual, expected) result(operands) Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected Return Value type( operands_t (double_precision))","tags":"","url":"proc/approximates_double_precision.html"},{"title":"approximates_real – Julienne","text":"module procedure approximates_real elemental module function approximates_real(actual, expected) result(operands) Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected Return Value type( operands_t )","tags":"","url":"proc/approximates_real.html"},{"title":"construct_from_character – Julienne","text":"module procedure construct_from_character elemental module function construct_from_character(test_passed, diagnostics_string) result(test_diagnosis) Arguments Type Intent Optional Attributes Name logical, intent(in) :: test_passed character(len=*), intent(in) :: diagnostics_string Return Value type( test_diagnosis_t )","tags":"","url":"proc/construct_from_character~2.html"},{"title":"construct_from_string_t – Julienne","text":"module procedure construct_from_string_t elemental module function construct_from_string_t(test_passed, diagnostics_string) result(test_diagnosis) Arguments Type Intent Optional Attributes Name logical, intent(in) :: test_passed type( string_t ), intent(in) :: diagnostics_string Return Value type( test_diagnosis_t )","tags":"","url":"proc/construct_from_string_t.html"},{"title":"diagnostics_string – Julienne","text":"module procedure diagnostics_string elemental module function diagnostics_string(self) result(string_) Interface → Arguments Type Intent Optional Attributes Name class( test_diagnosis_t ), intent(in) :: self Return Value type( string_t ) Calls proc~~diagnostics_string~~CallsGraph proc~diagnostics_string diagnostics_string call_assert call_assert proc~diagnostics_string->call_assert Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/diagnostics_string.html"},{"title":"equals_expected_c_ptr – Julienne","text":"module procedure equals_expected_c_ptr elemental module function equals_expected_c_ptr(actual, expected) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: actual type(c_ptr), intent(in) :: expected Return Value type( test_diagnosis_t )","tags":"","url":"proc/equals_expected_c_ptr.html"},{"title":"equals_expected_character – Julienne","text":"module procedure equals_expected_character elemental module function equals_expected_character(actual, expected) result(test_diagnosis) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: actual character(len=*), intent(in) :: expected Return Value type( test_diagnosis_t )","tags":"","url":"proc/equals_expected_character.html"},{"title":"equals_expected_character_vs_string – Julienne","text":"module procedure equals_expected_character_vs_string elemental module function equals_expected_character_vs_string(actual, expected) result(test_diagnosis) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: actual type( string_t ), intent(in) :: expected Return Value type( test_diagnosis_t )","tags":"","url":"proc/equals_expected_character_vs_string.html"},{"title":"equals_expected_integer – Julienne","text":"module procedure equals_expected_integer elemental module function equals_expected_integer(actual, expected) result(test_diagnosis) Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected Return Value type( test_diagnosis_t )","tags":"","url":"proc/equals_expected_integer.html"},{"title":"equals_expected_integer_c_size_t – Julienne","text":"module procedure equals_expected_integer_c_size_t elemental module function equals_expected_integer_c_size_t(actual, expected) result(test_diagnosis) Arguments Type Intent Optional Attributes Name integer(kind=c_size_t), intent(in) :: actual integer(kind=c_size_t), intent(in) :: expected Return Value type( test_diagnosis_t )","tags":"","url":"proc/equals_expected_integer_c_size_t.html"},{"title":"equals_expected_string – Julienne","text":"module procedure equals_expected_string elemental module function equals_expected_string(actual, expected) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: actual type( string_t ), intent(in) :: expected Return Value type( test_diagnosis_t )","tags":"","url":"proc/equals_expected_string.html"},{"title":"equals_expected_string_vs_character – Julienne","text":"module procedure equals_expected_string_vs_character elemental module function equals_expected_string_vs_character(actual, expected) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: actual character(len=*), intent(in) :: expected Return Value type( test_diagnosis_t )","tags":"","url":"proc/equals_expected_string_vs_character.html"},{"title":"expect – Julienne","text":"module procedure expect elemental module function expect(expected_true) result(test_diagnosis) Arguments Type Intent Optional Attributes Name logical, intent(in) :: expected_true Return Value type( test_diagnosis_t )","tags":"","url":"proc/expect.html"},{"title":"greater_than_double – Julienne","text":"module procedure greater_than_double elemental module function greater_than_double(actual, expected_floor) result(test_diagnosis) Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected_floor Return Value type( test_diagnosis_t )","tags":"","url":"proc/greater_than_double.html"},{"title":"greater_than_integer – Julienne","text":"module procedure greater_than_integer elemental module function greater_than_integer(actual, expected_floor) result(test_diagnosis) Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_floor Return Value type( test_diagnosis_t )","tags":"","url":"proc/greater_than_integer.html"},{"title":"greater_than_or_equal_to_double_precision – Julienne","text":"module procedure greater_than_or_equal_to_double_precision elemental module function greater_than_or_equal_to_double_precision(actual, expected_min) result(test_diagnosis) Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected_min Return Value type( test_diagnosis_t )","tags":"","url":"proc/greater_than_or_equal_to_double_precision.html"},{"title":"greater_than_or_equal_to_integer – Julienne","text":"module procedure greater_than_or_equal_to_integer elemental module function greater_than_or_equal_to_integer(actual, expected_min) result(test_diagnosis) Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_min Return Value type( test_diagnosis_t )","tags":"","url":"proc/greater_than_or_equal_to_integer.html"},{"title":"greater_than_or_equal_to_real – Julienne","text":"module procedure greater_than_or_equal_to_real elemental module function greater_than_or_equal_to_real(actual, expected_min) result(test_diagnosis) Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected_min Return Value type( test_diagnosis_t )","tags":"","url":"proc/greater_than_or_equal_to_real.html"},{"title":"greater_than_real – Julienne","text":"module procedure greater_than_real elemental module function greater_than_real(actual, expected_floor) result(test_diagnosis) Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected_floor Return Value type( test_diagnosis_t )","tags":"","url":"proc/greater_than_real.html"},{"title":"less_than_double – Julienne","text":"module procedure less_than_double elemental module function less_than_double(actual, expected_ceiling) result(test_diagnosis) Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected_ceiling Return Value type( test_diagnosis_t )","tags":"","url":"proc/less_than_double.html"},{"title":"less_than_integer – Julienne","text":"module procedure less_than_integer elemental module function less_than_integer(actual, expected_ceiling) result(test_diagnosis) Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_ceiling Return Value type( test_diagnosis_t )","tags":"","url":"proc/less_than_integer.html"},{"title":"less_than_or_equal_to_double_precision – Julienne","text":"module procedure less_than_or_equal_to_double_precision elemental module function less_than_or_equal_to_double_precision(actual, expected_max) result(test_diagnosis) Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected_max Return Value type( test_diagnosis_t )","tags":"","url":"proc/less_than_or_equal_to_double_precision.html"},{"title":"less_than_or_equal_to_integer – Julienne","text":"module procedure less_than_or_equal_to_integer elemental module function less_than_or_equal_to_integer(actual, expected_max) result(test_diagnosis) Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_max Return Value type( test_diagnosis_t )","tags":"","url":"proc/less_than_or_equal_to_integer.html"},{"title":"less_than_or_equal_to_real – Julienne","text":"module procedure less_than_or_equal_to_real elemental module function less_than_or_equal_to_real(actual, expected_max) result(test_diagnosis) Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected_max Return Value type( test_diagnosis_t )","tags":"","url":"proc/less_than_or_equal_to_real.html"},{"title":"less_than_real – Julienne","text":"module procedure less_than_real elemental module function less_than_real(actual, expected_ceiling) result(test_diagnosis) Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected_ceiling Return Value type( test_diagnosis_t )","tags":"","url":"proc/less_than_real.html"},{"title":"reverse_alphabetical_character_vs_character – Julienne","text":"module procedure reverse_alphabetical_character_vs_character elemental module function reverse_alphabetical_character_vs_character(lhs, rhs) result(test_diagnosis) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( test_diagnosis_t )","tags":"","url":"proc/reverse_alphabetical_character_vs_character.html"},{"title":"reverse_alphabetical_character_vs_string – Julienne","text":"module procedure reverse_alphabetical_character_vs_string elemental module function reverse_alphabetical_character_vs_string(lhs, rhs) result(test_diagnosis) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs type( string_t ), intent(in) :: rhs Return Value type( test_diagnosis_t )","tags":"","url":"proc/reverse_alphabetical_character_vs_string.html"},{"title":"reverse_alphabetical_string_vs_character – Julienne","text":"module procedure reverse_alphabetical_string_vs_character elemental module function reverse_alphabetical_string_vs_character(lhs, rhs) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( test_diagnosis_t )","tags":"","url":"proc/reverse_alphabetical_string_vs_character.html"},{"title":"reverse_alphabetical_string_vs_string – Julienne","text":"module procedure reverse_alphabetical_string_vs_string elemental module function reverse_alphabetical_string_vs_string(lhs, rhs) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lhs type( string_t ), intent(in) :: rhs Return Value type( test_diagnosis_t )","tags":"","url":"proc/reverse_alphabetical_string_vs_string.html"},{"title":"test_passed – Julienne","text":"module procedure test_passed elemental module function test_passed(self) result(passed) Interface → Arguments Type Intent Optional Attributes Name class( test_diagnosis_t ), intent(in) :: self Return Value logical","tags":"","url":"proc/test_passed.html"},{"title":"within_double_precision – Julienne","text":"module procedure within_double_precision elemental module function within_double_precision(operands, tolerance) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( operands_t (double_precision)), intent(in) :: operands double precision, intent(in) :: tolerance Return Value type( test_diagnosis_t )","tags":"","url":"proc/within_double_precision.html"},{"title":"within_double_precision_fraction – Julienne","text":"module procedure within_double_precision_fraction elemental module function within_double_precision_fraction(operands, fractional_tolerance) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( operands_t (double_precision)), intent(in) :: operands double precision, intent(in) :: fractional_tolerance Return Value type( test_diagnosis_t )","tags":"","url":"proc/within_double_precision_fraction.html"},{"title":"within_double_precision_percentage – Julienne","text":"module procedure within_double_precision_percentage elemental module function within_double_precision_percentage(operands, percentage_tolerance) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( operands_t (double_precision)), intent(in) :: operands double precision, intent(in) :: percentage_tolerance Return Value type( test_diagnosis_t )","tags":"","url":"proc/within_double_precision_percentage.html"},{"title":"within_real – Julienne","text":"module procedure within_real elemental module function within_real(operands, tolerance) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( operands_t ), intent(in) :: operands real, intent(in) :: tolerance Return Value type( test_diagnosis_t )","tags":"","url":"proc/within_real.html"},{"title":"within_real_fraction – Julienne","text":"module procedure within_real_fraction elemental module function within_real_fraction(operands, fractional_tolerance) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( operands_t ), intent(in) :: operands real, intent(in) :: fractional_tolerance Return Value type( test_diagnosis_t )","tags":"","url":"proc/within_real_fraction.html"},{"title":"within_real_percentage – Julienne","text":"module procedure within_real_percentage elemental module function within_real_percentage(operands, percentage_tolerance) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( operands_t ), intent(in) :: operands real, intent(in) :: percentage_tolerance Return Value type( test_diagnosis_t )","tags":"","url":"proc/within_real_percentage.html"},{"title":"from_file_with_character_name – Julienne","text":"module procedure from_file_with_character_name module function from_file_with_character_name(file_name) result(file_object) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: file_name Return Value type( file_t )","tags":"","url":"proc/from_file_with_character_name.html"},{"title":"from_file_with_string_name – Julienne","text":"module procedure from_file_with_string_name module function from_file_with_string_name(file_name) result(file_object) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: file_name Return Value type( file_t ) Calls proc~~from_file_with_string_name~~CallsGraph proc~from_file_with_string_name from_file_with_string_name none~string~2 string_t%string proc~from_file_with_string_name->none~string~2 interface~as_character string_t%as_character none~string~2->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/from_file_with_string_name.html"},{"title":"from_lines – Julienne","text":"module procedure from_lines pure module function from_lines(lines) result(file_object) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lines (:) Return Value type( file_t )","tags":"","url":"proc/from_lines.html"},{"title":"lines – Julienne","text":"module procedure lines pure module function lines(self) result(my_lines) Interface → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self Return Value type( string_t ), allocatable, (:)","tags":"","url":"proc/lines.html"},{"title":"write_to_character_file_name – Julienne","text":"module procedure write_to_character_file_name impure elemental module subroutine write_to_character_file_name(self, file_name) Interface → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self character(len=*), intent(in) :: file_name Calls proc~~write_to_character_file_name~~CallsGraph proc~write_to_character_file_name write_to_character_file_name call_assert call_assert proc~write_to_character_file_name->call_assert none~string~2 string_t%string proc~write_to_character_file_name->none~string~2 interface~as_character string_t%as_character none~string~2->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/write_to_character_file_name.html"},{"title":"write_to_output_unit – Julienne","text":"module procedure write_to_output_unit module subroutine write_to_output_unit(self) Interface → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self Calls proc~~write_to_output_unit~~CallsGraph proc~write_to_output_unit write_to_output_unit call_assert call_assert proc~write_to_output_unit->call_assert none~string~2 string_t%string proc~write_to_output_unit->none~string~2 interface~as_character string_t%as_character none~string~2->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/write_to_output_unit.html"},{"title":"write_to_string_file_name – Julienne","text":"module procedure write_to_string_file_name impure elemental module subroutine write_to_string_file_name(self, file_name) Interface → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self type( string_t ), intent(in) :: file_name Calls proc~~write_to_string_file_name~~CallsGraph proc~write_to_string_file_name write_to_string_file_name interface~write_to_character_file_name file_t%write_to_character_file_name proc~write_to_string_file_name->interface~write_to_character_file_name none~string~2 string_t%string proc~write_to_string_file_name->none~string~2 interface~as_character string_t%as_character none~string~2->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/write_to_string_file_name.html"},{"title":"driver_file – Julienne","text":"module procedure driver_file pure module function driver_file(self) result(file) Interface → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self Return Value type( file_t ) Calls proc~~driver_file~~CallsGraph proc~driver_file driver_file interface~test_modules test_suite_t%test_modules proc~driver_file->interface~test_modules interface~test_types test_suite_t%test_types proc~driver_file->interface~test_types Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/driver_file.html"},{"title":"from_components – Julienne","text":"module procedure from_components pure module function from_components(test_subjects) result(test_suite) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: test_subjects (:) Return Value type( test_suite_t )","tags":"","url":"proc/from_components.html"},{"title":"from_file – Julienne","text":"module procedure from_file pure module function from_file(file) result(test_suite) Arguments Type Intent Optional Attributes Name type( file_t ), intent(in) :: file Return Value type( test_suite_t ) Calls proc~~from_file~~CallsGraph proc~from_file from_file call_assert call_assert proc~from_file->call_assert get_json_key get_json_key proc~from_file->get_json_key get_json_value get_json_value proc~from_file->get_json_value interface~lines file_t%lines proc~from_file->interface~lines Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/from_file.html"},{"title":"stub_file – Julienne","text":"module procedure stub_file pure module function stub_file(self, subject) result(file) Interface → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self type( string_t ), intent(in) :: subject Return Value type( file_t )","tags":"","url":"proc/stub_file.html"},{"title":"test_modules – Julienne","text":"module procedure test_modules pure module function test_modules(self) result(modules) Interface → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self Return Value type( string_t ), allocatable, (:)","tags":"","url":"proc/test_modules.html"},{"title":"test_subjects – Julienne","text":"module procedure test_subjects pure module function test_subjects(self) result(subjects) Interface → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self Return Value type( string_t ), allocatable, (:)","tags":"","url":"proc/test_subjects.html"},{"title":"test_types – Julienne","text":"module procedure test_types pure module function test_types(self) result(types) Interface → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self Return Value type( string_t ), allocatable, (:)","tags":"","url":"proc/test_types.html"},{"title":"to_file – Julienne","text":"module procedure to_file pure module function to_file(self) result(file) Interface → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self Return Value type( file_t ) Calls proc~~to_file~~CallsGraph proc~to_file to_file interface~bracket string_t%bracket proc~to_file->interface~bracket Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/to_file.html"},{"title":"write_driver – Julienne","text":"module procedure write_driver module subroutine write_driver(self, file_name) Interface → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self character(len=*), intent(in) :: file_name Calls proc~~write_driver~~CallsGraph proc~write_driver write_driver interface~test_types test_suite_t%test_types proc~write_driver->interface~test_types none~string~2 string_t%string proc~write_driver->none~string~2 interface~as_character string_t%as_character none~string~2->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/write_driver.html"},{"title":"construct_from_characters – Julienne","text":"module procedure construct_from_characters module function construct_from_characters(description, diagnosis_function) result(test_description) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description procedure( diagnosis_function_i ), intent(in), optional, pointer :: diagnosis_function Return Value type( test_description_t ) Calls proc~~construct_from_characters~~CallsGraph proc~construct_from_characters construct_from_characters call_assert call_assert proc~construct_from_characters->call_assert Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/construct_from_characters.html"},{"title":"construct_from_string – Julienne","text":"module procedure construct_from_string module function construct_from_string(description, diagnosis_function) result(test_description) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description procedure( diagnosis_function_i ), intent(in), optional, pointer :: diagnosis_function Return Value type( test_description_t ) Calls proc~~construct_from_string~2~~CallsGraph proc~construct_from_string~2 construct_from_string call_assert call_assert proc~construct_from_string~2->call_assert Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/construct_from_string~2.html"},{"title":"contains_characters – Julienne","text":"module procedure contains_characters elemental module function contains_characters(self, substring) result(match) Interface → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical Calls proc~~contains_characters~~CallsGraph proc~contains_characters contains_characters call_assert call_assert proc~contains_characters->call_assert Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/contains_characters.html"},{"title":"contains_string_t – Julienne","text":"module procedure contains_string_t elemental module function contains_string_t(self, substring) result(match) Interface → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical Calls proc~~contains_string_t~~CallsGraph proc~contains_string_t contains_string_t call_assert call_assert proc~contains_string_t->call_assert none~string~2 string_t%string proc~contains_string_t->none~string~2 interface~as_character string_t%as_character none~string~2->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/contains_string_t.html"},{"title":"equals – Julienne","text":"module procedure equals elemental module function equals(lhs, rhs) result(lhs_eq_rhs) Interface → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: lhs class( test_description_t ), intent(in) :: rhs Return Value logical Calls proc~~equals~~CallsGraph proc~equals equals call_assert call_assert proc~equals->call_assert Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/equals.html"},{"title":"filter – Julienne","text":"module procedure filter module function filter(test_descriptions, subject) result(filtered_test_descriptions) Interface → Arguments Type Intent Optional Attributes Name type( test_description_t ), intent(in) :: test_descriptions (:) character(len=*), intent(in) :: subject Return Value type( test_description_t ), allocatable, (:) Calls proc~~filter~~CallsGraph proc~filter filter interface~flag_value command_line_t%flag_value proc~filter->interface~flag_value none~contains_text test_description_t%contains_text proc~filter->none~contains_text interface~contains_characters test_description_t%contains_characters none~contains_text->interface~contains_characters interface~contains_string_t test_description_t%contains_string_t none~contains_text->interface~contains_string_t Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/filter.html"},{"title":"run – Julienne","text":"module procedure run impure elemental module function run(self) result(test_result) Interface → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self Return Value type( test_result_t ) Calls proc~~run~~CallsGraph proc~run run call_assert call_assert proc~run->call_assert Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/run.html"},{"title":"report – Julienne","text":"module procedure report module subroutine report(test, passes, tests, skips) Interface → Arguments Type Intent Optional Attributes Name class( test_t ), intent(in) :: test integer, intent(inout) :: passes integer, intent(inout) :: tests integer, intent(inout) :: skips Calls proc~~report~2~~CallsGraph proc~report~2 report characterize characterize proc~report~2->characterize flag_value flag_value proc~report~2->flag_value interface~co_all co_all proc~report~2->interface~co_all interface~one_image_prints one_image_prints proc~report~2->interface~one_image_prints passed passed proc~report~2->passed passing_tests passing_tests proc~report~2->passing_tests results results proc~report~2->results skipped skipped proc~report~2->skipped skipped_tests skipped_tests proc~report~2->skipped_tests subject subject proc~report~2->subject test_results test_results proc~report~2->test_results Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/report~2.html"},{"title":"run – Julienne","text":"module procedure run module function run(test, test_descriptions) result(test_results) Interface → Arguments Type Intent Optional Attributes Name class( test_t ), intent(in) :: test type( test_description_t ), intent(in) :: test_descriptions (:) Return Value type( test_result_t ), allocatable, (:) Calls proc~~run~2~~CallsGraph proc~run~2 run interface~filter filter proc~run~2->interface~filter run run proc~run~2->run subject subject proc~run~2->subject Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/run~2.html"},{"title":"run – Julienne","text":"module procedure run module function run(test, test_descriptions) result(test_results) Interface → Arguments Type Intent Optional Attributes Name class( test_t ), intent(in) :: test type( test_description_t ), intent(in) :: test_descriptions (:) Return Value type( test_result_t ), allocatable, (:) Calls proc~~run~3~~CallsGraph proc~run~3 run interface~filter filter proc~run~3->interface~filter interface~run~2 test_description_t%run proc~run~3->interface~run~2 subject subject proc~run~3->subject Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/run~3.html"},{"title":"component_constructor – Julienne","text":"module procedure component_constructor module function component_constructor(test_fixtures) result(test_harness) Arguments Type Intent Optional Attributes Name class( test_fixture_t ) :: test_fixtures (:) Return Value type( test_harness_t )","tags":"","url":"proc/component_constructor~2.html"},{"title":"report_results – Julienne","text":"module procedure report_results module subroutine report_results(self) Interface → Arguments Type Intent Optional Attributes Name class( test_harness_t ), intent(in) :: self Calls proc~~report_results~~CallsGraph proc~report_results report_results interface~one_image_prints one_image_prints proc~report_results->interface~one_image_prints interface~report test_fixture_t%report proc~report_results->interface~report proc~print_usage_info_and_stop_if_requested print_usage_info_and_stop_if_requested proc~report_results->proc~print_usage_info_and_stop_if_requested proc~print_usage_info_and_stop_if_requested->interface~one_image_prints interface~argument_present command_line_t%argument_present proc~print_usage_info_and_stop_if_requested->interface~argument_present Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/report_results.html"},{"title":"separated_values – Julienne","text":"module procedure separated_values pure module function separated_values(separator, mold) result(format_string) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: separator class(*), intent(in) :: mold (..) Return Value character(len=:), allocatable","tags":"","url":"proc/separated_values.html"},{"title":"julienne_test_harness_m – Julienne","text":"Define a test harness encapsulating an array of text fixtures, each of which can run a set of tests. Uses julienne_test_fixture_m module~~julienne_test_harness_m~~UsesGraph module~julienne_test_harness_m julienne_test_harness_m module~julienne_test_fixture_m julienne_test_fixture_m module~julienne_test_harness_m->module~julienne_test_fixture_m module~julienne_test_m julienne_test_m module~julienne_test_fixture_m->module~julienne_test_m module~julienne_command_line_m julienne_command_line_m module~julienne_test_m->module~julienne_command_line_m module~julienne_test_description_m julienne_test_description_m module~julienne_test_m->module~julienne_test_description_m module~julienne_test_result_m julienne_test_result_m module~julienne_test_m->module~julienne_test_result_m module~julienne_user_defined_collectives_m julienne_user_defined_collectives_m module~julienne_test_m->module~julienne_user_defined_collectives_m module~julienne_test_description_m->module~julienne_test_result_m module~julienne_string_m julienne_string_m module~julienne_test_description_m->module~julienne_string_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_test_description_m->module~julienne_test_diagnosis_m module~julienne_test_result_m->module~julienne_string_m module~julienne_test_result_m->module~julienne_test_diagnosis_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding module~julienne_test_diagnosis_m->module~julienne_string_m module~julienne_test_diagnosis_m->iso_c_binding Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by Descendants: julienne_test_harness_s module~~julienne_test_harness_m~~UsedByGraph module~julienne_test_harness_m julienne_test_harness_m module~julienne_m julienne_m module~julienne_m->module~julienne_test_harness_m module~julienne_test_harness_s julienne_test_harness_s module~julienne_test_harness_s->module~julienne_test_harness_m module~julienne_test_suite_s julienne_test_suite_s module~julienne_test_suite_s->module~julienne_m program~assertions assertions program~assertions->module~julienne_m program~check_for_command_line_argument check_for_command_line_argument program~check_for_command_line_argument->module~julienne_m program~get_command_line_flag_value get_command_line_flag_value program~get_command_line_flag_value->module~julienne_m program~scaffold scaffold program~scaffold->module~julienne_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces public        interface test_harness_t private module function component_constructor(test_fixtures) result(test_harness) Implementation → Component-wise user-defined structure constructor Arguments Type Intent Optional Attributes Name class( test_fixture_t ) :: test_fixtures (:) Return Value type( test_harness_t ) interface private module subroutine report_results(self) Implementation → If command line includes -h or --help, print usage information and stop.\nOtherwise, run tests and print results, including diagnostics for any failures.\nAlso, tally and print the numbers of passing tests, total tests, skipped tests. Arguments Type Intent Optional Attributes Name class( test_harness_t ), intent(in) :: self Derived Types type, public :: test_harness_t Encapsulate a set of test fixtures, each of which can run a set of tests. Components Type Visibility Attributes Name Initial type( test_fixture_t ), private, allocatable :: test_fixture_ (:) Constructor private\n\n                    module\n                    function component_constructor (test_fixtures) Component-wise user-defined structure constructor Type-Bound Procedures procedure, public :: report_results","tags":"","url":"module/julienne_test_harness_m.html"},{"title":"julienne_test_suite_m – Julienne","text":"Uses julienne_file_m julienne_string_m module~~julienne_test_suite_m~~UsesGraph module~julienne_test_suite_m julienne_test_suite_m module~julienne_file_m julienne_file_m module~julienne_test_suite_m->module~julienne_file_m module~julienne_string_m julienne_string_m module~julienne_test_suite_m->module~julienne_string_m module~julienne_file_m->module~julienne_string_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by Descendants: julienne_test_suite_s module~~julienne_test_suite_m~~UsedByGraph module~julienne_test_suite_m julienne_test_suite_m module~julienne_m julienne_m module~julienne_m->module~julienne_test_suite_m module~julienne_test_suite_s julienne_test_suite_s module~julienne_test_suite_s->module~julienne_test_suite_m module~julienne_test_suite_s->module~julienne_m program~assertions assertions program~assertions->module~julienne_m program~check_for_command_line_argument check_for_command_line_argument program~check_for_command_line_argument->module~julienne_m program~get_command_line_flag_value get_command_line_flag_value program~get_command_line_flag_value->module~julienne_m program~scaffold scaffold program~scaffold->module~julienne_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces public        interface test_suite_t private pure module function from_components(test_subjects) result(test_suite) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: test_subjects (:) Return Value type( test_suite_t ) private pure module function from_file(file) result(test_suite) Implementation → Arguments Type Intent Optional Attributes Name type( file_t ), intent(in) :: file Return Value type( test_suite_t ) interface private pure module function driver_file(self) result(file) Implementation → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self Return Value type( file_t ) interface private pure module function stub_file(self, subject) result(file) Implementation → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self type( string_t ), intent(in) :: subject Return Value type( file_t ) interface private pure module function test_modules(self) result(modules) Implementation → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self Return Value type( string_t ), allocatable, (:) interface private pure module function test_subjects(self) result(subjects) Implementation → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self Return Value type( string_t ), allocatable, (:) interface private pure module function test_types(self) result(types) Implementation → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self Return Value type( string_t ), allocatable, (:) interface private pure module function to_file(self) result(file) Implementation → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self Return Value type( file_t ) interface private module subroutine write_driver(self, file_name) Implementation → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self character(len=*), intent(in) :: file_name Derived Types type, public :: test_suite_t Components Type Visibility Attributes Name Initial type( string_t ), private, allocatable :: test_subjects_ (:) Constructor private\n\n                    pure, module\n                    function from_components (test_subjects) private\n\n                    pure, module\n                    function from_file (file) Type-Bound Procedures procedure, public :: driver_file procedure, public :: stub_file procedure, public :: test_modules procedure, public :: test_subjects procedure, public :: test_types procedure, public :: to_file procedure, public :: write_driver","tags":"","url":"module/julienne_test_suite_m.html"},{"title":"julienne_one_image_prints_m – Julienne","text":"Uses julienne_string_m module~~julienne_one_image_prints_m~~UsesGraph module~julienne_one_image_prints_m julienne_one_image_prints_m module~julienne_string_m julienne_string_m module~julienne_one_image_prints_m->module~julienne_string_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by Descendants: julienne_one_image_prints_s module~~julienne_one_image_prints_m~~UsedByGraph module~julienne_one_image_prints_m julienne_one_image_prints_m module~julienne_m julienne_m module~julienne_m->module~julienne_one_image_prints_m module~julienne_one_image_prints_s julienne_one_image_prints_s module~julienne_one_image_prints_s->module~julienne_one_image_prints_m module~julienne_test_harness_s julienne_test_harness_s module~julienne_test_harness_s->module~julienne_one_image_prints_m module~julienne_test_s julienne_test_s module~julienne_test_s->module~julienne_one_image_prints_m module~julienne_test_suite_s julienne_test_suite_s module~julienne_test_suite_s->module~julienne_m program~assertions assertions program~assertions->module~julienne_m program~check_for_command_line_argument check_for_command_line_argument program~check_for_command_line_argument->module~julienne_m program~get_command_line_flag_value get_command_line_flag_value program~get_command_line_flag_value->module~julienne_m program~scaffold scaffold program~scaffold->module~julienne_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces public        interface one_image_prints private module subroutine print_character(character_string) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: character_string (..) private module subroutine print_string(string) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: string (..)","tags":"","url":"module/julienne_one_image_prints_m.html"},{"title":"julienne_test_fixture_m – Julienne","text":"Define a wrapper type for the test_t type to facilitate creating a polymorphic \narray of test_t objects. Uses julienne_test_m module~~julienne_test_fixture_m~~UsesGraph module~julienne_test_fixture_m julienne_test_fixture_m module~julienne_test_m julienne_test_m module~julienne_test_fixture_m->module~julienne_test_m module~julienne_command_line_m julienne_command_line_m module~julienne_test_m->module~julienne_command_line_m module~julienne_test_description_m julienne_test_description_m module~julienne_test_m->module~julienne_test_description_m module~julienne_test_result_m julienne_test_result_m module~julienne_test_m->module~julienne_test_result_m module~julienne_user_defined_collectives_m julienne_user_defined_collectives_m module~julienne_test_m->module~julienne_user_defined_collectives_m module~julienne_test_description_m->module~julienne_test_result_m module~julienne_string_m julienne_string_m module~julienne_test_description_m->module~julienne_string_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_test_description_m->module~julienne_test_diagnosis_m module~julienne_test_result_m->module~julienne_string_m module~julienne_test_result_m->module~julienne_test_diagnosis_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding module~julienne_test_diagnosis_m->module~julienne_string_m module~julienne_test_diagnosis_m->iso_c_binding Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by Descendants: julienne_test_fixture_s module~~julienne_test_fixture_m~~UsedByGraph module~julienne_test_fixture_m julienne_test_fixture_m module~julienne_m julienne_m module~julienne_m->module~julienne_test_fixture_m module~julienne_test_harness_m julienne_test_harness_m module~julienne_m->module~julienne_test_harness_m module~julienne_test_fixture_s julienne_test_fixture_s module~julienne_test_fixture_s->module~julienne_test_fixture_m module~julienne_test_harness_m->module~julienne_test_fixture_m module~julienne_test_harness_s julienne_test_harness_s module~julienne_test_harness_s->module~julienne_test_harness_m module~julienne_test_suite_s julienne_test_suite_s module~julienne_test_suite_s->module~julienne_m program~assertions assertions program~assertions->module~julienne_m program~check_for_command_line_argument check_for_command_line_argument program~check_for_command_line_argument->module~julienne_m program~get_command_line_flag_value get_command_line_flag_value program~get_command_line_flag_value->module~julienne_m program~scaffold scaffold program~scaffold->module~julienne_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces public        interface test_fixture_t private module function component_constructor(test) result(test_fixture) Implementation → Construct a test_fixture_t object from its components Arguments Type Intent Optional Attributes Name class( test_t ), intent(in) :: test Return Value type( test_fixture_t ) interface private module subroutine report(self, passes, tests, skips) Implementation → Print the test results and increment the tallies of passing tests, total tests, and skipped tests. Arguments Type Intent Optional Attributes Name class( test_fixture_t ), intent(in) :: self integer, intent(inout) :: passes integer, intent(inout) :: tests integer, intent(inout) :: skips Derived Types type, public :: test_fixture_t Components Type Visibility Attributes Name Initial class( test_t ), private, allocatable :: test_ Constructor private\n\n                    module\n                    function component_constructor (test) Construct a test_fixture_t object from its components Type-Bound Procedures procedure, public :: report","tags":"","url":"module/julienne_test_fixture_m.html"},{"title":"julienne_assert_m – Julienne","text":"Define interfaces for writing assertions Uses julienne_test_diagnosis_m module~~julienne_assert_m~~UsesGraph module~julienne_assert_m julienne_assert_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_assert_m->module~julienne_test_diagnosis_m iso_c_binding iso_c_binding module~julienne_test_diagnosis_m->iso_c_binding module~julienne_string_m julienne_string_m module~julienne_test_diagnosis_m->module~julienne_string_m module~julienne_string_m->iso_c_binding Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by Descendants: julienne_assert_s module~~julienne_assert_m~~UsedByGraph module~julienne_assert_m julienne_assert_m module~julienne_assert_s julienne_assert_s module~julienne_assert_s->module~julienne_assert_m module~julienne_bin_s julienne_bin_s module~julienne_bin_s->module~julienne_assert_m module~julienne_m julienne_m module~julienne_m->module~julienne_assert_m module~julienne_string_s julienne_string_s module~julienne_string_s->module~julienne_assert_m module~julienne_test_description_s julienne_test_description_s module~julienne_test_description_s->module~julienne_assert_m module~julienne_test_suite_s julienne_test_suite_s module~julienne_test_suite_s->module~julienne_m program~assertions assertions program~assertions->module~julienne_m program~check_for_command_line_argument check_for_command_line_argument program~check_for_command_line_argument->module~julienne_m program~get_command_line_flag_value get_command_line_flag_value program~get_command_line_flag_value->module~julienne_m program~scaffold scaffold program~scaffold->module~julienne_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces public        interface call_julienne_assert_ private pure module subroutine idiomatic_assert(test_diagnosis, file, line, description) Implementation → Error terminate if test_diagnosis%test_passed() == .false. , in which\ncase the stop code contains The description argument if present and if called via\n     `julienne_assert; otherwise, a copy of the invoking statement, The value of test_diagnosis%diagnostics_string(), , The file name if present, and The line number if present. Most compilers write the stop code to error_unit . Usage call julienne_assert(.all. ([\"a\",\"b\",\"c\"] .isBefore. \"efg\")) call_julienne_assert(.all. ([\"a\",\"b\",\"c\"] .isBefore. \"efg\")) The first line above guarantees execution, whereas the second ensures\nremoval when compiled without -DASSERTIONS .  When invoked via macro,\nthe second line also causes the automatic insertion of items 1-4 above. Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: test_diagnosis character(len=*), intent(in), optional :: file integer, intent(in), optional :: line character(len=*), intent(in), optional :: description private pure module subroutine logical_assert(assertion, file, line, description) Implementation → Error terminate if assertion == .false. , in which case the stop code\ncontains The description argument if present and if called via \n   `julienne_assert; otherwise, a copy of the invoking statement, The file name if present, and The line number if present. Most compilers write the stop code to error_unit . Usage call julienne_assert(associated(A)) call_julienne_assert(associated(A)) The first line above guarantees execution, whereas the second ensures\nremoval when compiled without -DASSERTIONS .  When invoked via macro,\nthe second line also causes the automatic insertion of items 1-4 above. Arguments Type Intent Optional Attributes Name logical, intent(in) :: assertion character(len=*), intent(in), optional :: file integer, intent(in), optional :: line character(len=*), intent(in), optional :: description public        interface julienne_assert private pure module subroutine idiomatic_assert(test_diagnosis, file, line, description) Implementation → Error terminate if test_diagnosis%test_passed() == .false. , in which\ncase the stop code contains The description argument if present and if called via\n     `julienne_assert; otherwise, a copy of the invoking statement, The value of test_diagnosis%diagnostics_string(), , The file name if present, and The line number if present. Most compilers write the stop code to error_unit . Usage call julienne_assert(.all. ([\"a\",\"b\",\"c\"] .isBefore. \"efg\")) call_julienne_assert(.all. ([\"a\",\"b\",\"c\"] .isBefore. \"efg\")) The first line above guarantees execution, whereas the second ensures\nremoval when compiled without -DASSERTIONS .  When invoked via macro,\nthe second line also causes the automatic insertion of items 1-4 above. Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: test_diagnosis character(len=*), intent(in), optional :: file integer, intent(in), optional :: line character(len=*), intent(in), optional :: description private pure module subroutine logical_assert(assertion, file, line, description) Implementation → Error terminate if assertion == .false. , in which case the stop code\ncontains The description argument if present and if called via \n   `julienne_assert; otherwise, a copy of the invoking statement, The file name if present, and The line number if present. Most compilers write the stop code to error_unit . Usage call julienne_assert(associated(A)) call_julienne_assert(associated(A)) The first line above guarantees execution, whereas the second ensures\nremoval when compiled without -DASSERTIONS .  When invoked via macro,\nthe second line also causes the automatic insertion of items 1-4 above. Arguments Type Intent Optional Attributes Name logical, intent(in) :: assertion character(len=*), intent(in), optional :: file integer, intent(in), optional :: line character(len=*), intent(in), optional :: description","tags":"","url":"module/julienne_assert_m.html"},{"title":"julienne_test_m – Julienne","text":"Define an abstract test_t type with deferred bindings (\"subject\" and \"results\")\nused by a type-bound procedure (\"report\") for reporting test results.  The \"report\"\nprocedure thus represents an implementation of the Template Method pattern. Uses julienne_command_line_m julienne_test_description_m julienne_user_defined_collectives_m julienne_test_result_m module~~julienne_test_m~~UsesGraph module~julienne_test_m julienne_test_m module~julienne_command_line_m julienne_command_line_m module~julienne_test_m->module~julienne_command_line_m module~julienne_test_description_m julienne_test_description_m module~julienne_test_m->module~julienne_test_description_m module~julienne_test_result_m julienne_test_result_m module~julienne_test_m->module~julienne_test_result_m module~julienne_user_defined_collectives_m julienne_user_defined_collectives_m module~julienne_test_m->module~julienne_user_defined_collectives_m module~julienne_test_description_m->module~julienne_test_result_m module~julienne_string_m julienne_string_m module~julienne_test_description_m->module~julienne_string_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_test_description_m->module~julienne_test_diagnosis_m module~julienne_test_result_m->module~julienne_string_m module~julienne_test_result_m->module~julienne_test_diagnosis_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding module~julienne_test_diagnosis_m->module~julienne_string_m module~julienne_test_diagnosis_m->iso_c_binding Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by Descendants: julienne_test_s module~~julienne_test_m~~UsedByGraph module~julienne_test_m julienne_test_m module~julienne_m julienne_m module~julienne_m->module~julienne_test_m module~julienne_test_fixture_m julienne_test_fixture_m module~julienne_m->module~julienne_test_fixture_m module~julienne_test_harness_m julienne_test_harness_m module~julienne_m->module~julienne_test_harness_m module~julienne_test_fixture_m->module~julienne_test_m module~julienne_test_s julienne_test_s module~julienne_test_s->module~julienne_test_m module~julienne_test_fixture_s julienne_test_fixture_s module~julienne_test_fixture_s->module~julienne_test_fixture_m module~julienne_test_harness_m->module~julienne_test_fixture_m module~julienne_test_suite_s julienne_test_suite_s module~julienne_test_suite_s->module~julienne_m program~assertions assertions program~assertions->module~julienne_m program~check_for_command_line_argument check_for_command_line_argument program~check_for_command_line_argument->module~julienne_m program~get_command_line_flag_value get_command_line_flag_value program~get_command_line_flag_value->module~julienne_m program~scaffold scaffold program~scaffold->module~julienne_m module~julienne_test_harness_s julienne_test_harness_s module~julienne_test_harness_s->module~julienne_test_harness_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces interface private module subroutine report(test, passes, tests, skips) Implementation → Print the test results and increment the tallies of passing tests, total tests, and skipped tests. Arguments Type Intent Optional Attributes Name class( test_t ), intent(in) :: test integer, intent(inout) :: passes integer, intent(inout) :: tests integer, intent(inout) :: skips interface private module function run(test, test_descriptions) result(test_results) Implementation → Construct an array of test results from a set of tests filtered for descriptions and subjects with\nthe '--contains' flag's value if the flag was included on the command line at program launch. Arguments Type Intent Optional Attributes Name class( test_t ), intent(in) :: test type( test_description_t ), intent(in) :: test_descriptions (:) Return Value type( test_result_t ), allocatable, (:) Abstract Interfaces abstract interface private  function results_interface() result(test_results) The result is an array of test results for subsequent reporting in the \"report\" type-bound procedure Arguments None Return Value type( test_result_t ), allocatable, (:) abstract interface private pure function subject_interface() result(specimen_description) The result is the name of the test specimen (the subject of testing) Arguments None Return Value character(len=:), allocatable Derived Types type, public, abstract :: test_t Facilitate testing and test reporting Type-Bound Procedures procedure, public :: report procedure( results_interface ), public, deferred, nopass :: results procedure, public :: run procedure( subject_interface ), public, deferred, nopass :: subject","tags":"","url":"module/julienne_test_m.html"},{"title":"julienne_user_defined_collectives_m – Julienne","text":"User-defined collective subroutines. Used by Descendants: julienne_user_defined_collectives_s module~~julienne_user_defined_collectives_m~~UsedByGraph module~julienne_user_defined_collectives_m julienne_user_defined_collectives_m module~julienne_test_m julienne_test_m module~julienne_test_m->module~julienne_user_defined_collectives_m module~julienne_test_result_s julienne_test_result_s module~julienne_test_result_s->module~julienne_user_defined_collectives_m module~julienne_user_defined_collectives_s julienne_user_defined_collectives_s module~julienne_user_defined_collectives_s->module~julienne_user_defined_collectives_m module~julienne_m julienne_m module~julienne_m->module~julienne_test_m module~julienne_test_fixture_m julienne_test_fixture_m module~julienne_m->module~julienne_test_fixture_m module~julienne_test_harness_m julienne_test_harness_m module~julienne_m->module~julienne_test_harness_m module~julienne_test_fixture_m->module~julienne_test_m module~julienne_test_s julienne_test_s module~julienne_test_s->module~julienne_test_m module~julienne_test_fixture_s julienne_test_fixture_s module~julienne_test_fixture_s->module~julienne_test_fixture_m module~julienne_test_harness_m->module~julienne_test_fixture_m module~julienne_test_suite_s julienne_test_suite_s module~julienne_test_suite_s->module~julienne_m program~assertions assertions program~assertions->module~julienne_m program~check_for_command_line_argument check_for_command_line_argument program~check_for_command_line_argument->module~julienne_m program~get_command_line_flag_value get_command_line_flag_value program~get_command_line_flag_value->module~julienne_m program~scaffold scaffold program~scaffold->module~julienne_m module~julienne_test_harness_s julienne_test_harness_s module~julienne_test_harness_s->module~julienne_test_harness_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces interface public impure elemental module subroutine co_all(boolean) Implementation → If any image in a team calls this subroutine, then every image in the \nthe same team must call this subroutine.  This subroutine sets the\n\"boolean\" argument .true. if it is true in all participating images\nupon entry and .false. otherwise. Arguments Type Intent Optional Attributes Name logical, intent(inout) :: boolean","tags":"","url":"module/julienne_user_defined_collectives_m.html"},{"title":"julienne_test_diagnosis_m – Julienne","text":"Define abstractions, defined operations, and procedures for writing correctness checks Uses iso_c_binding julienne_string_m module~~julienne_test_diagnosis_m~~UsesGraph module~julienne_test_diagnosis_m julienne_test_diagnosis_m iso_c_binding iso_c_binding module~julienne_test_diagnosis_m->iso_c_binding module~julienne_string_m julienne_string_m module~julienne_test_diagnosis_m->module~julienne_string_m module~julienne_string_m->iso_c_binding Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by Descendants: julienne_test_diagnosis_s module~~julienne_test_diagnosis_m~~UsedByGraph module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_assert_m julienne_assert_m module~julienne_assert_m->module~julienne_test_diagnosis_m module~julienne_bin_s julienne_bin_s module~julienne_bin_s->module~julienne_test_diagnosis_m module~julienne_bin_s->module~julienne_assert_m module~julienne_m julienne_m module~julienne_m->module~julienne_test_diagnosis_m module~julienne_m->module~julienne_assert_m module~julienne_test_description_m julienne_test_description_m module~julienne_m->module~julienne_test_description_m module~julienne_test_result_m julienne_test_result_m module~julienne_m->module~julienne_test_result_m module~julienne_test_m julienne_test_m module~julienne_m->module~julienne_test_m module~julienne_test_fixture_m julienne_test_fixture_m module~julienne_m->module~julienne_test_fixture_m module~julienne_test_harness_m julienne_test_harness_m module~julienne_m->module~julienne_test_harness_m module~julienne_string_s julienne_string_s module~julienne_string_s->module~julienne_test_diagnosis_m module~julienne_string_s->module~julienne_assert_m module~julienne_test_description_m->module~julienne_test_diagnosis_m module~julienne_test_description_m->module~julienne_test_result_m module~julienne_test_diagnosis_s julienne_test_diagnosis_s module~julienne_test_diagnosis_s->module~julienne_test_diagnosis_m module~julienne_test_result_m->module~julienne_test_diagnosis_m module~julienne_assert_s julienne_assert_s module~julienne_assert_s->module~julienne_assert_m module~julienne_test_description_s julienne_test_description_s module~julienne_test_description_s->module~julienne_assert_m module~julienne_test_description_s->module~julienne_test_description_m module~julienne_test_m->module~julienne_test_description_m module~julienne_test_m->module~julienne_test_result_m module~julienne_test_result_s julienne_test_result_s module~julienne_test_result_s->module~julienne_test_result_m module~julienne_test_s julienne_test_s module~julienne_test_s->module~julienne_test_description_m module~julienne_test_s->module~julienne_test_m module~julienne_test_suite_s julienne_test_suite_s module~julienne_test_suite_s->module~julienne_m program~assertions assertions program~assertions->module~julienne_m program~check_for_command_line_argument check_for_command_line_argument program~check_for_command_line_argument->module~julienne_m program~get_command_line_flag_value get_command_line_flag_value program~get_command_line_flag_value->module~julienne_m program~scaffold scaffold program~scaffold->module~julienne_m module~julienne_test_fixture_m->module~julienne_test_m module~julienne_test_fixture_s julienne_test_fixture_s module~julienne_test_fixture_s->module~julienne_test_fixture_m module~julienne_test_harness_m->module~julienne_test_fixture_m module~julienne_test_harness_s julienne_test_harness_s module~julienne_test_harness_s->module~julienne_test_harness_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer, private, parameter :: default_real = kind(1.) integer, private, parameter :: double_precision = kind(1D0) Interfaces public        interface operator(.all.) private pure module function aggregate_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (..) Return Value type( test_diagnosis_t ) private pure module function aggregate_rank10_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:,:,:,:) Return Value type( test_diagnosis_t ) private pure module function aggregate_rank11_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:,:,:,:,:) Return Value type( test_diagnosis_t ) private pure module function aggregate_rank12_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:,:,:,:,:,:) Return Value type( test_diagnosis_t ) private pure module function aggregate_rank13_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:,:,:,:,:,:,:) Return Value type( test_diagnosis_t ) private pure module function aggregate_rank14_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:,:,:,:,:,:,:,:) Return Value type( test_diagnosis_t ) private pure module function aggregate_rank15_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:,:,:,:,:,:,:,:,:) Return Value type( test_diagnosis_t ) private pure module function aggregate_rank2_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:) Return Value type( test_diagnosis_t ) private pure module function aggregate_rank3_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:) Return Value type( test_diagnosis_t ) private pure module function aggregate_rank4_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:) Return Value type( test_diagnosis_t ) private pure module function aggregate_rank5_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:) Return Value type( test_diagnosis_t ) private pure module function aggregate_rank6_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:) Return Value type( test_diagnosis_t ) private pure module function aggregate_rank7_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:) Return Value type( test_diagnosis_t ) private pure module function aggregate_rank8_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:,:) Return Value type( test_diagnosis_t ) private pure module function aggregate_rank9_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:,:,:) Return Value type( test_diagnosis_t ) private pure module function aggregate_scalar_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses Return Value type( test_diagnosis_t ) private pure module function aggregate_vector_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:) Return Value type( test_diagnosis_t ) public        interface operator(.also.) private elemental module function also(lhs, rhs) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: lhs type( test_diagnosis_t ), intent(in) :: rhs Return Value type( test_diagnosis_t ) public        interface operator(.and.) private elemental module function also(lhs, rhs) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: lhs type( test_diagnosis_t ), intent(in) :: rhs Return Value type( test_diagnosis_t ) public        interface operator(.approximates.) private elemental module function approximates_double_precision(actual, expected) result(operands) Implementation → Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected Return Value type( operands_t (double_precision)) private elemental module function approximates_real(actual, expected) result(operands) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected Return Value type( operands_t ) public        interface operator(.equalsExpected.) private elemental module function equals_expected_c_ptr(actual, expected) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: actual type(c_ptr), intent(in) :: expected Return Value type( test_diagnosis_t ) private elemental module function equals_expected_character(actual, expected) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: actual character(len=*), intent(in) :: expected Return Value type( test_diagnosis_t ) private elemental module function equals_expected_character_vs_string(actual, expected) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: actual type( string_t ), intent(in) :: expected Return Value type( test_diagnosis_t ) private elemental module function equals_expected_integer(actual, expected) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected Return Value type( test_diagnosis_t ) private elemental module function equals_expected_integer_c_size_t(actual, expected) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_size_t), intent(in) :: actual integer(kind=c_size_t), intent(in) :: expected Return Value type( test_diagnosis_t ) private elemental module function equals_expected_string(actual, expected) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: actual type( string_t ), intent(in) :: expected Return Value type( test_diagnosis_t ) private elemental module function equals_expected_string_vs_character(actual, expected) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: actual character(len=*), intent(in) :: expected Return Value type( test_diagnosis_t ) public        interface operator(.expect.) private elemental module function expect(expected_true) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name logical, intent(in) :: expected_true Return Value type( test_diagnosis_t ) public        interface operator(.greaterThan.) private elemental module function greater_than_double(actual, expected_floor) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected_floor Return Value type( test_diagnosis_t ) private elemental module function greater_than_integer(actual, expected_floor) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_floor Return Value type( test_diagnosis_t ) private elemental module function greater_than_real(actual, expected_floor) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected_floor Return Value type( test_diagnosis_t ) public        interface operator(.greaterThanOrEqualTo.) private elemental module function greater_than_or_equal_to_double_precision(actual, expected_min) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected_min Return Value type( test_diagnosis_t ) private elemental module function greater_than_or_equal_to_integer(actual, expected_min) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_min Return Value type( test_diagnosis_t ) private elemental module function greater_than_or_equal_to_real(actual, expected_min) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected_min Return Value type( test_diagnosis_t ) public        interface operator(.isAfter.) private elemental module function reverse_alphabetical_character_vs_character(lhs, rhs) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( test_diagnosis_t ) private elemental module function reverse_alphabetical_character_vs_string(lhs, rhs) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs type( string_t ), intent(in) :: rhs Return Value type( test_diagnosis_t ) private elemental module function reverse_alphabetical_string_vs_character(lhs, rhs) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( test_diagnosis_t ) private elemental module function reverse_alphabetical_string_vs_string(lhs, rhs) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lhs type( string_t ), intent(in) :: rhs Return Value type( test_diagnosis_t ) public        interface operator(.isAtLeast.) private elemental module function greater_than_or_equal_to_integer(actual, expected_min) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_min Return Value type( test_diagnosis_t ) private elemental module function greater_than_or_equal_to_real(actual, expected_min) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected_min Return Value type( test_diagnosis_t ) private elemental module function greater_than_or_equal_to_double_precision(actual, expected_min) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected_min Return Value type( test_diagnosis_t ) public        interface operator(.isAtMost.) private elemental module function less_than_or_equal_to_integer(actual, expected_max) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_max Return Value type( test_diagnosis_t ) private elemental module function less_than_or_equal_to_real(actual, expected_max) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected_max Return Value type( test_diagnosis_t ) private elemental module function less_than_or_equal_to_double_precision(actual, expected_max) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected_max Return Value type( test_diagnosis_t ) public        interface operator(.isBefore.) private elemental module function alphabetical_character_vs_character(lhs, rhs) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( test_diagnosis_t ) private elemental module function alphabetical_character_vs_string(lhs, rhs) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs type( string_t ), intent(in) :: rhs Return Value type( test_diagnosis_t ) private elemental module function alphabetical_string_vs_character(lhs, rhs) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( test_diagnosis_t ) private elemental module function alphabetical_string_vs_string(lhs, rhs) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lhs type( string_t ), intent(in) :: rhs Return Value type( test_diagnosis_t ) public        interface operator(.lessThan.) private elemental module function less_than_double(actual, expected_ceiling) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected_ceiling Return Value type( test_diagnosis_t ) private elemental module function less_than_integer(actual, expected_ceiling) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_ceiling Return Value type( test_diagnosis_t ) private elemental module function less_than_real(actual, expected_ceiling) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected_ceiling Return Value type( test_diagnosis_t ) public        interface operator(.lessThanOrEqualTo.) private elemental module function less_than_or_equal_to_double_precision(actual, expected_max) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected_max Return Value type( test_diagnosis_t ) private elemental module function less_than_or_equal_to_integer(actual, expected_max) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_max Return Value type( test_diagnosis_t ) private elemental module function less_than_or_equal_to_real(actual, expected_max) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected_max Return Value type( test_diagnosis_t ) public        interface operator(.within.) private elemental module function within_double_precision(operands, tolerance) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( operands_t (double_precision)), intent(in) :: operands double precision, intent(in) :: tolerance Return Value type( test_diagnosis_t ) private elemental module function within_real(operands, tolerance) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( operands_t ), intent(in) :: operands real, intent(in) :: tolerance Return Value type( test_diagnosis_t ) public        interface operator(.withinFraction.) private elemental module function within_double_precision_fraction(operands, fractional_tolerance) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( operands_t (double_precision)), intent(in) :: operands double precision, intent(in) :: fractional_tolerance Return Value type( test_diagnosis_t ) private elemental module function within_real_fraction(operands, fractional_tolerance) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( operands_t ), intent(in) :: operands real, intent(in) :: fractional_tolerance Return Value type( test_diagnosis_t ) public        interface operator(.withinPercentage.) private elemental module function within_double_precision_percentage(operands, percentage_tolerance) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( operands_t (double_precision)), intent(in) :: operands double precision, intent(in) :: percentage_tolerance Return Value type( test_diagnosis_t ) private elemental module function within_real_percentage(operands, percentage_tolerance) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( operands_t ), intent(in) :: operands real, intent(in) :: percentage_tolerance Return Value type( test_diagnosis_t ) public        interface operator(//) private elemental module function append_character_if_test_failed(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( test_diagnosis_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( test_diagnosis_t ) private elemental module function append_string_if_test_failed(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( test_diagnosis_t ), intent(in) :: lhs type( string_t ), intent(in) :: rhs Return Value type( test_diagnosis_t ) public        interface test_diagnosis_t private elemental module function construct_from_character(test_passed, diagnostics_string) result(test_diagnosis) Implementation → The result is a test_diagnosis_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name logical, intent(in) :: test_passed character(len=*), intent(in) :: diagnostics_string Return Value type( test_diagnosis_t ) private elemental module function construct_from_string_t(test_passed, diagnostics_string) result(test_diagnosis) Implementation → The result is a test_diagnosis_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name logical, intent(in) :: test_passed type( string_t ), intent(in) :: diagnostics_string Return Value type( test_diagnosis_t ) interface private elemental module function diagnostics_string(self) result(string_) Implementation → The result is a string describing the condition(s) that caused a test failure Arguments Type Intent Optional Attributes Name class( test_diagnosis_t ), intent(in) :: self Return Value type( string_t ) interface private elemental module function test_passed(self) result(passed) Implementation → The result is .true. if the test passed and false otherwise Arguments Type Intent Optional Attributes Name class( test_diagnosis_t ), intent(in) :: self Return Value logical Abstract Interfaces abstract interface public  function diagnosis_function_i() result(test_diagnosis) Arguments None Return Value type( test_diagnosis_t ) Derived Types type, public :: test_diagnosis_t Encapsulate test outcome and diagnostic information Components Type Visibility Attributes Name Initial character(len=:), private, allocatable :: diagnostics_string_ logical, private :: test_passed_ = .false. Constructor private\n\n                    elemental, module\n                    function construct_from_character (test_passed, diagnostics_string) The result is a test_diagnosis_t object with the components defined by the dummy arguments private\n\n                    elemental, module\n                    function construct_from_string_t (test_passed, diagnostics_string) The result is a test_diagnosis_t object with the components defined by the dummy arguments Type-Bound Procedures procedure, public, non_overridable :: diagnostics_string procedure, public, non_overridable :: test_passed type, private :: double_precision_operands_t Components Type Visibility Attributes Name Initial double precision, public :: actual double precision, public :: expected type, private :: operands_t Components Type Visibility Attributes Name Initial real(kind=k), public :: actual real(kind=k), public :: expected integer, public, kind :: k = default_real type, private :: operands_t Components Type Visibility Attributes Name Initial real, public :: actual real, public :: expected","tags":"","url":"module/julienne_test_diagnosis_m.html"},{"title":"julienne_command_line_m – Julienne","text":"return command line argument information Used by Descendants: julienne_command_line_s module~~julienne_command_line_m~~UsedByGraph module~julienne_command_line_m julienne_command_line_m module~julienne_command_line_s julienne_command_line_s module~julienne_command_line_s->module~julienne_command_line_m module~julienne_m julienne_m module~julienne_m->module~julienne_command_line_m module~julienne_test_m julienne_test_m module~julienne_m->module~julienne_test_m module~julienne_test_fixture_m julienne_test_fixture_m module~julienne_m->module~julienne_test_fixture_m module~julienne_test_harness_m julienne_test_harness_m module~julienne_m->module~julienne_test_harness_m module~julienne_test_description_s julienne_test_description_s module~julienne_test_description_s->module~julienne_command_line_m module~julienne_test_harness_s julienne_test_harness_s module~julienne_test_harness_s->module~julienne_command_line_m module~julienne_test_harness_s->module~julienne_test_harness_m module~julienne_test_m->module~julienne_command_line_m module~julienne_test_fixture_m->module~julienne_test_m module~julienne_test_s julienne_test_s module~julienne_test_s->module~julienne_test_m module~julienne_test_suite_s julienne_test_suite_s module~julienne_test_suite_s->module~julienne_m program~assertions assertions program~assertions->module~julienne_m program~check_for_command_line_argument check_for_command_line_argument program~check_for_command_line_argument->module~julienne_m program~get_command_line_flag_value get_command_line_flag_value program~get_command_line_flag_value->module~julienne_m program~scaffold scaffold program~scaffold->module~julienne_m module~julienne_test_fixture_s julienne_test_fixture_s module~julienne_test_fixture_s->module~julienne_test_fixture_m module~julienne_test_harness_m->module~julienne_test_fixture_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces interface private module function argument_present(acceptable_argument) result(found) Implementation → result is .true. only if a command-line argument matches an element of this function's argument Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: acceptable_argument (:) sample list: [character(len=len( )):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"]\nwhere dashes support Linux/macOS, slashes support Windows, and must be replaced\nby the longest list element (\"--benchmark\" above) Return Value logical interface private module function flag_value(flag) Implementation → result = { the value passed immediately after a command-line flag if the flag is present or\n         { an empty string otherwise. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: flag Return Value character(len=:), allocatable Derived Types type, public :: command_line_t Type-Bound Procedures procedure, public, nopass :: argument_present procedure, public, nopass :: flag_value","tags":"","url":"module/julienne_command_line_m.html"},{"title":"julienne_string_m – Julienne","text":"Uses iso_c_binding module~~julienne_string_m~~UsesGraph module~julienne_string_m julienne_string_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by Descendants: julienne_string_s module~~julienne_string_m~~UsedByGraph module~julienne_string_m julienne_string_m module~julienne_file_m julienne_file_m module~julienne_file_m->module~julienne_string_m module~julienne_m julienne_m module~julienne_m->module~julienne_string_m module~julienne_m->module~julienne_file_m module~julienne_one_image_prints_m julienne_one_image_prints_m module~julienne_m->module~julienne_one_image_prints_m module~julienne_test_description_m julienne_test_description_m module~julienne_m->module~julienne_test_description_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_m->module~julienne_test_diagnosis_m module~julienne_test_result_m julienne_test_result_m module~julienne_m->module~julienne_test_result_m module~julienne_test_suite_m julienne_test_suite_m module~julienne_m->module~julienne_test_suite_m module~julienne_assert_m julienne_assert_m module~julienne_m->module~julienne_assert_m module~julienne_test_m julienne_test_m module~julienne_m->module~julienne_test_m module~julienne_test_fixture_m julienne_test_fixture_m module~julienne_m->module~julienne_test_fixture_m module~julienne_test_harness_m julienne_test_harness_m module~julienne_m->module~julienne_test_harness_m module~julienne_one_image_prints_m->module~julienne_string_m module~julienne_string_s julienne_string_s module~julienne_string_s->module~julienne_string_m module~julienne_string_s->module~julienne_test_diagnosis_m module~julienne_string_s->module~julienne_assert_m module~julienne_test_description_m->module~julienne_string_m module~julienne_test_description_m->module~julienne_test_diagnosis_m module~julienne_test_description_m->module~julienne_test_result_m module~julienne_test_diagnosis_m->module~julienne_string_m module~julienne_test_diagnosis_s julienne_test_diagnosis_s module~julienne_test_diagnosis_s->module~julienne_string_m module~julienne_test_diagnosis_s->module~julienne_test_diagnosis_m module~julienne_test_harness_s julienne_test_harness_s module~julienne_test_harness_s->module~julienne_string_m module~julienne_test_harness_s->module~julienne_one_image_prints_m module~julienne_test_harness_s->module~julienne_test_harness_m module~julienne_test_result_m->module~julienne_string_m module~julienne_test_result_m->module~julienne_test_diagnosis_m module~julienne_test_s julienne_test_s module~julienne_test_s->module~julienne_string_m module~julienne_test_s->module~julienne_one_image_prints_m module~julienne_test_s->module~julienne_test_description_m module~julienne_test_s->module~julienne_test_m module~julienne_test_suite_m->module~julienne_string_m module~julienne_test_suite_m->module~julienne_file_m program~create_markdown_table create_markdown_table program~create_markdown_table->module~julienne_string_m module~julienne_assert_m->module~julienne_test_diagnosis_m module~julienne_bin_s julienne_bin_s module~julienne_bin_s->module~julienne_test_diagnosis_m module~julienne_bin_s->module~julienne_assert_m module~julienne_file_s julienne_file_s module~julienne_file_s->module~julienne_file_m module~julienne_one_image_prints_s julienne_one_image_prints_s module~julienne_one_image_prints_s->module~julienne_one_image_prints_m module~julienne_test_description_s julienne_test_description_s module~julienne_test_description_s->module~julienne_test_description_m module~julienne_test_description_s->module~julienne_assert_m module~julienne_test_m->module~julienne_test_description_m module~julienne_test_m->module~julienne_test_result_m module~julienne_test_result_s julienne_test_result_s module~julienne_test_result_s->module~julienne_test_result_m module~julienne_test_suite_s julienne_test_suite_s module~julienne_test_suite_s->module~julienne_m module~julienne_test_suite_s->module~julienne_test_suite_m program~assertions assertions program~assertions->module~julienne_m program~check_for_command_line_argument check_for_command_line_argument program~check_for_command_line_argument->module~julienne_m program~get_command_line_flag_value get_command_line_flag_value program~get_command_line_flag_value->module~julienne_m program~scaffold scaffold program~scaffold->module~julienne_m module~julienne_assert_s julienne_assert_s module~julienne_assert_s->module~julienne_assert_m module~julienne_test_fixture_m->module~julienne_test_m module~julienne_test_fixture_s julienne_test_fixture_s module~julienne_test_fixture_s->module~julienne_test_fixture_m module~julienne_test_harness_m->module~julienne_test_fixture_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces interface public pure module function array_of_strings(delimited_strings, delimiter) result(strings_array) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: delimited_strings character(len=*), intent(in) :: delimiter Return Value type( string_t ), allocatable, (:) public        interface operator(.cat.) private pure module function concatenate_elements(strings) result(concatenated_strings) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) Return Value type( string_t ) public        interface operator(.csv.) private pure module function characters_with_comma_separator(strings) result(csv) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: strings (:) Return Value type( string_t ) private pure module function strings_with_comma_separator(strings) result(csv) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) Return Value type( string_t ) public        interface operator(.separatedBy.) private pure module function strings_with_character_separator(strings, separator) result(sv) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) character(len=*), intent(in) :: separator Return Value type( string_t ) private pure module function strings_with_string_t_separator(strings, separator) result(sv) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) type( string_t ), intent(in) :: separator Return Value type( string_t ) private pure module function characters_with_character_separator(strings, separator) result(sv) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: strings (:) character(len=*), intent(in) :: separator Return Value type( string_t ) private pure module function characters_with_string_separator(strings, separator) result(sv) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: strings (:) type( string_t ), intent(in) :: separator Return Value type( string_t ) public        interface operator(.sv.) private pure module function characters_with_character_separator(strings, separator) result(sv) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: strings (:) character(len=*), intent(in) :: separator Return Value type( string_t ) private pure module function characters_with_string_separator(strings, separator) result(sv) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: strings (:) type( string_t ), intent(in) :: separator Return Value type( string_t ) private pure module function strings_with_character_separator(strings, separator) result(sv) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) character(len=*), intent(in) :: separator Return Value type( string_t ) private pure module function strings_with_string_t_separator(strings, separator) result(sv) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) type( string_t ), intent(in) :: separator Return Value type( string_t ) public        interface string_t private elemental module function from_characters(string) result(new_string) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string Return Value type( string_t ) private elemental module function from_default_complex(z) result(string) Implementation → Arguments Type Intent Optional Attributes Name complex, intent(in) :: z Return Value type( string_t ) private elemental module function from_default_integer(i) result(string) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: i Return Value type( string_t ) private elemental module function from_default_logical(b) result(string) Implementation → Arguments Type Intent Optional Attributes Name logical, intent(in) :: b Return Value type( string_t ) private elemental module function from_default_real(x) result(string) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: x Return Value type( string_t ) private elemental module function from_double_precision(x) result(string) Implementation → Arguments Type Intent Optional Attributes Name double precision, intent(in) :: x Return Value type( string_t ) private elemental module function from_double_precision_complex(z) result(string) Implementation → Arguments Type Intent Optional Attributes Name complex(kind=kind(1D0)), intent(in) :: z Return Value type( string_t ) private elemental module function from_integer_c_size_t(i) result(string) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_size_t), intent(in) :: i Return Value type( string_t ) private elemental module function from_logical_c_bool(b) result(string) Implementation → Arguments Type Intent Optional Attributes Name logical(kind=c_bool), intent(in) :: b Return Value type( string_t ) interface private pure module function as_character(self) result(raw_string) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value character(len=:), allocatable interface private elemental module subroutine assign_character_to_string_t(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(inout) :: lhs character(len=*), intent(in) :: rhs interface private pure module subroutine assign_string_t_to_character(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=:), intent(out), allocatable :: lhs class( string_t ), intent(in) :: rhs interface private elemental module function base_name(self) result(base) Implementation → result contains all characters in file_name before the last dot (.) Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) interface private elemental module function bracket(self, opening, closing) result(bracketed_self) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in), optional :: opening character(len=*), intent(in), optional :: closing Return Value type( string_t ) interface private elemental module function character_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t ) interface private elemental module function character_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical interface private elemental module function character_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical interface private elemental module function file_extension(self) result(extension) Implementation → result contains all characters in file_name after the last dot (.) Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) interface private pure module function get_character_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key character(len=*), intent(in) :: mold Return Value character(len=:), allocatable interface private pure module function get_character_with_string_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key character(len=*), intent(in) :: mold Return Value character(len=:), allocatable interface private pure module function get_double_precision(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key double precision, intent(in) :: mold Return Value double precision interface private pure module function get_double_precision_array(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key double precision, intent(in) :: mold (:) Return Value double precision, allocatable, (:) interface private pure module function get_double_precision_array_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key double precision, intent(in) :: mold (:) Return Value double precision, allocatable, (:) interface private pure module function get_double_precision_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key double precision, intent(in) :: mold Return Value double precision interface private pure module function get_integer(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold Return Value integer interface private pure module function get_integer_array(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold (:) Return Value integer, allocatable, (:) interface private pure module function get_integer_array_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key integer, intent(in) :: mold (:) Return Value integer, allocatable, (:) interface private pure module function get_integer_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key integer, intent(in) :: mold Return Value integer interface private elemental module function get_json_key(self) result(unquoted_key) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) interface private pure module function get_logical(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key logical, intent(in) :: mold Return Value logical interface private pure module function get_logical_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key logical, intent(in) :: mold Return Value logical interface private pure module function get_real(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold Return Value real interface private pure module function get_real_array(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold (:) Return Value real, allocatable, (:) interface private pure module function get_real_array_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key real, intent(in) :: mold (:) Return Value real, allocatable, (:) interface private pure module function get_real_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key real, intent(in) :: mold Return Value real interface private pure module function get_string_t_array_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key type( string_t ), intent(in) :: mold (:) Return Value type( string_t ), allocatable, (:) interface private pure module function get_string_t_array_with_string_t_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self type( string_t ), intent(in) :: key type( string_t ), intent(in) :: mold (:) Return Value type( string_t ), allocatable, (:) interface private pure module function get_string_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key class( string_t ), intent(in) :: mold Return Value type( string_t ) interface private pure module function get_string_with_string_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key class( string_t ), intent(in) :: mold Return Value type( string_t ) interface private elemental module function is_allocated(self) result(string_allocated) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value logical interface private elemental module function string_t_cat_character(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( string_t ) interface private elemental module function string_t_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t ) interface private elemental module function string_t_eq_character(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical interface private elemental module function string_t_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical interface private elemental module function string_t_ne_character(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical interface private elemental module function string_t_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical Derived Types type, public :: string_t Components Type Visibility Attributes Name Initial character(len=:), private, allocatable :: string_ Constructor private\n\n                    elemental, module\n                    function from_characters (string) private\n\n                    elemental, module\n                    function from_default_complex (z) private\n\n                    elemental, module\n                    function from_default_integer (i) private\n\n                    elemental, module\n                    function from_default_logical (b) private\n\n                    elemental, module\n                    function from_default_real (x) private\n\n                    elemental, module\n                    function from_double_precision (x) private\n\n                    elemental, module\n                    function from_double_precision_complex (z) private\n\n                    elemental, module\n                    function from_integer_c_size_t (i) private\n\n                    elemental, module\n                    function from_logical_c_bool (b) Type-Bound Procedures procedure, public :: as_character generic, public :: assignment(= ) => assign_string_t_to_character , assign_character_to_string_t procedure, public :: base_name procedure, public :: bracket procedure, public :: file_extension procedure, public :: get_json_key generic, public :: get_json_value => get_string_with_string_key , get_string_with_character_key , get_character_with_string_key , get_character_with_character_key , get_string_t_array_with_character_key , get_string_t_array_with_string_t_key , get_real , get_real_with_character_key , get_logical , get_logical_with_character_key , get_real_array , get_real_array_with_character_key , get_integer_array , get_integer_array_with_character_key , get_integer , get_integer_with_character_key , get_double_precision , get_double_precision_with_character_key , get_double_precision_array , get_double_precision_array_with_character_key procedure, public :: is_allocated generic, public :: operator(//) => string_t_cat_string_t , string_t_cat_character , character_cat_string_t generic, public :: operator(/=) => string_t_ne_string_t , string_t_ne_character , character_ne_string_t generic, public :: operator(==) => string_t_eq_string_t , string_t_eq_character , character_eq_string_t generic, public :: string => as_character procedure, private :: assign_character_to_string_t procedure, private, pass(rhs) :: assign_string_t_to_character procedure, private, pass(rhs) :: character_cat_string_t procedure, private, pass(rhs) :: character_eq_string_t procedure, private, pass(rhs) :: character_ne_string_t procedure, private :: get_character_with_character_key procedure, private :: get_character_with_string_key procedure, private :: get_double_precision procedure, private :: get_double_precision_array procedure, private :: get_double_precision_array_with_character_key procedure, private :: get_double_precision_with_character_key procedure, private :: get_integer procedure, private :: get_integer_array procedure, private :: get_integer_array_with_character_key procedure, private :: get_integer_with_character_key procedure, private :: get_logical procedure, private :: get_logical_with_character_key procedure, private :: get_real procedure, private :: get_real_array procedure, private :: get_real_array_with_character_key procedure, private :: get_real_with_character_key procedure, private :: get_string_t_array_with_character_key procedure, private :: get_string_t_array_with_string_t_key procedure, private :: get_string_with_character_key procedure, private :: get_string_with_string_key procedure, private :: string_t_cat_character procedure, private :: string_t_cat_string_t procedure, private :: string_t_eq_character procedure, private :: string_t_eq_string_t procedure, private :: string_t_ne_character procedure, private :: string_t_ne_string_t","tags":"","url":"module/julienne_string_m.html"},{"title":"julienne_formats_m – Julienne","text":"Useful strings for formatting print and write statements Used by Descendants: julienne_formats_s module~~julienne_formats_m~~UsedByGraph module~julienne_formats_m julienne_formats_m module~julienne_formats_s julienne_formats_s module~julienne_formats_s->module~julienne_formats_m module~julienne_m julienne_m module~julienne_m->module~julienne_formats_m module~julienne_test_suite_s julienne_test_suite_s module~julienne_test_suite_s->module~julienne_m program~assertions assertions program~assertions->module~julienne_m program~check_for_command_line_argument check_for_command_line_argument program~check_for_command_line_argument->module~julienne_m program~get_command_line_flag_value get_command_line_flag_value program~get_command_line_flag_value->module~julienne_m program~scaffold scaffold program~scaffold->module~julienne_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial character(len=*), public, parameter :: cscv = \"(*('(',G25.20,',',G25.20,')',:,',')))\" comma-separated complex values character(len=*), public, parameter :: csv = \"(*(G25.20,:,','))\" comma-separated values Interfaces interface public pure module function separated_values(separator, mold) result(format_string) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: separator class(*), intent(in) :: mold (..) Return Value character(len=:), allocatable","tags":"","url":"module/julienne_formats_m.html"},{"title":"julienne_test_result_m – Julienne","text":"Define an abstraction for describing test results the test description and,\nif the test was not skipped, then also a test diagnosis. Uses julienne_string_m julienne_test_diagnosis_m module~~julienne_test_result_m~~UsesGraph module~julienne_test_result_m julienne_test_result_m module~julienne_string_m julienne_string_m module~julienne_test_result_m->module~julienne_string_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_test_result_m->module~julienne_test_diagnosis_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding module~julienne_test_diagnosis_m->module~julienne_string_m module~julienne_test_diagnosis_m->iso_c_binding Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by Descendants: julienne_test_result_s module~~julienne_test_result_m~~UsedByGraph module~julienne_test_result_m julienne_test_result_m module~julienne_m julienne_m module~julienne_m->module~julienne_test_result_m module~julienne_test_description_m julienne_test_description_m module~julienne_m->module~julienne_test_description_m module~julienne_test_m julienne_test_m module~julienne_m->module~julienne_test_m module~julienne_test_fixture_m julienne_test_fixture_m module~julienne_m->module~julienne_test_fixture_m module~julienne_test_harness_m julienne_test_harness_m module~julienne_m->module~julienne_test_harness_m module~julienne_test_description_m->module~julienne_test_result_m module~julienne_test_m->module~julienne_test_result_m module~julienne_test_m->module~julienne_test_description_m module~julienne_test_result_s julienne_test_result_s module~julienne_test_result_s->module~julienne_test_result_m module~julienne_test_description_s julienne_test_description_s module~julienne_test_description_s->module~julienne_test_description_m module~julienne_test_fixture_m->module~julienne_test_m module~julienne_test_s julienne_test_s module~julienne_test_s->module~julienne_test_description_m module~julienne_test_s->module~julienne_test_m module~julienne_test_suite_s julienne_test_suite_s module~julienne_test_suite_s->module~julienne_m program~assertions assertions program~assertions->module~julienne_m program~check_for_command_line_argument check_for_command_line_argument program~check_for_command_line_argument->module~julienne_m program~get_command_line_flag_value get_command_line_flag_value program~get_command_line_flag_value->module~julienne_m program~scaffold scaffold program~scaffold->module~julienne_m module~julienne_test_fixture_s julienne_test_fixture_s module~julienne_test_fixture_s->module~julienne_test_fixture_m module~julienne_test_harness_m->module~julienne_test_fixture_m module~julienne_test_harness_s julienne_test_harness_s module~julienne_test_harness_s->module~julienne_test_harness_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces public        interface test_result_t private elemental module function construct_from_character(description, diagnosis) result(test_result) Implementation → The result is a test_result_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description type( test_diagnosis_t ), intent(in), optional :: diagnosis Return Value type( test_result_t ) private elemental module function construct_from_string(description, diagnosis) result(test_result) Implementation → The result is a test_result_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description type( test_diagnosis_t ), intent(in), optional :: diagnosis Return Value type( test_result_t ) interface private pure module function characterize(self) result(characterization) Implementation → The result is a character description of the test and its outcome Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value character(len=:), allocatable interface private elemental module function description_contains_characters(self, substring) result(substring_found) Implementation → The result is true if and only if the test description contains the substring Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical interface private elemental module function description_contains_string(self, substring) result(substring_found) Implementation → The result is true if and only if the test description contains the substring Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical interface private impure elemental module function passed(self) result(test_passed) Implementation → The result is true if and only if the test passed on all images Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value logical interface private impure elemental module function skipped(self) result(test_skipped) Implementation → The result is true if and only if the test result contains no diagnosis on any image Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value logical Derived Types type, public :: test_result_t Encapsulate a test-description string and optionally a test diagnosis.\nThis type is similar to test_description_t and test_diagnosis_t type but\n1. Doesn't need the former's procedure(diagnosis_function_i) component and\n2. Allocates an instance of the latter if and only if the test wasn't skipped. Components Type Visibility Attributes Name Initial type( string_t ), private :: description_ type( test_diagnosis_t ), private, allocatable :: diagnosis_ Constructor private\n\n                    elemental, module\n                    function construct_from_character (description, diagnosis) The result is a test_result_t object with the components defined by the dummy arguments private\n\n                    elemental, module\n                    function construct_from_string (description, diagnosis) The result is a test_result_t object with the components defined by the dummy arguments Type-Bound Procedures procedure, public :: characterize generic, public :: description_contains => description_contains_string , description_contains_characters procedure, public :: passed procedure, public :: skipped procedure, private :: description_contains_characters procedure, private :: description_contains_string","tags":"","url":"module/julienne_test_result_m.html"},{"title":"julienne_bin_m – Julienne","text":"distribute item numbers across bins such that the number of items differs by at most 1 between any two bins Used by Descendants: julienne_bin_s module~~julienne_bin_m~~UsedByGraph module~julienne_bin_m julienne_bin_m module~julienne_bin_s julienne_bin_s module~julienne_bin_s->module~julienne_bin_m module~julienne_m julienne_m module~julienne_m->module~julienne_bin_m module~julienne_test_suite_s julienne_test_suite_s module~julienne_test_suite_s->module~julienne_m program~assertions assertions program~assertions->module~julienne_m program~check_for_command_line_argument check_for_command_line_argument program~check_for_command_line_argument->module~julienne_m program~get_command_line_flag_value get_command_line_flag_value program~get_command_line_flag_value->module~julienne_m program~scaffold scaffold program~scaffold->module~julienne_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces public        interface bin_t private elemental module function construct(num_items, num_bins, bin_number) result(bin) Implementation → the result is a bin associated with a range of item numbers Arguments Type Intent Optional Attributes Name integer, intent(in) :: num_items integer, intent(in) :: num_bins integer, intent(in) :: bin_number Return Value type( bin_t ) interface private elemental module function first(self) result(first_item_number) Implementation → the result is the first item number associated with the given bin Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer interface private elemental module function last(self) result(last_item_number) Implementation → the result is the last item number associated with the given bin Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer Derived Types type, public :: bin_t encapsulate a range of item numbers associated with a bin Components Type Visibility Attributes Name Initial integer, private :: first_ integer, private :: last_ Constructor private\n\n                    elemental, module\n                    function construct (num_items, num_bins, bin_number) the result is a bin associated with a range of item numbers Type-Bound Procedures procedure, public :: first procedure, public :: last","tags":"","url":"module/julienne_bin_m.html"},{"title":"julienne_test_description_m – Julienne","text":"Define an abstraction for describing test intentions and test functions Uses julienne_string_m julienne_test_diagnosis_m julienne_test_result_m module~~julienne_test_description_m~~UsesGraph module~julienne_test_description_m julienne_test_description_m module~julienne_string_m julienne_string_m module~julienne_test_description_m->module~julienne_string_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_test_description_m->module~julienne_test_diagnosis_m module~julienne_test_result_m julienne_test_result_m module~julienne_test_description_m->module~julienne_test_result_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding module~julienne_test_diagnosis_m->module~julienne_string_m module~julienne_test_diagnosis_m->iso_c_binding module~julienne_test_result_m->module~julienne_string_m module~julienne_test_result_m->module~julienne_test_diagnosis_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by Descendants: julienne_test_description_s module~~julienne_test_description_m~~UsedByGraph module~julienne_test_description_m julienne_test_description_m module~julienne_m julienne_m module~julienne_m->module~julienne_test_description_m module~julienne_test_m julienne_test_m module~julienne_m->module~julienne_test_m module~julienne_test_fixture_m julienne_test_fixture_m module~julienne_m->module~julienne_test_fixture_m module~julienne_test_harness_m julienne_test_harness_m module~julienne_m->module~julienne_test_harness_m module~julienne_test_description_s julienne_test_description_s module~julienne_test_description_s->module~julienne_test_description_m module~julienne_test_m->module~julienne_test_description_m module~julienne_test_s julienne_test_s module~julienne_test_s->module~julienne_test_description_m module~julienne_test_s->module~julienne_test_m module~julienne_test_fixture_m->module~julienne_test_m module~julienne_test_suite_s julienne_test_suite_s module~julienne_test_suite_s->module~julienne_m program~assertions assertions program~assertions->module~julienne_m program~check_for_command_line_argument check_for_command_line_argument program~check_for_command_line_argument->module~julienne_m program~get_command_line_flag_value get_command_line_flag_value program~get_command_line_flag_value->module~julienne_m program~scaffold scaffold program~scaffold->module~julienne_m module~julienne_test_fixture_s julienne_test_fixture_s module~julienne_test_fixture_s->module~julienne_test_fixture_m module~julienne_test_harness_m->module~julienne_test_fixture_m module~julienne_test_harness_s julienne_test_harness_s module~julienne_test_harness_s->module~julienne_test_harness_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces interface public module function filter(test_descriptions, subject) result(filtered_test_descriptions) Implementation → The result is .true. an array of test_description_t objects whose description_ or contains the substring specified \nby command-line --contains flag if present, or all test_descriptions if the subject contains the same substring Arguments Type Intent Optional Attributes Name type( test_description_t ), intent(in) :: test_descriptions (:) character(len=*), intent(in) :: subject Return Value type( test_description_t ), allocatable, (:) public        interface test_description_t private module function construct_from_characters(description, diagnosis_function) result(test_description) Implementation → The result is a test_description_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description procedure( diagnosis_function_i ), intent(in), optional, pointer :: diagnosis_function Return Value type( test_description_t ) private module function construct_from_string(description, diagnosis_function) result(test_description) Implementation → The result is a test_description_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description procedure( diagnosis_function_i ), intent(in), optional, pointer :: diagnosis_function Return Value type( test_description_t ) interface private elemental module function contains_characters(self, substring) result(match) Implementation → The result is .true. if the test description includes the value of substring Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical interface private elemental module function contains_string_t(self, substring) result(match) Implementation → The result is .true. if the test description includes the value of substring Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical interface private elemental module function equals(lhs, rhs) result(lhs_eq_rhs) Implementation → The result is .true. if the components of the lhs & rhs are equal Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: lhs class( test_description_t ), intent(in) :: rhs Return Value logical interface private impure elemental module function run(self) result(test_result) Implementation → The result encapsulates the test description and test outcome Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self Return Value type( test_result_t ) Derived Types type, public :: test_description_t Encapsulate test descriptions and test-functions Components Type Visibility Attributes Name Initial character(len=:), private, allocatable :: description_ procedure( diagnosis_function_i ), private, pointer, nopass :: diagnosis_function_ => null() Constructor private\n\n                    module\n                    function construct_from_characters (description, diagnosis_function) The result is a test_description_t object with the components defined by the dummy arguments private\n\n                    module\n                    function construct_from_string (description, diagnosis_function) The result is a test_description_t object with the components defined by the dummy arguments Type-Bound Procedures generic, public :: contains_text => contains_string_t , contains_characters generic, public :: operator(==) => equals procedure, public :: run procedure, private :: contains_characters procedure, private :: contains_string_t procedure, private :: equals","tags":"","url":"module/julienne_test_description_m.html"},{"title":"julienne_m – Julienne","text":"Global aggregation of all public entities Uses julienne_test_m julienne_test_fixture_m julienne_string_m julienne_test_description_m julienne_github_ci_m julienne_formats_m julienne_test_suite_m julienne_test_diagnosis_m julienne_test_result_m julienne_assert_m julienne_test_harness_m julienne_file_m julienne_one_image_prints_m julienne_bin_m julienne_command_line_m module~~julienne_m~~UsesGraph module~julienne_m julienne_m module~julienne_assert_m julienne_assert_m module~julienne_m->module~julienne_assert_m module~julienne_bin_m julienne_bin_m module~julienne_m->module~julienne_bin_m module~julienne_command_line_m julienne_command_line_m module~julienne_m->module~julienne_command_line_m module~julienne_file_m julienne_file_m module~julienne_m->module~julienne_file_m module~julienne_formats_m julienne_formats_m module~julienne_m->module~julienne_formats_m module~julienne_github_ci_m julienne_github_ci_m module~julienne_m->module~julienne_github_ci_m module~julienne_one_image_prints_m julienne_one_image_prints_m module~julienne_m->module~julienne_one_image_prints_m module~julienne_string_m julienne_string_m module~julienne_m->module~julienne_string_m module~julienne_test_description_m julienne_test_description_m module~julienne_m->module~julienne_test_description_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_m->module~julienne_test_diagnosis_m module~julienne_test_fixture_m julienne_test_fixture_m module~julienne_m->module~julienne_test_fixture_m module~julienne_test_harness_m julienne_test_harness_m module~julienne_m->module~julienne_test_harness_m module~julienne_test_m julienne_test_m module~julienne_m->module~julienne_test_m module~julienne_test_result_m julienne_test_result_m module~julienne_m->module~julienne_test_result_m module~julienne_test_suite_m julienne_test_suite_m module~julienne_m->module~julienne_test_suite_m module~julienne_assert_m->module~julienne_test_diagnosis_m module~julienne_file_m->module~julienne_string_m module~julienne_one_image_prints_m->module~julienne_string_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding module~julienne_test_description_m->module~julienne_string_m module~julienne_test_description_m->module~julienne_test_diagnosis_m module~julienne_test_description_m->module~julienne_test_result_m module~julienne_test_diagnosis_m->module~julienne_string_m module~julienne_test_diagnosis_m->iso_c_binding module~julienne_test_fixture_m->module~julienne_test_m module~julienne_test_harness_m->module~julienne_test_fixture_m module~julienne_test_m->module~julienne_command_line_m module~julienne_test_m->module~julienne_test_description_m module~julienne_test_m->module~julienne_test_result_m module~julienne_user_defined_collectives_m julienne_user_defined_collectives_m module~julienne_test_m->module~julienne_user_defined_collectives_m module~julienne_test_result_m->module~julienne_string_m module~julienne_test_result_m->module~julienne_test_diagnosis_m module~julienne_test_suite_m->module~julienne_file_m module~julienne_test_suite_m->module~julienne_string_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~julienne_m~~UsedByGraph module~julienne_m julienne_m module~julienne_test_suite_s julienne_test_suite_s module~julienne_test_suite_s->module~julienne_m program~assertions assertions program~assertions->module~julienne_m program~check_for_command_line_argument check_for_command_line_argument program~check_for_command_line_argument->module~julienne_m program~get_command_line_flag_value get_command_line_flag_value program~get_command_line_flag_value->module~julienne_m program~scaffold scaffold program~scaffold->module~julienne_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"module/julienne_m.html"},{"title":"julienne_github_ci_m – Julienne","text":"Detect whether a program is running in GitHub Continuous Integration (CI) Used by Descendants: julienne_github_ci_s module~~julienne_github_ci_m~~UsedByGraph module~julienne_github_ci_m julienne_github_ci_m module~julienne_github_ci_s julienne_github_ci_s module~julienne_github_ci_s->module~julienne_github_ci_m module~julienne_m julienne_m module~julienne_m->module~julienne_github_ci_m module~julienne_test_suite_s julienne_test_suite_s module~julienne_test_suite_s->module~julienne_m program~assertions assertions program~assertions->module~julienne_m program~check_for_command_line_argument check_for_command_line_argument program~check_for_command_line_argument->module~julienne_m program~get_command_line_flag_value get_command_line_flag_value program~get_command_line_flag_value->module~julienne_m program~scaffold scaffold program~scaffold->module~julienne_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces interface public module function GitHub_CI() Implementation → The result is true if the environment variable named \"CI\" is set to the string \"true\" Arguments None Return Value logical","tags":"","url":"module/julienne_github_ci_m.html"},{"title":"julienne_file_m – Julienne","text":"A representation of a file as an object Uses julienne_string_m module~~julienne_file_m~~UsesGraph module~julienne_file_m julienne_file_m module~julienne_string_m julienne_string_m module~julienne_file_m->module~julienne_string_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by Descendants: julienne_file_s module~~julienne_file_m~~UsedByGraph module~julienne_file_m julienne_file_m module~julienne_file_s julienne_file_s module~julienne_file_s->module~julienne_file_m module~julienne_m julienne_m module~julienne_m->module~julienne_file_m module~julienne_test_suite_m julienne_test_suite_m module~julienne_m->module~julienne_test_suite_m module~julienne_test_suite_m->module~julienne_file_m module~julienne_test_suite_s julienne_test_suite_s module~julienne_test_suite_s->module~julienne_m module~julienne_test_suite_s->module~julienne_test_suite_m program~assertions assertions program~assertions->module~julienne_m program~check_for_command_line_argument check_for_command_line_argument program~check_for_command_line_argument->module~julienne_m program~get_command_line_flag_value get_command_line_flag_value program~get_command_line_flag_value->module~julienne_m program~scaffold scaffold program~scaffold->module~julienne_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces public        interface file_t private module function from_file_with_character_name(file_name) result(file_object) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: file_name Return Value type( file_t ) private module function from_file_with_string_name(file_name) result(file_object) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: file_name Return Value type( file_t ) private pure module function from_lines(lines) result(file_object) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lines (:) Return Value type( file_t ) interface private pure module function lines(self) result(my_lines) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self Return Value type( string_t ), allocatable, (:) interface private impure elemental module subroutine write_to_character_file_name(self, file_name) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self character(len=*), intent(in) :: file_name interface private module subroutine write_to_output_unit(self) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self interface private impure elemental module subroutine write_to_string_file_name(self, file_name) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self type( string_t ), intent(in) :: file_name Derived Types type, public :: file_t Components Type Visibility Attributes Name Initial type( string_t ), private, allocatable :: lines_ (:) Constructor private\n\n                    module\n                    function from_file_with_character_name (file_name) private\n\n                    module\n                    function from_file_with_string_name (file_name) private\n\n                    pure, module\n                    function from_lines (lines) Type-Bound Procedures procedure, public :: lines generic, public :: write_lines => write_to_output_unit , write_to_character_file_name , write_to_string_file_name procedure, private :: write_to_character_file_name procedure, private :: write_to_output_unit procedure, private :: write_to_string_file_name","tags":"","url":"module/julienne_file_m.html"},{"title":"julienne_assert_s – Julienne","text":"Uses assert_m Ancestors: julienne_assert_m module~~julienne_assert_s~~UsesGraph module~julienne_assert_s julienne_assert_s assert_m assert_m module~julienne_assert_s->assert_m module~julienne_assert_m julienne_assert_m module~julienne_assert_s->module~julienne_assert_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_assert_m->module~julienne_test_diagnosis_m iso_c_binding iso_c_binding module~julienne_test_diagnosis_m->iso_c_binding module~julienne_string_m julienne_string_m module~julienne_test_diagnosis_m->module~julienne_string_m module~julienne_string_m->iso_c_binding Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_assert_s.html idiomatic_assert pure module subroutine idiomatic_assert(test_diagnosis, file, line, description) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: test_diagnosis character(len=*), intent(in), optional :: file integer, intent(in), optional :: line character(len=*), intent(in), optional :: description module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_assert_s.html logical_assert pure module subroutine logical_assert(assertion, file, line, description) Arguments Type Intent Optional Attributes Name logical, intent(in) :: assertion character(len=*), intent(in), optional :: file integer, intent(in), optional :: line character(len=*), intent(in), optional :: description","tags":"","url":"module/julienne_assert_s.html"},{"title":"julienne_bin_s – Julienne","text":"Uses julienne_assert_m julienne_test_diagnosis_m Ancestors: julienne_bin_m module~~julienne_bin_s~~UsesGraph module~julienne_bin_s julienne_bin_s module~julienne_assert_m julienne_assert_m module~julienne_bin_s->module~julienne_assert_m module~julienne_bin_m julienne_bin_m module~julienne_bin_s->module~julienne_bin_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_bin_s->module~julienne_test_diagnosis_m module~julienne_assert_m->module~julienne_test_diagnosis_m iso_c_binding iso_c_binding module~julienne_test_diagnosis_m->iso_c_binding module~julienne_string_m julienne_string_m module~julienne_test_diagnosis_m->module~julienne_string_m module~julienne_string_m->iso_c_binding Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_bin_s.html construct elemental module function construct(num_items, num_bins, bin_number) result(bin) Arguments Type Intent Optional Attributes Name integer, intent(in) :: num_items integer, intent(in) :: num_bins integer, intent(in) :: bin_number Return Value type( bin_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_bin_s.html first elemental module function first(self) result(first_item_number) Interface → Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_bin_s.html last elemental module function last(self) result(last_item_number) Interface → Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer","tags":"","url":"module/julienne_bin_s.html"},{"title":"julienne_one_image_prints_s – Julienne","text":"Uses Ancestors: julienne_one_image_prints_m module~~julienne_one_image_prints_s~~UsesGraph module~julienne_one_image_prints_s julienne_one_image_prints_s module~julienne_one_image_prints_m julienne_one_image_prints_m module~julienne_one_image_prints_s->module~julienne_one_image_prints_m module~julienne_string_m julienne_string_m module~julienne_one_image_prints_m->module~julienne_string_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer, private, parameter :: printing_image = 1 Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_one_image_prints_s.html print_character module subroutine print_character(character_string) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: character_string (..) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_one_image_prints_s.html print_string module subroutine print_string(string) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: string (..)","tags":"","url":"module/julienne_one_image_prints_s.html"},{"title":"julienne_test_fixture_s – Julienne","text":"Uses Ancestors: julienne_test_fixture_m module~~julienne_test_fixture_s~~UsesGraph module~julienne_test_fixture_s julienne_test_fixture_s module~julienne_test_fixture_m julienne_test_fixture_m module~julienne_test_fixture_s->module~julienne_test_fixture_m module~julienne_test_m julienne_test_m module~julienne_test_fixture_m->module~julienne_test_m module~julienne_command_line_m julienne_command_line_m module~julienne_test_m->module~julienne_command_line_m module~julienne_test_description_m julienne_test_description_m module~julienne_test_m->module~julienne_test_description_m module~julienne_test_result_m julienne_test_result_m module~julienne_test_m->module~julienne_test_result_m module~julienne_user_defined_collectives_m julienne_user_defined_collectives_m module~julienne_test_m->module~julienne_user_defined_collectives_m module~julienne_test_description_m->module~julienne_test_result_m module~julienne_string_m julienne_string_m module~julienne_test_description_m->module~julienne_string_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_test_description_m->module~julienne_test_diagnosis_m module~julienne_test_result_m->module~julienne_string_m module~julienne_test_result_m->module~julienne_test_diagnosis_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding module~julienne_test_diagnosis_m->module~julienne_string_m module~julienne_test_diagnosis_m->iso_c_binding Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_fixture_s.html component_constructor module function component_constructor(test) result(test_fixture) Arguments Type Intent Optional Attributes Name class( test_t ), intent(in) :: test Return Value type( test_fixture_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_fixture_s.html report module subroutine report(self, passes, tests, skips) Interface → Arguments Type Intent Optional Attributes Name class( test_fixture_t ), intent(in) :: self integer, intent(inout) :: passes integer, intent(inout) :: tests integer, intent(inout) :: skips","tags":"","url":"module/julienne_test_fixture_s.html"},{"title":"julienne_command_line_s – Julienne","text":"Uses Ancestors: julienne_command_line_m module~~julienne_command_line_s~~UsesGraph module~julienne_command_line_s julienne_command_line_s module~julienne_command_line_m julienne_command_line_m module~julienne_command_line_s->module~julienne_command_line_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_command_line_s.html argument_present module function argument_present(acceptable_argument) result(found) Interface → list of acceptable arguments\nsample list: [character(len=len(longest_argument)):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"]\nwhere dashes support Linux/macOS and slashes support Windows Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: acceptable_argument (:) sample list: [character(len=len( )):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"]\nwhere dashes support Linux/macOS, slashes support Windows, and must be replaced\nby the longest list element (\"--benchmark\" above) Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_command_line_s.html flag_value module function flag_value(flag) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: flag Return Value character(len=:), allocatable","tags":"","url":"module/julienne_command_line_s.html"},{"title":"julienne_test_result_s – Julienne","text":"Uses julienne_user_defined_collectives_m Ancestors: julienne_test_result_m module~~julienne_test_result_s~~UsesGraph module~julienne_test_result_s julienne_test_result_s module~julienne_test_result_m julienne_test_result_m module~julienne_test_result_s->module~julienne_test_result_m module~julienne_user_defined_collectives_m julienne_user_defined_collectives_m module~julienne_test_result_s->module~julienne_user_defined_collectives_m module~julienne_string_m julienne_string_m module~julienne_test_result_m->module~julienne_string_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_test_result_m->module~julienne_test_diagnosis_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding module~julienne_test_diagnosis_m->module~julienne_string_m module~julienne_test_diagnosis_m->iso_c_binding Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_result_s.html characterize pure module function characterize(self) result(characterization) Interface → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value character(len=:), allocatable module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_result_s.html construct_from_character elemental module function construct_from_character(description, diagnosis) result(test_result) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description type( test_diagnosis_t ), intent(in), optional :: diagnosis Return Value type( test_result_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_result_s.html construct_from_string elemental module function construct_from_string(description, diagnosis) result(test_result) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description type( test_diagnosis_t ), intent(in), optional :: diagnosis Return Value type( test_result_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_result_s.html description_contains_characters elemental module function description_contains_characters(self, substring) result(substring_found) Interface → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_result_s.html description_contains_string elemental module function description_contains_string(self, substring) result(substring_found) Interface → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_result_s.html passed impure elemental module function passed(self) result(test_passed) Interface → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_result_s.html skipped impure elemental module function skipped(self) result(test_skipped) Interface → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value logical","tags":"","url":"module/julienne_test_result_s.html"},{"title":"julienne_github_ci_s – Julienne","text":"Uses Ancestors: julienne_github_ci_m module~~julienne_github_ci_s~~UsesGraph module~julienne_github_ci_s julienne_github_ci_s module~julienne_github_ci_m julienne_github_ci_m module~julienne_github_ci_s->module~julienne_github_ci_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_github_ci_s.html GitHub_CI module function GitHub_CI() Interface → Arguments None Return Value logical","tags":"","url":"module/julienne_github_ci_s.html"},{"title":"julienne_user_defined_collectives_s – Julienne","text":"Uses Ancestors: julienne_user_defined_collectives_m module~~julienne_user_defined_collectives_s~~UsesGraph module~julienne_user_defined_collectives_s julienne_user_defined_collectives_s module~julienne_user_defined_collectives_m julienne_user_defined_collectives_m module~julienne_user_defined_collectives_s->module~julienne_user_defined_collectives_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_user_defined_collectives_s.html co_all impure elemental module subroutine co_all(boolean) Interface → Arguments Type Intent Optional Attributes Name logical, intent(inout) :: boolean","tags":"","url":"module/julienne_user_defined_collectives_s.html"},{"title":"julienne_string_s – Julienne","text":"Uses julienne_assert_m julienne_test_diagnosis_m assert_m Ancestors: julienne_string_m module~~julienne_string_s~~UsesGraph module~julienne_string_s julienne_string_s assert_m assert_m module~julienne_string_s->assert_m module~julienne_assert_m julienne_assert_m module~julienne_string_s->module~julienne_assert_m module~julienne_string_m julienne_string_m module~julienne_string_s->module~julienne_string_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_string_s->module~julienne_test_diagnosis_m module~julienne_assert_m->module~julienne_test_diagnosis_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding module~julienne_test_diagnosis_m->module~julienne_string_m module~julienne_test_diagnosis_m->iso_c_binding Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer, private, parameter :: comma_width = 1 integer, private, parameter :: default_integer_width_supremum = 11 integer, private, parameter :: default_real_width_supremum = 20 integer, private, parameter :: double_precision_width_supremum = 25 integer, private, parameter :: integer_c_size_t_width_supremum = 19 integer, private, parameter :: logical_width = 2 integer, private, parameter :: parenthesis_width = 1 integer, private, parameter :: space = 1 Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html array_of_strings pure module function array_of_strings(delimited_strings, delimiter) result(strings_array) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: delimited_strings character(len=*), intent(in) :: delimiter Return Value type( string_t ), allocatable, (:) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html as_character pure module function as_character(self) result(raw_string) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value character(len=:), allocatable module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html assign_character_to_string_t elemental module subroutine assign_character_to_string_t(lhs, rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(inout) :: lhs character(len=*), intent(in) :: rhs module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html assign_string_t_to_character pure module subroutine assign_string_t_to_character(lhs, rhs) Interface → Arguments Type Intent Optional Attributes Name character(len=:), intent(out), allocatable :: lhs class( string_t ), intent(in) :: rhs module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html base_name elemental module function base_name(self) result(base) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html bracket elemental module function bracket(self, opening, closing) result(bracketed_self) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in), optional :: opening character(len=*), intent(in), optional :: closing Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html character_cat_string_t elemental module function character_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html character_eq_string_t elemental module function character_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html character_ne_string_t elemental module function character_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html characters_with_character_separator pure module function characters_with_character_separator(strings, separator) result(sv) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: strings (:) character(len=*), intent(in) :: separator Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html characters_with_comma_separator pure module function characters_with_comma_separator(strings) result(csv) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: strings (:) Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html characters_with_string_separator pure module function characters_with_string_separator(strings, separator) result(sv) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: strings (:) type( string_t ), intent(in) :: separator Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html concatenate_elements pure module function concatenate_elements(strings) result(concatenated_strings) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html file_extension elemental module function file_extension(self) result(extension) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html from_characters elemental module function from_characters(string) result(new_string) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html from_default_complex elemental module function from_default_complex(z) result(string) Arguments Type Intent Optional Attributes Name complex, intent(in) :: z Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html from_default_integer elemental module function from_default_integer(i) result(string) Arguments Type Intent Optional Attributes Name integer, intent(in) :: i Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html from_default_logical elemental module function from_default_logical(b) result(string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: b Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html from_default_real elemental module function from_default_real(x) result(string) Arguments Type Intent Optional Attributes Name real, intent(in) :: x Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html from_double_precision elemental module function from_double_precision(x) result(string) Arguments Type Intent Optional Attributes Name double precision, intent(in) :: x Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html from_double_precision_complex elemental module function from_double_precision_complex(z) result(string) Arguments Type Intent Optional Attributes Name complex(kind=kind(1D0)), intent(in) :: z Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html from_integer_c_size_t elemental module function from_integer_c_size_t(i) result(string) Arguments Type Intent Optional Attributes Name integer(kind=c_size_t), intent(in) :: i Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html from_logical_c_bool elemental module function from_logical_c_bool(b) result(string) Arguments Type Intent Optional Attributes Name logical(kind=c_bool), intent(in) :: b Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_character_with_character_key pure module function get_character_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key character(len=*), intent(in) :: mold Return Value character(len=:), allocatable module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_character_with_string_key pure module function get_character_with_string_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key character(len=*), intent(in) :: mold Return Value character(len=:), allocatable module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_double_precision pure module function get_double_precision(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key double precision, intent(in) :: mold Return Value double precision module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_double_precision_array pure module function get_double_precision_array(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key double precision, intent(in) :: mold (:) Return Value double precision, allocatable, (:) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_double_precision_array_with_character_key pure module function get_double_precision_array_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key double precision, intent(in) :: mold (:) Return Value double precision, allocatable, (:) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_double_precision_with_character_key pure module function get_double_precision_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key double precision, intent(in) :: mold Return Value double precision module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_integer pure module function get_integer(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold Return Value integer module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_integer_array pure module function get_integer_array(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold (:) Return Value integer, allocatable, (:) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_integer_array_with_character_key pure module function get_integer_array_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key integer, intent(in) :: mold (:) Return Value integer, allocatable, (:) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_integer_with_character_key pure module function get_integer_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key integer, intent(in) :: mold Return Value integer module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_json_key elemental module function get_json_key(self) result(unquoted_key) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_logical pure module function get_logical(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key logical, intent(in) :: mold Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_logical_with_character_key pure module function get_logical_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key logical, intent(in) :: mold Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_real pure module function get_real(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold Return Value real module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_real_array pure module function get_real_array(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold (:) Return Value real, allocatable, (:) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_real_array_with_character_key pure module function get_real_array_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key real, intent(in) :: mold (:) Return Value real, allocatable, (:) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_real_with_character_key pure module function get_real_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key real, intent(in) :: mold Return Value real module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_string_t_array_with_character_key pure module function get_string_t_array_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key type( string_t ), intent(in) :: mold (:) Return Value type( string_t ), allocatable, (:) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_string_t_array_with_string_t_key pure module function get_string_t_array_with_string_t_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self type( string_t ), intent(in) :: key type( string_t ), intent(in) :: mold (:) Return Value type( string_t ), allocatable, (:) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_string_with_character_key pure module function get_string_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key class( string_t ), intent(in) :: mold Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_string_with_string_key pure module function get_string_with_string_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key class( string_t ), intent(in) :: mold Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html is_allocated elemental module function is_allocated(self) result(string_allocated) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html string_t_cat_character elemental module function string_t_cat_character(lhs, rhs) result(lhs_cat_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html string_t_cat_string_t elemental module function string_t_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html string_t_eq_character elemental module function string_t_eq_character(lhs, rhs) result(lhs_eq_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html string_t_eq_string_t elemental module function string_t_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html string_t_ne_character elemental module function string_t_ne_character(lhs, rhs) result(lhs_ne_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html string_t_ne_string_t elemental module function string_t_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html strings_with_character_separator pure module function strings_with_character_separator(strings, separator) result(sv) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) character(len=*), intent(in) :: separator Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html strings_with_comma_separator pure module function strings_with_comma_separator(strings) result(csv) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html strings_with_string_t_separator pure module function strings_with_string_t_separator(strings, separator) result(sv) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) type( string_t ), intent(in) :: separator Return Value type( string_t )","tags":"","url":"module/julienne_string_s.html"},{"title":"julienne_test_diagnosis_s – Julienne","text":"Uses iso_c_binding julienne_string_m assert_m Ancestors: julienne_test_diagnosis_m module~~julienne_test_diagnosis_s~~UsesGraph module~julienne_test_diagnosis_s julienne_test_diagnosis_s assert_m assert_m module~julienne_test_diagnosis_s->assert_m iso_c_binding iso_c_binding module~julienne_test_diagnosis_s->iso_c_binding module~julienne_string_m julienne_string_m module~julienne_test_diagnosis_s->module~julienne_string_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_test_diagnosis_s->module~julienne_test_diagnosis_m module~julienne_string_m->iso_c_binding module~julienne_test_diagnosis_m->iso_c_binding module~julienne_test_diagnosis_m->module~julienne_string_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html aggregate_diagnosis pure module function aggregate_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (..) Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html aggregate_rank10_diagnosis pure module function aggregate_rank10_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:,:,:,:) Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html aggregate_rank11_diagnosis pure module function aggregate_rank11_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:,:,:,:,:) Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html aggregate_rank12_diagnosis pure module function aggregate_rank12_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:,:,:,:,:,:) Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html aggregate_rank13_diagnosis pure module function aggregate_rank13_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:,:,:,:,:,:,:) Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html aggregate_rank14_diagnosis pure module function aggregate_rank14_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:,:,:,:,:,:,:,:) Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html aggregate_rank15_diagnosis pure module function aggregate_rank15_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:,:,:,:,:,:,:,:,:) Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html aggregate_rank2_diagnosis pure module function aggregate_rank2_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:) Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html aggregate_rank3_diagnosis pure module function aggregate_rank3_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:) Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html aggregate_rank4_diagnosis pure module function aggregate_rank4_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:) Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html aggregate_rank5_diagnosis pure module function aggregate_rank5_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:) Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html aggregate_rank6_diagnosis pure module function aggregate_rank6_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:) Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html aggregate_rank7_diagnosis pure module function aggregate_rank7_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:) Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html aggregate_rank8_diagnosis pure module function aggregate_rank8_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:,:) Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html aggregate_rank9_diagnosis pure module function aggregate_rank9_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:,:,:,:,:,:,:,:,:) Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html aggregate_scalar_diagnosis pure module function aggregate_scalar_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html aggregate_vector_diagnosis pure module function aggregate_vector_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (:) Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html alphabetical_character_vs_character elemental module function alphabetical_character_vs_character(lhs, rhs) result(test_diagnosis) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html alphabetical_character_vs_string elemental module function alphabetical_character_vs_string(lhs, rhs) result(test_diagnosis) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs type( string_t ), intent(in) :: rhs Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html alphabetical_string_vs_character elemental module function alphabetical_string_vs_character(lhs, rhs) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html alphabetical_string_vs_string elemental module function alphabetical_string_vs_string(lhs, rhs) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lhs type( string_t ), intent(in) :: rhs Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html also elemental module function also(lhs, rhs) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: lhs type( test_diagnosis_t ), intent(in) :: rhs Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html append_character_if_test_failed elemental module function append_character_if_test_failed(lhs, rhs) result(lhs_cat_rhs) Arguments Type Intent Optional Attributes Name class( test_diagnosis_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html append_string_if_test_failed elemental module function append_string_if_test_failed(lhs, rhs) result(lhs_cat_rhs) Arguments Type Intent Optional Attributes Name class( test_diagnosis_t ), intent(in) :: lhs type( string_t ), intent(in) :: rhs Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html approximates_double_precision elemental module function approximates_double_precision(actual, expected) result(operands) Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected Return Value type( operands_t (double_precision)) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html approximates_real elemental module function approximates_real(actual, expected) result(operands) Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected Return Value type( operands_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html construct_from_character elemental module function construct_from_character(test_passed, diagnostics_string) result(test_diagnosis) Arguments Type Intent Optional Attributes Name logical, intent(in) :: test_passed character(len=*), intent(in) :: diagnostics_string Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html construct_from_string_t elemental module function construct_from_string_t(test_passed, diagnostics_string) result(test_diagnosis) Arguments Type Intent Optional Attributes Name logical, intent(in) :: test_passed type( string_t ), intent(in) :: diagnostics_string Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html diagnostics_string elemental module function diagnostics_string(self) result(string_) Interface → Arguments Type Intent Optional Attributes Name class( test_diagnosis_t ), intent(in) :: self Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html equals_expected_c_ptr elemental module function equals_expected_c_ptr(actual, expected) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: actual type(c_ptr), intent(in) :: expected Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html equals_expected_character elemental module function equals_expected_character(actual, expected) result(test_diagnosis) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: actual character(len=*), intent(in) :: expected Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html equals_expected_character_vs_string elemental module function equals_expected_character_vs_string(actual, expected) result(test_diagnosis) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: actual type( string_t ), intent(in) :: expected Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html equals_expected_integer elemental module function equals_expected_integer(actual, expected) result(test_diagnosis) Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html equals_expected_integer_c_size_t elemental module function equals_expected_integer_c_size_t(actual, expected) result(test_diagnosis) Arguments Type Intent Optional Attributes Name integer(kind=c_size_t), intent(in) :: actual integer(kind=c_size_t), intent(in) :: expected Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html equals_expected_string elemental module function equals_expected_string(actual, expected) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: actual type( string_t ), intent(in) :: expected Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html equals_expected_string_vs_character elemental module function equals_expected_string_vs_character(actual, expected) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: actual character(len=*), intent(in) :: expected Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html expect elemental module function expect(expected_true) result(test_diagnosis) Arguments Type Intent Optional Attributes Name logical, intent(in) :: expected_true Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html greater_than_double elemental module function greater_than_double(actual, expected_floor) result(test_diagnosis) Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected_floor Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html greater_than_integer elemental module function greater_than_integer(actual, expected_floor) result(test_diagnosis) Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_floor Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html greater_than_or_equal_to_double_precision elemental module function greater_than_or_equal_to_double_precision(actual, expected_min) result(test_diagnosis) Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected_min Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html greater_than_or_equal_to_integer elemental module function greater_than_or_equal_to_integer(actual, expected_min) result(test_diagnosis) Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_min Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html greater_than_or_equal_to_real elemental module function greater_than_or_equal_to_real(actual, expected_min) result(test_diagnosis) Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected_min Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html greater_than_real elemental module function greater_than_real(actual, expected_floor) result(test_diagnosis) Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected_floor Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html less_than_double elemental module function less_than_double(actual, expected_ceiling) result(test_diagnosis) Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected_ceiling Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html less_than_integer elemental module function less_than_integer(actual, expected_ceiling) result(test_diagnosis) Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_ceiling Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html less_than_or_equal_to_double_precision elemental module function less_than_or_equal_to_double_precision(actual, expected_max) result(test_diagnosis) Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected_max Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html less_than_or_equal_to_integer elemental module function less_than_or_equal_to_integer(actual, expected_max) result(test_diagnosis) Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_max Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html less_than_or_equal_to_real elemental module function less_than_or_equal_to_real(actual, expected_max) result(test_diagnosis) Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected_max Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html less_than_real elemental module function less_than_real(actual, expected_ceiling) result(test_diagnosis) Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected_ceiling Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html reverse_alphabetical_character_vs_character elemental module function reverse_alphabetical_character_vs_character(lhs, rhs) result(test_diagnosis) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html reverse_alphabetical_character_vs_string elemental module function reverse_alphabetical_character_vs_string(lhs, rhs) result(test_diagnosis) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs type( string_t ), intent(in) :: rhs Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html reverse_alphabetical_string_vs_character elemental module function reverse_alphabetical_string_vs_character(lhs, rhs) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html reverse_alphabetical_string_vs_string elemental module function reverse_alphabetical_string_vs_string(lhs, rhs) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lhs type( string_t ), intent(in) :: rhs Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html test_passed elemental module function test_passed(self) result(passed) Interface → Arguments Type Intent Optional Attributes Name class( test_diagnosis_t ), intent(in) :: self Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html within_double_precision elemental module function within_double_precision(operands, tolerance) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( operands_t (double_precision)), intent(in) :: operands double precision, intent(in) :: tolerance Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html within_double_precision_fraction elemental module function within_double_precision_fraction(operands, fractional_tolerance) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( operands_t (double_precision)), intent(in) :: operands double precision, intent(in) :: fractional_tolerance Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html within_double_precision_percentage elemental module function within_double_precision_percentage(operands, percentage_tolerance) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( operands_t (double_precision)), intent(in) :: operands double precision, intent(in) :: percentage_tolerance Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html within_real elemental module function within_real(operands, tolerance) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( operands_t ), intent(in) :: operands real, intent(in) :: tolerance Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html within_real_fraction elemental module function within_real_fraction(operands, fractional_tolerance) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( operands_t ), intent(in) :: operands real, intent(in) :: fractional_tolerance Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html within_real_percentage elemental module function within_real_percentage(operands, percentage_tolerance) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( operands_t ), intent(in) :: operands real, intent(in) :: percentage_tolerance Return Value type( test_diagnosis_t )","tags":"","url":"module/julienne_test_diagnosis_s.html"},{"title":"julienne_file_s – Julienne","text":"Uses iso_fortran_env assert_m Ancestors: julienne_file_m module~~julienne_file_s~~UsesGraph module~julienne_file_s julienne_file_s assert_m assert_m module~julienne_file_s->assert_m iso_fortran_env iso_fortran_env module~julienne_file_s->iso_fortran_env module~julienne_file_m julienne_file_m module~julienne_file_s->module~julienne_file_m module~julienne_string_m julienne_string_m module~julienne_file_m->module~julienne_string_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_file_s.html from_file_with_character_name module function from_file_with_character_name(file_name) result(file_object) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: file_name Return Value type( file_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_file_s.html from_file_with_string_name module function from_file_with_string_name(file_name) result(file_object) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: file_name Return Value type( file_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_file_s.html from_lines pure module function from_lines(lines) result(file_object) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lines (:) Return Value type( file_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_file_s.html lines pure module function lines(self) result(my_lines) Interface → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self Return Value type( string_t ), allocatable, (:) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_file_s.html write_to_character_file_name impure elemental module subroutine write_to_character_file_name(self, file_name) Interface → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self character(len=*), intent(in) :: file_name module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_file_s.html write_to_output_unit module subroutine write_to_output_unit(self) Interface → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_file_s.html write_to_string_file_name impure elemental module subroutine write_to_string_file_name(self, file_name) Interface → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self type( string_t ), intent(in) :: file_name","tags":"","url":"module/julienne_file_s.html"},{"title":"julienne_test_suite_s – Julienne","text":"Uses julienne_m assert_m Ancestors: julienne_test_suite_m module~~julienne_test_suite_s~~UsesGraph module~julienne_test_suite_s julienne_test_suite_s assert_m assert_m module~julienne_test_suite_s->assert_m module~julienne_m julienne_m module~julienne_test_suite_s->module~julienne_m module~julienne_test_suite_m julienne_test_suite_m module~julienne_test_suite_s->module~julienne_test_suite_m module~julienne_m->module~julienne_test_suite_m module~julienne_assert_m julienne_assert_m module~julienne_m->module~julienne_assert_m module~julienne_bin_m julienne_bin_m module~julienne_m->module~julienne_bin_m module~julienne_command_line_m julienne_command_line_m module~julienne_m->module~julienne_command_line_m module~julienne_file_m julienne_file_m module~julienne_m->module~julienne_file_m module~julienne_formats_m julienne_formats_m module~julienne_m->module~julienne_formats_m module~julienne_github_ci_m julienne_github_ci_m module~julienne_m->module~julienne_github_ci_m module~julienne_one_image_prints_m julienne_one_image_prints_m module~julienne_m->module~julienne_one_image_prints_m module~julienne_string_m julienne_string_m module~julienne_m->module~julienne_string_m module~julienne_test_description_m julienne_test_description_m module~julienne_m->module~julienne_test_description_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_m->module~julienne_test_diagnosis_m module~julienne_test_fixture_m julienne_test_fixture_m module~julienne_m->module~julienne_test_fixture_m module~julienne_test_harness_m julienne_test_harness_m module~julienne_m->module~julienne_test_harness_m module~julienne_test_m julienne_test_m module~julienne_m->module~julienne_test_m module~julienne_test_result_m julienne_test_result_m module~julienne_m->module~julienne_test_result_m module~julienne_test_suite_m->module~julienne_file_m module~julienne_test_suite_m->module~julienne_string_m module~julienne_assert_m->module~julienne_test_diagnosis_m module~julienne_file_m->module~julienne_string_m module~julienne_one_image_prints_m->module~julienne_string_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding module~julienne_test_description_m->module~julienne_string_m module~julienne_test_description_m->module~julienne_test_diagnosis_m module~julienne_test_description_m->module~julienne_test_result_m module~julienne_test_diagnosis_m->module~julienne_string_m module~julienne_test_diagnosis_m->iso_c_binding module~julienne_test_fixture_m->module~julienne_test_m module~julienne_test_harness_m->module~julienne_test_fixture_m module~julienne_test_m->module~julienne_command_line_m module~julienne_test_m->module~julienne_test_description_m module~julienne_test_m->module~julienne_test_result_m module~julienne_user_defined_collectives_m julienne_user_defined_collectives_m module~julienne_test_m->module~julienne_user_defined_collectives_m module~julienne_test_result_m->module~julienne_string_m module~julienne_test_result_m->module~julienne_test_diagnosis_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial character(len=*), private, parameter :: copyright_and_license = \"! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute\"//new_line('')//\"! Terms of use are as specified in LICENSE.txt\" character(len=*), private, parameter :: test_subjects_key = \"test subjects\" character(len=*), private, parameter :: test_suite_key = \"test suite\" Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_suite_s.html driver_file pure module function driver_file(self) result(file) Interface → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self Return Value type( file_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_suite_s.html from_components pure module function from_components(test_subjects) result(test_suite) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: test_subjects (:) Return Value type( test_suite_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_suite_s.html from_file pure module function from_file(file) result(test_suite) Arguments Type Intent Optional Attributes Name type( file_t ), intent(in) :: file Return Value type( test_suite_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_suite_s.html stub_file pure module function stub_file(self, subject) result(file) Interface → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self type( string_t ), intent(in) :: subject Return Value type( file_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_suite_s.html test_modules pure module function test_modules(self) result(modules) Interface → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self Return Value type( string_t ), allocatable, (:) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_suite_s.html test_subjects pure module function test_subjects(self) result(subjects) Interface → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self Return Value type( string_t ), allocatable, (:) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_suite_s.html test_types pure module function test_types(self) result(types) Interface → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self Return Value type( string_t ), allocatable, (:) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_suite_s.html to_file pure module function to_file(self) result(file) Interface → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self Return Value type( file_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_suite_s.html write_driver module subroutine write_driver(self, file_name) Interface → Arguments Type Intent Optional Attributes Name class( test_suite_t ), intent(in) :: self character(len=*), intent(in) :: file_name","tags":"","url":"module/julienne_test_suite_s.html"},{"title":"julienne_test_description_s – Julienne","text":"Uses julienne_assert_m assert_m julienne_command_line_m Ancestors: julienne_test_description_m module~~julienne_test_description_s~~UsesGraph module~julienne_test_description_s julienne_test_description_s assert_m assert_m module~julienne_test_description_s->assert_m module~julienne_assert_m julienne_assert_m module~julienne_test_description_s->module~julienne_assert_m module~julienne_command_line_m julienne_command_line_m module~julienne_test_description_s->module~julienne_command_line_m module~julienne_test_description_m julienne_test_description_m module~julienne_test_description_s->module~julienne_test_description_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_assert_m->module~julienne_test_diagnosis_m module~julienne_string_m julienne_string_m module~julienne_test_description_m->module~julienne_string_m module~julienne_test_description_m->module~julienne_test_diagnosis_m module~julienne_test_result_m julienne_test_result_m module~julienne_test_description_m->module~julienne_test_result_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding module~julienne_test_diagnosis_m->module~julienne_string_m module~julienne_test_diagnosis_m->iso_c_binding module~julienne_test_result_m->module~julienne_string_m module~julienne_test_result_m->module~julienne_test_diagnosis_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_description_s.html construct_from_characters module function construct_from_characters(description, diagnosis_function) result(test_description) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description procedure( diagnosis_function_i ), intent(in), optional, pointer :: diagnosis_function Return Value type( test_description_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_description_s.html construct_from_string module function construct_from_string(description, diagnosis_function) result(test_description) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description procedure( diagnosis_function_i ), intent(in), optional, pointer :: diagnosis_function Return Value type( test_description_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_description_s.html contains_characters elemental module function contains_characters(self, substring) result(match) Interface → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_description_s.html contains_string_t elemental module function contains_string_t(self, substring) result(match) Interface → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_description_s.html equals elemental module function equals(lhs, rhs) result(lhs_eq_rhs) Interface → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: lhs class( test_description_t ), intent(in) :: rhs Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_description_s.html filter module function filter(test_descriptions, subject) result(filtered_test_descriptions) Interface → Arguments Type Intent Optional Attributes Name type( test_description_t ), intent(in) :: test_descriptions (:) character(len=*), intent(in) :: subject Return Value type( test_description_t ), allocatable, (:) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_description_s.html run impure elemental module function run(self) result(test_result) Interface → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self Return Value type( test_result_t )","tags":"","url":"module/julienne_test_description_s.html"},{"title":"julienne_test_s – Julienne","text":"Uses julienne_string_m julienne_one_image_prints_m julienne_test_description_m Ancestors: julienne_test_m module~~julienne_test_s~~UsesGraph module~julienne_test_s julienne_test_s module~julienne_one_image_prints_m julienne_one_image_prints_m module~julienne_test_s->module~julienne_one_image_prints_m module~julienne_string_m julienne_string_m module~julienne_test_s->module~julienne_string_m module~julienne_test_description_m julienne_test_description_m module~julienne_test_s->module~julienne_test_description_m module~julienne_test_m julienne_test_m module~julienne_test_s->module~julienne_test_m module~julienne_one_image_prints_m->module~julienne_string_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding module~julienne_test_description_m->module~julienne_string_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_test_description_m->module~julienne_test_diagnosis_m module~julienne_test_result_m julienne_test_result_m module~julienne_test_description_m->module~julienne_test_result_m module~julienne_test_m->module~julienne_test_description_m module~julienne_command_line_m julienne_command_line_m module~julienne_test_m->module~julienne_command_line_m module~julienne_test_m->module~julienne_test_result_m module~julienne_user_defined_collectives_m julienne_user_defined_collectives_m module~julienne_test_m->module~julienne_user_defined_collectives_m module~julienne_test_diagnosis_m->module~julienne_string_m module~julienne_test_diagnosis_m->iso_c_binding module~julienne_test_result_m->module~julienne_string_m module~julienne_test_result_m->module~julienne_test_diagnosis_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_s.html report module subroutine report(test, passes, tests, skips) Interface → Arguments Type Intent Optional Attributes Name class( test_t ), intent(in) :: test integer, intent(inout) :: passes integer, intent(inout) :: tests integer, intent(inout) :: skips module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_s.html run module function run(test, test_descriptions) result(test_results) Interface → Arguments Type Intent Optional Attributes Name class( test_t ), intent(in) :: test type( test_description_t ), intent(in) :: test_descriptions (:) Return Value type( test_result_t ), allocatable, (:) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_s.html run module function run(test, test_descriptions) result(test_results) Interface → Arguments Type Intent Optional Attributes Name class( test_t ), intent(in) :: test type( test_description_t ), intent(in) :: test_descriptions (:) Return Value type( test_result_t ), allocatable, (:)","tags":"","url":"module/julienne_test_s.html"},{"title":"julienne_test_harness_s – Julienne","text":"Uses julienne_one_image_prints_m julienne_string_m iso_fortran_env julienne_command_line_m Ancestors: julienne_test_harness_m module~~julienne_test_harness_s~~UsesGraph module~julienne_test_harness_s julienne_test_harness_s iso_fortran_env iso_fortran_env module~julienne_test_harness_s->iso_fortran_env module~julienne_command_line_m julienne_command_line_m module~julienne_test_harness_s->module~julienne_command_line_m module~julienne_one_image_prints_m julienne_one_image_prints_m module~julienne_test_harness_s->module~julienne_one_image_prints_m module~julienne_string_m julienne_string_m module~julienne_test_harness_s->module~julienne_string_m module~julienne_test_harness_m julienne_test_harness_m module~julienne_test_harness_s->module~julienne_test_harness_m module~julienne_one_image_prints_m->module~julienne_string_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding module~julienne_test_fixture_m julienne_test_fixture_m module~julienne_test_harness_m->module~julienne_test_fixture_m module~julienne_test_m julienne_test_m module~julienne_test_fixture_m->module~julienne_test_m module~julienne_test_m->module~julienne_command_line_m module~julienne_test_description_m julienne_test_description_m module~julienne_test_m->module~julienne_test_description_m module~julienne_test_result_m julienne_test_result_m module~julienne_test_m->module~julienne_test_result_m module~julienne_user_defined_collectives_m julienne_user_defined_collectives_m module~julienne_test_m->module~julienne_user_defined_collectives_m module~julienne_test_description_m->module~julienne_string_m module~julienne_test_description_m->module~julienne_test_result_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_test_description_m->module~julienne_test_diagnosis_m module~julienne_test_result_m->module~julienne_string_m module~julienne_test_result_m->module~julienne_test_diagnosis_m module~julienne_test_diagnosis_m->module~julienne_string_m module~julienne_test_diagnosis_m->iso_c_binding Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Subroutines subroutine print_usage_info_and_stop_if_requested () Arguments None Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_harness_s.html component_constructor module function component_constructor(test_fixtures) result(test_harness) Arguments Type Intent Optional Attributes Name class( test_fixture_t ) :: test_fixtures (:) Return Value type( test_harness_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_harness_s.html report_results module subroutine report_results(self) Interface → Arguments Type Intent Optional Attributes Name class( test_harness_t ), intent(in) :: self","tags":"","url":"module/julienne_test_harness_s.html"},{"title":"julienne_formats_s – Julienne","text":"Construct separated-value formats Uses Ancestors: julienne_formats_m module~~julienne_formats_s~~UsesGraph module~julienne_formats_s julienne_formats_s module~julienne_formats_m julienne_formats_m module~julienne_formats_s->module~julienne_formats_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_formats_s.html separated_values pure module function separated_values(separator, mold) result(format_string) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: separator class(*), intent(in) :: mold (..) Return Value character(len=:), allocatable","tags":"","url":"module/julienne_formats_s.html"},{"title":"scaffold – Julienne","text":"Uses julienne_m program~~scaffold~~UsesGraph program~scaffold scaffold module~julienne_m julienne_m program~scaffold->module~julienne_m module~julienne_assert_m julienne_assert_m module~julienne_m->module~julienne_assert_m module~julienne_bin_m julienne_bin_m module~julienne_m->module~julienne_bin_m module~julienne_command_line_m julienne_command_line_m module~julienne_m->module~julienne_command_line_m module~julienne_file_m julienne_file_m module~julienne_m->module~julienne_file_m module~julienne_formats_m julienne_formats_m module~julienne_m->module~julienne_formats_m module~julienne_github_ci_m julienne_github_ci_m module~julienne_m->module~julienne_github_ci_m module~julienne_one_image_prints_m julienne_one_image_prints_m module~julienne_m->module~julienne_one_image_prints_m module~julienne_string_m julienne_string_m module~julienne_m->module~julienne_string_m module~julienne_test_description_m julienne_test_description_m module~julienne_m->module~julienne_test_description_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_m->module~julienne_test_diagnosis_m module~julienne_test_fixture_m julienne_test_fixture_m module~julienne_m->module~julienne_test_fixture_m module~julienne_test_harness_m julienne_test_harness_m module~julienne_m->module~julienne_test_harness_m module~julienne_test_m julienne_test_m module~julienne_m->module~julienne_test_m module~julienne_test_result_m julienne_test_result_m module~julienne_m->module~julienne_test_result_m module~julienne_test_suite_m julienne_test_suite_m module~julienne_m->module~julienne_test_suite_m module~julienne_assert_m->module~julienne_test_diagnosis_m module~julienne_file_m->module~julienne_string_m module~julienne_one_image_prints_m->module~julienne_string_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding module~julienne_test_description_m->module~julienne_string_m module~julienne_test_description_m->module~julienne_test_diagnosis_m module~julienne_test_description_m->module~julienne_test_result_m module~julienne_test_diagnosis_m->module~julienne_string_m module~julienne_test_diagnosis_m->iso_c_binding module~julienne_test_fixture_m->module~julienne_test_m module~julienne_test_harness_m->module~julienne_test_fixture_m module~julienne_test_m->module~julienne_command_line_m module~julienne_test_m->module~julienne_test_description_m module~julienne_test_m->module~julienne_test_result_m module~julienne_user_defined_collectives_m julienne_user_defined_collectives_m module~julienne_test_m->module~julienne_user_defined_collectives_m module~julienne_test_result_m->module~julienne_string_m module~julienne_test_result_m->module~julienne_test_diagnosis_m module~julienne_test_suite_m->module~julienne_file_m module~julienne_test_suite_m->module~julienne_string_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~scaffold~~CallsGraph program~scaffold scaffold interface~flag_value command_line_t%flag_value program~scaffold->interface~flag_value interface~write_driver test_suite_t%write_driver program~scaffold->interface~write_driver proc~help_requested help_requested program~scaffold->proc~help_requested proc~print_usage_info_and_stop print_usage_info_and_stop program~scaffold->proc~print_usage_info_and_stop interface~argument_present command_line_t%argument_present proc~help_requested->interface~argument_present Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( command_line_t ) :: command_line integer :: i Functions function help_requested () Arguments None Return Value logical Subroutines subroutine print_usage_info_and_stop () Arguments None Source Code program scaffold use julienne_m , only : command_line_t , file_t , test_suite_t implicit none type ( command_line_t ) command_line integer i if ( help_requested ()) call print_usage_info_and_stop #ifndef __GNUC__ associate ( subjects_file_name => command_line % flag_value ( \"--json-file\" )) if ( len ( subjects_file_name ) == 0 ) call print_usage_info_and_stop print '(*(a))' , \"Reading test subject information from \" // subjects_file_name associate ( test_suite => test_suite_t ( file_t ( subjects_file_name ))) associate ( path => command_line % flag_value ( \"--suite-path\" )) print '(*(a))' , \"Writing test-suite scaffolding in \" // path if ( len ( path ) == 0 ) call print_usage_info_and_stop associate ( driver => test_suite % driver_file ()) call driver % write_lines ( path // \"/driver.f90\" ) end associate associate ( subjects => test_suite % test_subjects (), modules => test_suite % test_modules ()) do i = 1 , size ( subjects ) associate ( stub => test_suite % stub_file ( subjects ( i ))) call stub % write_lines ( path // \"/\" // modules ( i ) // \".f90\" ) end associate end do end associate end associate end associate end associate #else block character ( len = :), allocatable :: path , subjects_file_name type ( file_t ) driver subjects_file_name = command_line % flag_value ( \"--json-file\" ) if ( len ( subjects_file_name ) == 0 ) call print_usage_info_and_stop print '(*(a))' , \"Reading test subject information from \" // subjects_file_name associate ( test_suite => test_suite_t ( file_t ( subjects_file_name ))) path = command_line % flag_value ( \"--suite-path\" ) if ( len ( path ) == 0 ) call print_usage_info_and_stop print '(*(a))' , \"Writing test-suite scaffolding in \" // path call test_suite % write_driver ( path // \"/driver.f90\" ) end associate end block #endif contains logical function help_requested () character ( len = :), allocatable :: file_name type ( command_line_t ) command_line help_requested = command_line % argument_present ([ character ( len = len ( \"--help\" )) :: \"--help\" , \"-h\" ]) end function subroutine print_usage_info_and_stop character ( len =* ), parameter :: usage = & new_line ( '' ) // new_line ( '' ) // & 'Usage: fpm run scaffold -- [--json-file <string> --suite-path <string>] | [--help] | -h]' // & new_line ( '' ) // new_line ( '' ) // & 'where square brackets ([]) denote optional arguments, a pipe (|) separates alternative arguments,' // new_line ( '' ) // & 'angular brackets (<>) denote a user-provided value, the --subjects string names a JSON file,' // new_line ( '' ) // & 'and the --path string names a directory for the new test-suite scaffold.' // new_line ( '' ) stop usage end subroutine end program scaffold","tags":"","url":"program/scaffold.html"},{"title":"create_markdown_table – Julienne","text":"Uses iso_c_binding julienne_string_m iso_fortran_env program~~create_markdown_table~~UsesGraph program~create_markdown_table create_markdown_table iso_c_binding iso_c_binding program~create_markdown_table->iso_c_binding iso_fortran_env iso_fortran_env program~create_markdown_table->iso_fortran_env module~julienne_string_m julienne_string_m program~create_markdown_table->module~julienne_string_m module~julienne_string_m->iso_c_binding Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. This program demonstrates the creation of a Markdown table summarzing kind values used by a compiler: Using the string_t user-defined structure constructor to encapsulate a ragged-edged string_t array. Using operator(.separatedBy.) to concatenate string_t array elements with interspersed separators. Using the elemental type-bound procedure \"bracket\" to prefix and suffix string_t array elements. Running the program with a command of the form \"fpm run --example create-markdown-table\" without quotes\nshould produce a table similar to the following with \"flang\" replaced by the employed compiler's name. compiler \\ kind default c_size_t c_int64_t c_intptr_t flang 4 8 8 8 Calls program~~create_markdown_table~~CallsGraph program~create_markdown_table create_markdown_table body body program~create_markdown_table->body header header program~create_markdown_table->header proc~compiler compiler program~create_markdown_table->proc~compiler proc~markdown_table markdown_table program~create_markdown_table->proc~markdown_table string string program~create_markdown_table->string table_lines table_lines program~create_markdown_table->table_lines interface~bracket string_t%bracket proc~markdown_table->interface~bracket Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Functions pure function compiler () Arguments None Return Value type( string_t ) pure function markdown_table (row_header, column_header, body_cells, side_borders) result(lines) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: row_header (first_body_row:) type( string_t ), intent(in) :: column_header (:) type( string_t ), intent(in) :: body_cells (first_body_row:,:) logical, intent(in) :: side_borders Return Value type( string_t ), (size(body_cells,1)+rank(column_header)+num_rule_lines)","tags":"","url":"program/create_markdown_table.html"},{"title":"check_for_command_line_argument – Julienne","text":"Uses julienne_m program~~check_for_command_line_argument~~UsesGraph program~check_for_command_line_argument check_for_command_line_argument module~julienne_m julienne_m program~check_for_command_line_argument->module~julienne_m module~julienne_assert_m julienne_assert_m module~julienne_m->module~julienne_assert_m module~julienne_bin_m julienne_bin_m module~julienne_m->module~julienne_bin_m module~julienne_command_line_m julienne_command_line_m module~julienne_m->module~julienne_command_line_m module~julienne_file_m julienne_file_m module~julienne_m->module~julienne_file_m module~julienne_formats_m julienne_formats_m module~julienne_m->module~julienne_formats_m module~julienne_github_ci_m julienne_github_ci_m module~julienne_m->module~julienne_github_ci_m module~julienne_one_image_prints_m julienne_one_image_prints_m module~julienne_m->module~julienne_one_image_prints_m module~julienne_string_m julienne_string_m module~julienne_m->module~julienne_string_m module~julienne_test_description_m julienne_test_description_m module~julienne_m->module~julienne_test_description_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_m->module~julienne_test_diagnosis_m module~julienne_test_fixture_m julienne_test_fixture_m module~julienne_m->module~julienne_test_fixture_m module~julienne_test_harness_m julienne_test_harness_m module~julienne_m->module~julienne_test_harness_m module~julienne_test_m julienne_test_m module~julienne_m->module~julienne_test_m module~julienne_test_result_m julienne_test_result_m module~julienne_m->module~julienne_test_result_m module~julienne_test_suite_m julienne_test_suite_m module~julienne_m->module~julienne_test_suite_m module~julienne_assert_m->module~julienne_test_diagnosis_m module~julienne_file_m->module~julienne_string_m module~julienne_one_image_prints_m->module~julienne_string_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding module~julienne_test_description_m->module~julienne_string_m module~julienne_test_description_m->module~julienne_test_diagnosis_m module~julienne_test_description_m->module~julienne_test_result_m module~julienne_test_diagnosis_m->module~julienne_string_m module~julienne_test_diagnosis_m->iso_c_binding module~julienne_test_fixture_m->module~julienne_test_m module~julienne_test_harness_m->module~julienne_test_fixture_m module~julienne_test_m->module~julienne_command_line_m module~julienne_test_m->module~julienne_test_description_m module~julienne_test_m->module~julienne_test_result_m module~julienne_user_defined_collectives_m julienne_user_defined_collectives_m module~julienne_test_m->module~julienne_user_defined_collectives_m module~julienne_test_result_m->module~julienne_string_m module~julienne_test_result_m->module~julienne_test_diagnosis_m module~julienne_test_suite_m->module~julienne_file_m module~julienne_test_suite_m->module~julienne_string_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. This program shows how to use the command_line_t derived type to check whether a \ncommand-line argument is present.  Running this program as follows with the command\nshould print an indication that the command-line argument is present: fpm run --example check-for-command-line-argument -- --some-argument Running the program without the argument or with the argument spelled differently\nshould print an indication that the argument is not present: fpm run --example check-for-command-line-argument Calls program~~check_for_command_line_argument~~CallsGraph program~check_for_command_line_argument check_for_command_line_argument interface~argument_present command_line_t%argument_present program~check_for_command_line_argument->interface~argument_present Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( command_line_t ) :: command_line","tags":"","url":"program/check_for_command_line_argument.html"},{"title":"assertions – Julienne","text":"Uses julienne_m program~~assertions~~UsesGraph program~assertions assertions module~julienne_m julienne_m program~assertions->module~julienne_m module~julienne_assert_m julienne_assert_m module~julienne_m->module~julienne_assert_m module~julienne_bin_m julienne_bin_m module~julienne_m->module~julienne_bin_m module~julienne_command_line_m julienne_command_line_m module~julienne_m->module~julienne_command_line_m module~julienne_file_m julienne_file_m module~julienne_m->module~julienne_file_m module~julienne_formats_m julienne_formats_m module~julienne_m->module~julienne_formats_m module~julienne_github_ci_m julienne_github_ci_m module~julienne_m->module~julienne_github_ci_m module~julienne_one_image_prints_m julienne_one_image_prints_m module~julienne_m->module~julienne_one_image_prints_m module~julienne_string_m julienne_string_m module~julienne_m->module~julienne_string_m module~julienne_test_description_m julienne_test_description_m module~julienne_m->module~julienne_test_description_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_m->module~julienne_test_diagnosis_m module~julienne_test_fixture_m julienne_test_fixture_m module~julienne_m->module~julienne_test_fixture_m module~julienne_test_harness_m julienne_test_harness_m module~julienne_m->module~julienne_test_harness_m module~julienne_test_m julienne_test_m module~julienne_m->module~julienne_test_m module~julienne_test_result_m julienne_test_result_m module~julienne_m->module~julienne_test_result_m module~julienne_test_suite_m julienne_test_suite_m module~julienne_m->module~julienne_test_suite_m module~julienne_assert_m->module~julienne_test_diagnosis_m module~julienne_file_m->module~julienne_string_m module~julienne_one_image_prints_m->module~julienne_string_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding module~julienne_test_description_m->module~julienne_string_m module~julienne_test_description_m->module~julienne_test_diagnosis_m module~julienne_test_description_m->module~julienne_test_result_m module~julienne_test_diagnosis_m->module~julienne_string_m module~julienne_test_diagnosis_m->iso_c_binding module~julienne_test_fixture_m->module~julienne_test_m module~julienne_test_harness_m->module~julienne_test_fixture_m module~julienne_test_m->module~julienne_command_line_m module~julienne_test_m->module~julienne_test_description_m module~julienne_test_m->module~julienne_test_result_m module~julienne_user_defined_collectives_m julienne_user_defined_collectives_m module~julienne_test_m->module~julienne_user_defined_collectives_m module~julienne_test_result_m->module~julienne_string_m module~julienne_test_result_m->module~julienne_test_diagnosis_m module~julienne_test_suite_m->module~julienne_file_m module~julienne_test_suite_m->module~julienne_string_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Example: two true assertions followed by one intentionally false assertion Calls program~~assertions~~CallsGraph program~assertions assertions call_julienne_assert call_julienne_assert program~assertions->call_julienne_assert Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"program/assertions.html"},{"title":"get_command_line_flag_value – Julienne","text":"Uses julienne_m program~~get_command_line_flag_value~~UsesGraph program~get_command_line_flag_value get_command_line_flag_value module~julienne_m julienne_m program~get_command_line_flag_value->module~julienne_m module~julienne_assert_m julienne_assert_m module~julienne_m->module~julienne_assert_m module~julienne_bin_m julienne_bin_m module~julienne_m->module~julienne_bin_m module~julienne_command_line_m julienne_command_line_m module~julienne_m->module~julienne_command_line_m module~julienne_file_m julienne_file_m module~julienne_m->module~julienne_file_m module~julienne_formats_m julienne_formats_m module~julienne_m->module~julienne_formats_m module~julienne_github_ci_m julienne_github_ci_m module~julienne_m->module~julienne_github_ci_m module~julienne_one_image_prints_m julienne_one_image_prints_m module~julienne_m->module~julienne_one_image_prints_m module~julienne_string_m julienne_string_m module~julienne_m->module~julienne_string_m module~julienne_test_description_m julienne_test_description_m module~julienne_m->module~julienne_test_description_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_m->module~julienne_test_diagnosis_m module~julienne_test_fixture_m julienne_test_fixture_m module~julienne_m->module~julienne_test_fixture_m module~julienne_test_harness_m julienne_test_harness_m module~julienne_m->module~julienne_test_harness_m module~julienne_test_m julienne_test_m module~julienne_m->module~julienne_test_m module~julienne_test_result_m julienne_test_result_m module~julienne_m->module~julienne_test_result_m module~julienne_test_suite_m julienne_test_suite_m module~julienne_m->module~julienne_test_suite_m module~julienne_assert_m->module~julienne_test_diagnosis_m module~julienne_file_m->module~julienne_string_m module~julienne_one_image_prints_m->module~julienne_string_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding module~julienne_test_description_m->module~julienne_string_m module~julienne_test_description_m->module~julienne_test_diagnosis_m module~julienne_test_description_m->module~julienne_test_result_m module~julienne_test_diagnosis_m->module~julienne_string_m module~julienne_test_diagnosis_m->iso_c_binding module~julienne_test_fixture_m->module~julienne_test_m module~julienne_test_harness_m->module~julienne_test_fixture_m module~julienne_test_m->module~julienne_command_line_m module~julienne_test_m->module~julienne_test_description_m module~julienne_test_m->module~julienne_test_result_m module~julienne_user_defined_collectives_m julienne_user_defined_collectives_m module~julienne_test_m->module~julienne_user_defined_collectives_m module~julienne_test_result_m->module~julienne_string_m module~julienne_test_result_m->module~julienne_test_diagnosis_m module~julienne_test_suite_m->module~julienne_file_m module~julienne_test_suite_m->module~julienne_string_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. This program demonstrates how to find the value of a command-line flag.  Running this program\nas follows should print 'foo=bar' without quotes: fpm run --example get-command-line-flag-value -- --foo bar Running the above command either without bar or without \"--foo bar\" should print an indication the message \"flag '--foo' not present or present with no value\".\nwas provided. Calls program~~get_command_line_flag_value~~CallsGraph program~get_command_line_flag_value get_command_line_flag_value interface~flag_value command_line_t%flag_value program~get_command_line_flag_value->interface~flag_value Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( command_line_t ) :: command_line character(len=:), allocatable :: foo_value","tags":"","url":"program/get_command_line_flag_value.html"},{"title":"scaffold.F90 – Julienne","text":"This file depends on sourcefile~~scaffold.f90~~EfferentGraph sourcefile~scaffold.f90 scaffold.F90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~scaffold.f90->sourcefile~julienne_m.f90 sourcefile~julienne_assert_m.f90 julienne_assert_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_assert_m.f90 sourcefile~julienne_bin_m.f90 julienne_bin_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_bin_m.f90 sourcefile~julienne_command_line_m.f90 julienne_command_line_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_file_m.f90 julienne_file_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_file_m.f90 sourcefile~julienne_formats_m.f90 julienne_formats_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_formats_m.f90 sourcefile~julienne_github_ci_m.f90 julienne_github_ci_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_github_ci_m.f90 sourcefile~julienne_one_image_prints_m.f90 julienne_one_image_prints_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_one_image_prints_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_fixture_m.f90 julienne_test_fixture_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_harness_m.f90 julienne_test_harness_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_harness_m.f90 sourcefile~julienne_test_m.f90 julienne_test_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_suite_m.f90 julienne_test_suite_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_suite_m.f90 sourcefile~julienne_assert_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_file_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_one_image_prints_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_fixture_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_harness_m.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_user_defined_collectives_m.f90 julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_suite_m.f90->sourcefile~julienne_file_m.f90 sourcefile~julienne_test_suite_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt program scaffold use julienne_m , only : command_line_t , file_t , test_suite_t implicit none type ( command_line_t ) command_line integer i if ( help_requested ()) call print_usage_info_and_stop #ifndef __GNUC__ associate ( subjects_file_name => command_line % flag_value ( \"--json-file\" )) if ( len ( subjects_file_name ) == 0 ) call print_usage_info_and_stop print '(*(a))' , \"Reading test subject information from \" // subjects_file_name associate ( test_suite => test_suite_t ( file_t ( subjects_file_name ))) associate ( path => command_line % flag_value ( \"--suite-path\" )) print '(*(a))' , \"Writing test-suite scaffolding in \" // path if ( len ( path ) == 0 ) call print_usage_info_and_stop associate ( driver => test_suite % driver_file ()) call driver % write_lines ( path // \"/driver.f90\" ) end associate associate ( subjects => test_suite % test_subjects (), modules => test_suite % test_modules ()) do i = 1 , size ( subjects ) associate ( stub => test_suite % stub_file ( subjects ( i ))) call stub % write_lines ( path // \"/\" // modules ( i ) // \".f90\" ) end associate end do end associate end associate end associate end associate #else block character ( len = :), allocatable :: path , subjects_file_name type ( file_t ) driver subjects_file_name = command_line % flag_value ( \"--json-file\" ) if ( len ( subjects_file_name ) == 0 ) call print_usage_info_and_stop print '(*(a))' , \"Reading test subject information from \" // subjects_file_name associate ( test_suite => test_suite_t ( file_t ( subjects_file_name ))) path = command_line % flag_value ( \"--suite-path\" ) if ( len ( path ) == 0 ) call print_usage_info_and_stop print '(*(a))' , \"Writing test-suite scaffolding in \" // path call test_suite % write_driver ( path // \"/driver.f90\" ) end associate end block #endif contains logical function help_requested () character ( len = :), allocatable :: file_name type ( command_line_t ) command_line help_requested = command_line % argument_present ([ character ( len = len ( \"--help\" )) :: \"--help\" , \"-h\" ]) end function subroutine print_usage_info_and_stop character ( len =* ), parameter :: usage = & new_line ( '' ) // new_line ( '' ) // & 'Usage: fpm run scaffold -- [--json-file <string> --suite-path <string>] | [--help] | -h]' // & new_line ( '' ) // new_line ( '' ) // & 'where square brackets ([]) denote optional arguments, a pipe (|) separates alternative arguments,' // new_line ( '' ) // & 'angular brackets (<>) denote a user-provided value, the --subjects string names a JSON file,' // new_line ( '' ) // & 'and the --path string names a directory for the new test-suite scaffold.' // new_line ( '' ) stop usage end subroutine end program scaffold","tags":"","url":"sourcefile/scaffold.f90.html"},{"title":"julienne_assert_s.f90 – Julienne","text":"This file depends on sourcefile~~julienne_assert_s.f90~~EfferentGraph sourcefile~julienne_assert_s.f90 julienne_assert_s.f90 sourcefile~julienne_assert_m.f90 julienne_assert_m.f90 sourcefile~julienne_assert_s.f90->sourcefile~julienne_assert_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_assert_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.F90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt submodule ( julienne_assert_m ) julienne_assert_s use assert_m , only : assert_always implicit none contains module procedure idiomatic_assert character ( len = :), allocatable :: description_ if (. not . test_diagnosis % test_passed ()) then if ( present ( description )) then description_ = new_line ( '' ) // description // new_line ( '' ) // test_diagnosis % diagnostics_string () else description_ = new_line ( '' ) // test_diagnosis % diagnostics_string () end if call assert_always (. false ., description_ , file , line ) end if end procedure module procedure logical_assert character ( len = :), allocatable :: description_ if (. not . assertion ) then if ( present ( description )) then description_ = new_line ( '' ) // description // new_line ( '' ) else description_ = new_line ( '' ) end if call assert_always (. false ., description_ , file , line ) end if end procedure end submodule julienne_assert_s","tags":"","url":"sourcefile/julienne_assert_s.f90.html"},{"title":"julienne_bin_s.F90 – Julienne","text":"This file depends on sourcefile~~julienne_bin_s.f90~~EfferentGraph sourcefile~julienne_bin_s.f90 julienne_bin_s.F90 sourcefile~julienne_assert_m.f90 julienne_assert_m.f90 sourcefile~julienne_bin_s.f90->sourcefile~julienne_assert_m.f90 sourcefile~julienne_bin_m.f90 julienne_bin_m.f90 sourcefile~julienne_bin_s.f90->sourcefile~julienne_bin_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_bin_s.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_assert_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.F90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt #include \"julienne-assert-macros.h\" submodule ( julienne_bin_m ) julienne_bin_s use julienne_assert_m , only : call_julienne_assert_ use julienne_test_diagnosis_m , only : operator (. isAtLeast .) implicit none contains module procedure construct call_julienne_assert ( num_items . isAtLeast . num_bins ) associate ( remainder => mod ( num_items , num_bins ), items_per_bin => num_items / num_bins ) if ( bin_number <= remainder ) then bin % first_ = 1 + ( bin_number - 1 ) * ( items_per_bin + 1 ) bin % last_ = bin_number * ( items_per_bin + 1 ) else bin % first_ = 1 + ( remainder - 1 ) * ( items_per_bin + 1 ) + 1 + ( bin_number - remainder ) * items_per_bin bin % last_ = remainder * ( items_per_bin + 1 ) + ( bin_number - remainder ) * items_per_bin end if end associate end procedure module procedure first first_item_number = self % first_ end procedure module procedure last last_item_number = self % last_ end procedure end submodule julienne_bin_s","tags":"","url":"sourcefile/julienne_bin_s.f90.html"},{"title":"create-markdown-table.F90 – Julienne","text":"This file depends on sourcefile~~create-markdown-table.f90~~EfferentGraph sourcefile~create-markdown-table.f90 create-markdown-table.F90 sourcefile~julienne_string_m.f90 julienne_string_m.F90 sourcefile~create-markdown-table.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program create_markdown_table !! This program demonstrates the creation of a Markdown table summarzing kind values used by a compiler: !! !! 1. Using the string_t user-defined structure constructor to encapsulate a ragged-edged string_t array. !! 2. Using operator(.separatedBy.) to concatenate string_t array elements with interspersed separators. !! 3. Using the elemental type-bound procedure \"bracket\" to prefix and suffix string_t array elements. !! !! Running the program with a command of the form \"fpm run --example create-markdown-table\" without quotes !! should produce a table similar to the following with \"flang\" replaced by the employed compiler's name. !! !! |compiler \\ kind|default|c_size_t|c_int64_t|c_intptr_t| !! |-|-|-|-|-| !! |flang|4|8|8|8| use iso_fortran_env , only : compiler_version use iso_c_binding , only : c_size_t , c_int64_t , c_intptr_t use julienne_string_m , only : string_t , operator (. separatedBy .) implicit none block integer row integer , parameter :: default_integer_kind = kind ( 0 ) integer , parameter :: body ( * , * ) = reshape ([ default_integer_kind , c_size_t , c_int64_t , c_intptr_t ], [ 1 , 4 ]) type ( string_t ), allocatable :: table_lines (:), header (:) header = & [ string_t ( \"compiler \\ kind\" ), string_t ( \"default\" ), string_t ( \"c_size_t\" ), string_t ( \"c_int64_t\" ), string_t ( \"c_intptr_t\" )] table_lines = markdown_table ( row_header = [ compiler ()], column_header = header , body_cells = string_t ( body ), side_borders = . true .) do row = 1 , size ( table_lines ) print '(a)' , table_lines ( row )% string () end do end block contains pure function markdown_table ( row_header , column_header , body_cells , side_borders ) result ( lines ) integer , parameter :: first_body_row = 3 type ( string_t ), intent ( in ) :: row_header ( first_body_row :), column_header (:), body_cells ( first_body_row :,:) logical , intent ( in ) :: side_borders character ( len = 1 ), parameter :: column_separator = \"|\" integer , parameter :: num_rule_lines = 1 type ( string_t ) lines ( size ( body_cells , 1 ) + rank ( column_header ) + num_rule_lines ) integer row , col if ( size ( column_header ) /= rank ( row_header ) + size ( body_cells , 2 )) error stop \"column size mismatch\" if ( size ( row_header ) /= size ( body_cells , 1 )) error stop \"row size mismatch\" lines ( 1 ) = column_header . separatedBy . column_separator lines ( 2 ) = [( \"-\" , col = 1 , size ( column_header ))] . separatedBy . column_separator do row = 3 , size ( lines ) lines ( row ) = [ row_header ( row ), body_cells ( row ,:)] . separatedBy . column_separator end do if ( side_borders ) lines = lines % bracket ( column_separator ) end function pure function compiler () type ( string_t ) compiler associate ( compiler_identity => compiler_version ()) if ( index ( compiler_identity , \"GCC\" ) /= 0 ) then compiler = string_t ( \"gfortran\" ) else if ( index ( compiler_identity , \"NAG\" ) /= 0 ) then compiler = string_t ( \"nagfor\" ) else if ( index ( compiler_identity , \"flang\" ) /= 0 ) then compiler = string_t ( \"flang\" ) else if ( index ( compiler_identity , \"Intel\" ) /= 0 ) then compiler = string_t ( \"ifx\" ) else #if (! defined(__GFORTRAN__)) || (GCC_VERSION > 140000) error stop \"unrecognized compiler: \" // compiler_identity #else error stop \"unrecognized compiler\" #endif end if end associate end function end program","tags":"","url":"sourcefile/create-markdown-table.f90.html"},{"title":"julienne_test_harness_m.f90 – Julienne","text":"This file depends on sourcefile~~julienne_test_harness_m.f90~~EfferentGraph sourcefile~julienne_test_harness_m.f90 julienne_test_harness_m.f90 sourcefile~julienne_test_fixture_m.f90 julienne_test_fixture_m.f90 sourcefile~julienne_test_harness_m.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_m.f90 julienne_test_m.F90 sourcefile~julienne_test_fixture_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_command_line_m.f90 julienne_command_line_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_user_defined_collectives_m.f90 julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.F90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~julienne_test_harness_m.f90~~AfferentGraph sourcefile~julienne_test_harness_m.f90 julienne_test_harness_m.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_harness_m.f90 sourcefile~julienne_test_harness_s.f90 julienne_test_harness_s.F90 sourcefile~julienne_test_harness_s.f90->sourcefile~julienne_test_harness_m.f90 sourcefile~assertions.f90 assertions.F90 sourcefile~assertions.f90->sourcefile~julienne_m.f90 sourcefile~check-for-command-line-argument.f90 check-for-command-line-argument.f90 sourcefile~check-for-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-command-line-flag-value.f90 get-command-line-flag-value.f90 sourcefile~get-command-line-flag-value.f90->sourcefile~julienne_m.f90 sourcefile~julienne_test_suite_s.f90 julienne_test_suite_s.F90 sourcefile~julienne_test_suite_s.f90->sourcefile~julienne_m.f90 sourcefile~scaffold.f90 scaffold.F90 sourcefile~scaffold.f90->sourcefile~julienne_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt module julienne_test_harness_m !! Define a test harness encapsulating an array of text fixtures, each of which can run a set of tests. use julienne_test_fixture_m , only : test_fixture_t implicit none private public :: test_harness_t type test_harness_t !! Encapsulate a set of test fixtures, each of which can run a set of tests. private type ( test_fixture_t ), allocatable :: test_fixture_ (:) contains procedure report_results end type interface test_harness_t module function component_constructor ( test_fixtures ) result ( test_harness ) ! can be pure in Fortran 2028 !! Component-wise user-defined structure constructor class ( test_fixture_t ) test_fixtures (:) type ( test_harness_t ) test_harness end function end interface interface module subroutine report_results ( self ) !! If command line includes -h or --help, print usage information and stop. !! Otherwise, run tests and print results, including diagnostics for any failures. !! Also, tally and print the numbers of passing tests, total tests, skipped tests. implicit none class ( test_harness_t ), intent ( in ) :: self end subroutine end interface end module julienne_test_harness_m","tags":"","url":"sourcefile/julienne_test_harness_m.f90.html"},{"title":"julienne_test_suite_m.f90 – Julienne","text":"This file depends on sourcefile~~julienne_test_suite_m.f90~~EfferentGraph sourcefile~julienne_test_suite_m.f90 julienne_test_suite_m.f90 sourcefile~julienne_file_m.f90 julienne_file_m.f90 sourcefile~julienne_test_suite_m.f90->sourcefile~julienne_file_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.F90 sourcefile~julienne_test_suite_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_file_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~julienne_test_suite_m.f90~~AfferentGraph sourcefile~julienne_test_suite_m.f90 julienne_test_suite_m.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_suite_m.f90 sourcefile~julienne_test_suite_s.f90 julienne_test_suite_s.F90 sourcefile~julienne_test_suite_s.f90->sourcefile~julienne_test_suite_m.f90 sourcefile~julienne_test_suite_s.f90->sourcefile~julienne_m.f90 sourcefile~assertions.f90 assertions.F90 sourcefile~assertions.f90->sourcefile~julienne_m.f90 sourcefile~check-for-command-line-argument.f90 check-for-command-line-argument.f90 sourcefile~check-for-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-command-line-flag-value.f90 get-command-line-flag-value.f90 sourcefile~get-command-line-flag-value.f90->sourcefile~julienne_m.f90 sourcefile~scaffold.f90 scaffold.F90 sourcefile~scaffold.f90->sourcefile~julienne_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt module julienne_test_suite_m use julienne_file_m , only : file_t use julienne_string_m , only : string_t implicit none private public :: test_suite_t type test_suite_t private type ( string_t ), allocatable :: test_subjects_ (:) contains procedure driver_file procedure stub_file procedure test_subjects procedure test_modules procedure test_types procedure to_file procedure write_driver end type interface test_suite_t pure module function from_components ( test_subjects ) result ( test_suite ) implicit none type ( string_t ), intent ( in ) :: test_subjects (:) type ( test_suite_t ) test_suite end function pure module function from_file ( file ) result ( test_suite ) implicit none type ( file_t ), intent ( in ) :: file type ( test_suite_t ) test_suite end function end interface interface pure module function test_subjects ( self ) result ( subjects ) implicit none class ( test_suite_t ), intent ( in ) :: self type ( string_t ), allocatable :: subjects (:) end function pure module function test_modules ( self ) result ( modules ) implicit none class ( test_suite_t ), intent ( in ) :: self type ( string_t ), allocatable :: modules (:) end function pure module function test_types ( self ) result ( types ) implicit none class ( test_suite_t ), intent ( in ) :: self type ( string_t ), allocatable :: types (:) end function pure module function to_file ( self ) result ( file ) implicit none class ( test_suite_t ), intent ( in ) :: self type ( file_t ) file end function pure module function driver_file ( self ) result ( file ) implicit none class ( test_suite_t ), intent ( in ) :: self type ( file_t ) file end function pure module function stub_file ( self , subject ) result ( file ) implicit none class ( test_suite_t ), intent ( in ) :: self type ( string_t ), intent ( in ) :: subject type ( file_t ) file end function module subroutine write_driver ( self , file_name ) implicit none class ( test_suite_t ), intent ( in ) :: self character ( len =* ), intent ( in ) :: file_name end subroutine end interface end module julienne_test_suite_m","tags":"","url":"sourcefile/julienne_test_suite_m.f90.html"},{"title":"check-for-command-line-argument.f90 – Julienne","text":"This file depends on sourcefile~~check-for-command-line-argument.f90~~EfferentGraph sourcefile~check-for-command-line-argument.f90 check-for-command-line-argument.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~check-for-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~julienne_assert_m.f90 julienne_assert_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_assert_m.f90 sourcefile~julienne_bin_m.f90 julienne_bin_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_bin_m.f90 sourcefile~julienne_command_line_m.f90 julienne_command_line_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_file_m.f90 julienne_file_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_file_m.f90 sourcefile~julienne_formats_m.f90 julienne_formats_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_formats_m.f90 sourcefile~julienne_github_ci_m.f90 julienne_github_ci_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_github_ci_m.f90 sourcefile~julienne_one_image_prints_m.f90 julienne_one_image_prints_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_one_image_prints_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_fixture_m.f90 julienne_test_fixture_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_harness_m.f90 julienne_test_harness_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_harness_m.f90 sourcefile~julienne_test_m.f90 julienne_test_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_suite_m.f90 julienne_test_suite_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_suite_m.f90 sourcefile~julienne_assert_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_file_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_one_image_prints_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_fixture_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_harness_m.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_user_defined_collectives_m.f90 julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_suite_m.f90->sourcefile~julienne_file_m.f90 sourcefile~julienne_test_suite_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt program check_for_command_line_argument !! This program shows how to use the command_line_t derived type to check whether a !! command-line argument is present.  Running this program as follows with the command !! should print an indication that the command-line argument is present: !! !!   fpm run --example check-for-command-line-argument -- --some-argument !! !! Running the program without the argument or with the argument spelled differently !! should print an indication that the argument is not present: !! !!   fpm run --example check-for-command-line-argument use julienne_m , only : command_line_t implicit none type ( command_line_t ) command_line if ( command_line % argument_present ([ \"--some-argument\" ])) then print '(a)' , new_line ( '' ) // \"argument 'some-argument' present\" // new_line ( '' ) else print '(a)' , new_line ( '' ) // \"argument 'some-argument' not present\" // new_line ( '' ) end if end program","tags":"","url":"sourcefile/check-for-command-line-argument.f90.html"},{"title":"julienne_one_image_prints_m.f90 – Julienne","text":"This file depends on sourcefile~~julienne_one_image_prints_m.f90~~EfferentGraph sourcefile~julienne_one_image_prints_m.f90 julienne_one_image_prints_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.F90 sourcefile~julienne_one_image_prints_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~julienne_one_image_prints_m.f90~~AfferentGraph sourcefile~julienne_one_image_prints_m.f90 julienne_one_image_prints_m.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_one_image_prints_m.f90 sourcefile~julienne_one_image_prints_s.f90 julienne_one_image_prints_s.F90 sourcefile~julienne_one_image_prints_s.f90->sourcefile~julienne_one_image_prints_m.f90 sourcefile~julienne_test_harness_s.f90 julienne_test_harness_s.F90 sourcefile~julienne_test_harness_s.f90->sourcefile~julienne_one_image_prints_m.f90 sourcefile~julienne_test_s.f90 julienne_test_s.F90 sourcefile~julienne_test_s.f90->sourcefile~julienne_one_image_prints_m.f90 sourcefile~assertions.f90 assertions.F90 sourcefile~assertions.f90->sourcefile~julienne_m.f90 sourcefile~check-for-command-line-argument.f90 check-for-command-line-argument.f90 sourcefile~check-for-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-command-line-flag-value.f90 get-command-line-flag-value.f90 sourcefile~get-command-line-flag-value.f90->sourcefile~julienne_m.f90 sourcefile~julienne_test_suite_s.f90 julienne_test_suite_s.F90 sourcefile~julienne_test_suite_s.f90->sourcefile~julienne_m.f90 sourcefile~scaffold.f90 scaffold.F90 sourcefile~scaffold.f90->sourcefile~julienne_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt module julienne_one_image_prints_m use julienne_string_m , only : string_t implicit none private public :: one_image_prints interface one_image_prints module subroutine print_string ( string ) implicit none type ( string_t ), intent ( in ) :: string (..) end subroutine module subroutine print_character ( character_string ) implicit none character ( len =* ), intent ( in ) :: character_string (..) end subroutine end interface end module julienne_one_image_prints_m","tags":"","url":"sourcefile/julienne_one_image_prints_m.f90.html"},{"title":"julienne_test_fixture_m.f90 – Julienne","text":"This file depends on sourcefile~~julienne_test_fixture_m.f90~~EfferentGraph sourcefile~julienne_test_fixture_m.f90 julienne_test_fixture_m.f90 sourcefile~julienne_test_m.f90 julienne_test_m.F90 sourcefile~julienne_test_fixture_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_command_line_m.f90 julienne_command_line_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_user_defined_collectives_m.f90 julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.F90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~julienne_test_fixture_m.f90~~AfferentGraph sourcefile~julienne_test_fixture_m.f90 julienne_test_fixture_m.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_harness_m.f90 julienne_test_harness_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_harness_m.f90 sourcefile~julienne_test_fixture_s.f90 julienne_test_fixture_s.F90 sourcefile~julienne_test_fixture_s.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_harness_m.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~assertions.f90 assertions.F90 sourcefile~assertions.f90->sourcefile~julienne_m.f90 sourcefile~check-for-command-line-argument.f90 check-for-command-line-argument.f90 sourcefile~check-for-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-command-line-flag-value.f90 get-command-line-flag-value.f90 sourcefile~get-command-line-flag-value.f90->sourcefile~julienne_m.f90 sourcefile~julienne_test_harness_s.f90 julienne_test_harness_s.F90 sourcefile~julienne_test_harness_s.f90->sourcefile~julienne_test_harness_m.f90 sourcefile~julienne_test_suite_s.f90 julienne_test_suite_s.F90 sourcefile~julienne_test_suite_s.f90->sourcefile~julienne_m.f90 sourcefile~scaffold.f90 scaffold.F90 sourcefile~scaffold.f90->sourcefile~julienne_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt module julienne_test_fixture_m !! Define a wrapper type for the test_t type to facilitate creating a polymorphic !! array of test_t objects. use julienne_test_m , only : test_t implicit none private public :: test_fixture_t type test_fixture_t private class ( test_t ), allocatable :: test_ contains procedure report end type interface test_fixture_t module function component_constructor ( test ) result ( test_fixture ) ! can be pure in Fortran 2023 !! Construct a test_fixture_t object from its components implicit none class ( test_t ), intent ( in ) :: test type ( test_fixture_t ) test_fixture end function end interface interface module subroutine report ( self , passes , tests , skips ) !! Print the test results and increment the tallies of passing tests, total tests, and skipped tests. implicit none class ( test_fixture_t ), intent ( in ) :: self integer , intent ( inout ) :: passes , tests , skips end subroutine end interface end module julienne_test_fixture_m","tags":"","url":"sourcefile/julienne_test_fixture_m.f90.html"},{"title":"julienne_assert_m.f90 – Julienne","text":"This file depends on sourcefile~~julienne_assert_m.f90~~EfferentGraph sourcefile~julienne_assert_m.f90 julienne_assert_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_assert_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.F90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~julienne_assert_m.f90~~AfferentGraph sourcefile~julienne_assert_m.f90 julienne_assert_m.f90 sourcefile~julienne_assert_s.f90 julienne_assert_s.f90 sourcefile~julienne_assert_s.f90->sourcefile~julienne_assert_m.f90 sourcefile~julienne_bin_s.f90 julienne_bin_s.F90 sourcefile~julienne_bin_s.f90->sourcefile~julienne_assert_m.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_assert_m.f90 sourcefile~julienne_string_s.f90 julienne_string_s.F90 sourcefile~julienne_string_s.f90->sourcefile~julienne_assert_m.f90 sourcefile~julienne_test_description_s.f90 julienne_test_description_s.F90 sourcefile~julienne_test_description_s.f90->sourcefile~julienne_assert_m.f90 sourcefile~assertions.f90 assertions.F90 sourcefile~assertions.f90->sourcefile~julienne_m.f90 sourcefile~check-for-command-line-argument.f90 check-for-command-line-argument.f90 sourcefile~check-for-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-command-line-flag-value.f90 get-command-line-flag-value.f90 sourcefile~get-command-line-flag-value.f90->sourcefile~julienne_m.f90 sourcefile~julienne_test_suite_s.f90 julienne_test_suite_s.F90 sourcefile~julienne_test_suite_s.f90->sourcefile~julienne_m.f90 sourcefile~scaffold.f90 scaffold.F90 sourcefile~scaffold.f90->sourcefile~julienne_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt module julienne_assert_m !! Define interfaces for writing assertions use julienne_test_diagnosis_m , only : test_diagnosis_t implicit none private public :: call_julienne_assert_ public :: julienne_assert interface julienne_assert module procedure idiomatic_assert module procedure logical_assert end interface interface call_julienne_assert_ pure module subroutine idiomatic_assert ( test_diagnosis , file , line , description ) !! Error terminate if `test_diagnosis%test_passed() == .false.`, in which !! case the stop code contains !! !!   1. The description argument if present and if called via !!      `julienne_assert; otherwise, a copy of the invoking statement, !!   2. The value of `test_diagnosis%diagnostics_string(),`, !!   3. The file name if present, and !!   4. The line number if present. !! !! Most compilers write the stop code to `error_unit`. !! !! Usage !! ----- !! !!   `call julienne_assert(.all. ([\"a\",\"b\",\"c\"] .isBefore. \"efg\"))` !!   `call_julienne_assert(.all. ([\"a\",\"b\",\"c\"] .isBefore. \"efg\"))` !! !! The first line above guarantees execution, whereas the second ensures !! removal when compiled without `-DASSERTIONS`.  When invoked via macro, !! the second line also causes the automatic insertion of items 1-4 above. implicit none type ( test_diagnosis_t ), intent ( in ) :: test_diagnosis character ( len =* ), intent ( in ), optional :: file , description integer , intent ( in ), optional :: line end subroutine pure module subroutine logical_assert ( assertion , file , line , description ) !! Error terminate if `assertion == .false.`, in which case the stop code !! contains !! !!   - The description argument if present and if called via !!    `julienne_assert; otherwise, a copy of the invoking statement, !!   - The file name if present, and !!   - The line number if present. !! !! Most compilers write the stop code to `error_unit`. !! !! !! Usage !! ----- !! !!   `call julienne_assert(associated(A))` !!   `call_julienne_assert(associated(A))` !! !! The first line above guarantees execution, whereas the second ensures !! removal when compiled without `-DASSERTIONS`.  When invoked via macro, !! the second line also causes the automatic insertion of items 1-4 above. implicit none logical , intent ( in ) :: assertion character ( len =* ), intent ( in ), optional :: file , description integer , intent ( in ), optional :: line end subroutine end interface end module julienne_assert_m","tags":"","url":"sourcefile/julienne_assert_m.f90.html"},{"title":"julienne_test_m.F90 – Julienne","text":"This file depends on sourcefile~~julienne_test_m.f90~~EfferentGraph sourcefile~julienne_test_m.f90 julienne_test_m.F90 sourcefile~julienne_command_line_m.f90 julienne_command_line_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_user_defined_collectives_m.f90 julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.F90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~julienne_test_m.f90~~AfferentGraph sourcefile~julienne_test_m.f90 julienne_test_m.F90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_fixture_m.f90 julienne_test_fixture_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_harness_m.f90 julienne_test_harness_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_harness_m.f90 sourcefile~julienne_test_fixture_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_s.f90 julienne_test_s.F90 sourcefile~julienne_test_s.f90->sourcefile~julienne_test_m.f90 sourcefile~assertions.f90 assertions.F90 sourcefile~assertions.f90->sourcefile~julienne_m.f90 sourcefile~check-for-command-line-argument.f90 check-for-command-line-argument.f90 sourcefile~check-for-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-command-line-flag-value.f90 get-command-line-flag-value.f90 sourcefile~get-command-line-flag-value.f90->sourcefile~julienne_m.f90 sourcefile~julienne_test_fixture_s.f90 julienne_test_fixture_s.F90 sourcefile~julienne_test_fixture_s.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_harness_m.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_suite_s.f90 julienne_test_suite_s.F90 sourcefile~julienne_test_suite_s.f90->sourcefile~julienne_m.f90 sourcefile~scaffold.f90 scaffold.F90 sourcefile~scaffold.f90->sourcefile~julienne_m.f90 sourcefile~julienne_test_harness_s.f90 julienne_test_harness_s.F90 sourcefile~julienne_test_harness_s.f90->sourcefile~julienne_test_harness_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt #include \"language-support.F90\" module julienne_test_m !! Define an abstract test_t type with deferred bindings (\"subject\" and \"results\") !! used by a type-bound procedure (\"report\") for reporting test results.  The \"report\" !! procedure thus represents an implementation of the Template Method pattern. use julienne_test_result_m , only : test_result_t use julienne_test_description_m , only : test_description_t , filter use julienne_user_defined_collectives_m , only : co_all use julienne_command_line_m , only : command_line_t implicit none private public :: test_t type , abstract :: test_t !! Facilitate testing and test reporting contains procedure ( subject_interface ), nopass , deferred :: subject procedure ( results_interface ), nopass , deferred :: results procedure :: run procedure :: report end type abstract interface pure function subject_interface () result ( specimen_description ) !! The result is the name of the test specimen (the subject of testing) character ( len = :), allocatable :: specimen_description end function function results_interface () result ( test_results ) !! The result is an array of test results for subsequent reporting in the \"report\" type-bound procedure import test_result_t type ( test_result_t ), allocatable :: test_results (:) end function end interface interface module function run ( test , test_descriptions ) result ( test_results ) !! Construct an array of test results from a set of tests filtered for descriptions and subjects with !! the '--contains' flag's value if the flag was included on the command line at program launch. implicit none class ( test_t ), intent ( in ) :: test type ( test_description_t ), intent ( in ) :: test_descriptions (:) type ( test_result_t ), allocatable :: test_results (:) end function module subroutine report ( test , passes , tests , skips ) !! Print the test results and increment the tallies of passing tests, total tests, and skipped tests. implicit none class ( test_t ), intent ( in ) :: test integer , intent ( inout ) :: passes , tests , skips end subroutine end interface end module julienne_test_m","tags":"","url":"sourcefile/julienne_test_m.f90.html"},{"title":"julienne_one_image_prints_s.F90 – Julienne","text":"This file depends on sourcefile~~julienne_one_image_prints_s.f90~~EfferentGraph sourcefile~julienne_one_image_prints_s.f90 julienne_one_image_prints_s.F90 sourcefile~julienne_one_image_prints_m.f90 julienne_one_image_prints_m.f90 sourcefile~julienne_one_image_prints_s.f90->sourcefile~julienne_one_image_prints_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.F90 sourcefile~julienne_one_image_prints_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt #include \"language-support.F90\" submodule ( julienne_one_image_prints_m ) julienne_one_image_prints_s implicit none integer , parameter :: printing_image = 1 contains module procedure print_string #if HAVE_MULTI_IMAGE_SUPPORT associate ( me => this_image ()) #else associate ( me => 1 ) #endif if ( printing_image == me ) then select rank ( string ) rank ( 0 ) print '(a)' , string % string () rank ( 1 ) block integer line do line = 1 , size ( string ) print '(a)' , string ( line )% string () end do end block rank default error stop \"print_string: unsupported rank\" end select end if end associate end procedure module procedure print_character #if HAVE_MULTI_IMAGE_SUPPORT associate ( me => this_image ()) #else associate ( me => 1 ) #endif if ( printing_image == me ) then select rank ( character_string ) rank ( 0 ) print '(a)' , character_string rank ( 1 ) block integer line do line = 1 , size ( character_string ) print '(a)' , character_string ( line ) end do end block rank default error stop \"print_character: unsupported rank\" end select end if end associate end procedure end submodule julienne_one_image_prints_s","tags":"","url":"sourcefile/julienne_one_image_prints_s.f90.html"},{"title":"julienne_test_fixture_s.F90 – Julienne","text":"This file depends on sourcefile~~julienne_test_fixture_s.f90~~EfferentGraph sourcefile~julienne_test_fixture_s.f90 julienne_test_fixture_s.F90 sourcefile~julienne_test_fixture_m.f90 julienne_test_fixture_m.f90 sourcefile~julienne_test_fixture_s.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_m.f90 julienne_test_m.F90 sourcefile~julienne_test_fixture_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_command_line_m.f90 julienne_command_line_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_user_defined_collectives_m.f90 julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.F90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt submodule ( julienne_test_fixture_m ) julienne_test_fixture_s implicit none contains module procedure component_constructor test_fixture % test_ = test end procedure module procedure report call self % test_ % report ( passes , tests , skips ) end procedure end submodule julienne_test_fixture_s","tags":"","url":"sourcefile/julienne_test_fixture_s.f90.html"},{"title":"julienne_user_defined_collectives_m.f90 – Julienne","text":"Files dependent on this one sourcefile~~julienne_user_defined_collectives_m.f90~~AfferentGraph sourcefile~julienne_user_defined_collectives_m.f90 julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_m.f90 julienne_test_m.F90 sourcefile~julienne_test_m.f90->sourcefile~julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_result_s.f90 julienne_test_result_s.f90 sourcefile~julienne_test_result_s.f90->sourcefile~julienne_user_defined_collectives_m.f90 sourcefile~julienne_user_defined_collectives_s.f90 julienne_user_defined_collectives_s.F90 sourcefile~julienne_user_defined_collectives_s.f90->sourcefile~julienne_user_defined_collectives_m.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_fixture_m.f90 julienne_test_fixture_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_harness_m.f90 julienne_test_harness_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_harness_m.f90 sourcefile~julienne_test_fixture_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_s.f90 julienne_test_s.F90 sourcefile~julienne_test_s.f90->sourcefile~julienne_test_m.f90 sourcefile~assertions.f90 assertions.F90 sourcefile~assertions.f90->sourcefile~julienne_m.f90 sourcefile~check-for-command-line-argument.f90 check-for-command-line-argument.f90 sourcefile~check-for-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-command-line-flag-value.f90 get-command-line-flag-value.f90 sourcefile~get-command-line-flag-value.f90->sourcefile~julienne_m.f90 sourcefile~julienne_test_fixture_s.f90 julienne_test_fixture_s.F90 sourcefile~julienne_test_fixture_s.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_harness_m.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_suite_s.f90 julienne_test_suite_s.F90 sourcefile~julienne_test_suite_s.f90->sourcefile~julienne_m.f90 sourcefile~scaffold.f90 scaffold.F90 sourcefile~scaffold.f90->sourcefile~julienne_m.f90 sourcefile~julienne_test_harness_s.f90 julienne_test_harness_s.F90 sourcefile~julienne_test_harness_s.f90->sourcefile~julienne_test_harness_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! !     (c) 2019-2020 Guide Star Engineering, LLC !     This Software was developed for the US Nuclear Regulatory Commission (US NRC) under contract !     \"Multi-Dimensional Physics Implementation into Fuel Analysis under Steady-state and Transients (FAST)\", !     contract # NRC-HQ-60-17-C-0007 ! module julienne_user_defined_collectives_m !! User-defined collective subroutines. implicit none interface impure elemental module subroutine co_all ( boolean ) !! If any image in a team calls this subroutine, then every image in the !! the same team must call this subroutine.  This subroutine sets the !! \"boolean\" argument .true. if it is true in all participating images !! upon entry and .false. otherwise. implicit none logical , intent ( inout ) :: boolean end subroutine end interface end module julienne_user_defined_collectives_m","tags":"","url":"sourcefile/julienne_user_defined_collectives_m.f90.html"},{"title":"julienne_command_line_s.f90 – Julienne","text":"This file depends on sourcefile~~julienne_command_line_s.f90~~EfferentGraph sourcefile~julienne_command_line_s.f90 julienne_command_line_s.f90 sourcefile~julienne_command_line_m.f90 julienne_command_line_m.f90 sourcefile~julienne_command_line_s.f90->sourcefile~julienne_command_line_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt submodule ( julienne_command_line_m ) julienne_command_line_s implicit none contains module procedure argument_present !! list of acceptable arguments !! sample list: [character(len=len(longest_argument)):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"] !! where dashes support Linux/macOS and slashes support Windows integer :: i , argnum , arglen !! loop counter, argument position, argument length character ( len = 32 ) arg !! argument position !! acceptable argument lengths (used to preclude extraneous trailing characters) associate ( acceptable_length => [( len ( trim ( acceptable_argument ( i ))), i = 1 , size ( acceptable_argument ))]) do argnum = 1 , command_argument_count () call get_command_argument ( argnum , arg , arglen ) if ( any ( & [( arg == acceptable_argument ( i ) . and . arglen == acceptable_length ( i ), i = 1 , size ( acceptable_argument ))] & )) then found = . true . return end if end do found = . false . end associate end procedure module procedure flag_value integer argnum , arglen , flag_value_length character ( len = :), allocatable :: arg do argnum = 1 , command_argument_count () - 1 call get_command_argument ( argnum , length = arglen ) allocate ( character ( len = arglen ) :: arg ) call get_command_argument ( argnum , arg ) if ( arg == flag ) then call get_command_argument ( argnum + 1 , length = flag_value_length ) allocate ( character ( len = flag_value_length ) :: flag_value ) call get_command_argument ( argnum + 1 , flag_value ) return end if deallocate ( arg ) end do flag_value = \"\" end procedure end submodule","tags":"","url":"sourcefile/julienne_command_line_s.f90.html"},{"title":"julienne_test_result_s.f90 – Julienne","text":"This file depends on sourcefile~~julienne_test_result_s.f90~~EfferentGraph sourcefile~julienne_test_result_s.f90 julienne_test_result_s.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_test_result_s.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_user_defined_collectives_m.f90 julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_result_s.f90->sourcefile~julienne_user_defined_collectives_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.F90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt submodule ( julienne_test_result_m ) julienne_test_result_s use julienne_user_defined_collectives_m , only : co_all implicit none contains module procedure construct_from_string test_result % description_ = description if ( present ( diagnosis )) test_result % diagnosis_ = diagnosis end procedure module procedure construct_from_character test_result % description_ = description if ( present ( diagnosis )) test_result % diagnosis_ = diagnosis end procedure module procedure characterize if (. not . allocated ( self % diagnosis_ )) then characterization = \"SKIPS  on \" // trim ( self % description_ % string ()) // \".\" else associate ( test_passed => self % diagnosis_ % test_passed ()) characterization = merge ( \"passes on \" , \"FAILS  on \" , test_passed ) // trim ( self % description_ % string ()) // \".\" if (. not . test_passed ) & characterization = characterization // new_line ( '' ) // \"      diagnostics: \" // self % diagnosis_ % diagnostics_string () end associate end if end procedure module procedure passed if (. not . allocated ( self % diagnosis_ )) then test_passed = . false . else test_passed = self % diagnosis_ % test_passed () end if call co_all ( test_passed ) end procedure module procedure skipped test_skipped = merge (. false ., . true ., allocated ( self % diagnosis_ )) call co_all ( test_skipped ) end procedure module procedure description_contains_string substring_found = self % description_contains_characters ( substring % string ()) end procedure module procedure description_contains_characters substring_found = index ( self % description_ % string (), substring ) /= 0 end procedure end submodule julienne_test_result_s","tags":"","url":"sourcefile/julienne_test_result_s.f90.html"},{"title":"julienne_test_diagnosis_m.F90 – Julienne","text":"This file depends on sourcefile~~julienne_test_diagnosis_m.f90~~EfferentGraph sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_string_m.f90 julienne_string_m.F90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~julienne_test_diagnosis_m.f90~~AfferentGraph sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_assert_m.f90 julienne_assert_m.f90 sourcefile~julienne_assert_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_bin_s.f90 julienne_bin_s.F90 sourcefile~julienne_bin_s.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_bin_s.f90->sourcefile~julienne_assert_m.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_assert_m.f90 sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_m.f90 julienne_test_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_fixture_m.f90 julienne_test_fixture_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_harness_m.f90 julienne_test_harness_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_harness_m.f90 sourcefile~julienne_string_s.f90 julienne_string_s.F90 sourcefile~julienne_string_s.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_string_s.f90->sourcefile~julienne_assert_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_diagnosis_s.f90 julienne_test_diagnosis_s.F90 sourcefile~julienne_test_diagnosis_s.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~assertions.f90 assertions.F90 sourcefile~assertions.f90->sourcefile~julienne_m.f90 sourcefile~check-for-command-line-argument.f90 check-for-command-line-argument.f90 sourcefile~check-for-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-command-line-flag-value.f90 get-command-line-flag-value.f90 sourcefile~get-command-line-flag-value.f90->sourcefile~julienne_m.f90 sourcefile~julienne_assert_s.f90 julienne_assert_s.f90 sourcefile~julienne_assert_s.f90->sourcefile~julienne_assert_m.f90 sourcefile~julienne_test_description_s.f90 julienne_test_description_s.F90 sourcefile~julienne_test_description_s.f90->sourcefile~julienne_assert_m.f90 sourcefile~julienne_test_description_s.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_result_s.f90 julienne_test_result_s.f90 sourcefile~julienne_test_result_s.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_s.f90 julienne_test_s.F90 sourcefile~julienne_test_s.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_s.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_suite_s.f90 julienne_test_suite_s.F90 sourcefile~julienne_test_suite_s.f90->sourcefile~julienne_m.f90 sourcefile~scaffold.f90 scaffold.F90 sourcefile~scaffold.f90->sourcefile~julienne_m.f90 sourcefile~julienne_test_fixture_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_fixture_s.f90 julienne_test_fixture_s.F90 sourcefile~julienne_test_fixture_s.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_harness_m.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_harness_s.f90 julienne_test_harness_s.F90 sourcefile~julienne_test_harness_s.f90->sourcefile~julienne_test_harness_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt #include \"language-support.F90\" module julienne_test_diagnosis_m !! Define abstractions, defined operations, and procedures for writing correctness checks use julienne_string_m , only : string_t use iso_c_binding , only : c_size_t , c_ptr implicit none private public :: test_diagnosis_t public :: diagnosis_function_i public :: operator ( // ) public :: operator (. all .) public :: operator (. also .) public :: operator (. and .) public :: operator (. approximates .) public :: operator (. isAfter .) public :: operator (. isAtLeast .) public :: operator (. isAtMost .) public :: operator (. isBefore .) public :: operator (. equalsExpected .) public :: operator (. expect .) public :: operator (. greaterThan .) public :: operator (. greaterThanOrEqualTo .) public :: operator (. lessThan .) public :: operator (. lessThanOrEqualTo .) public :: operator (. within .) public :: operator (. withinFraction .) public :: operator (. withinPercentage .) type test_diagnosis_t !! Encapsulate test outcome and diagnostic information private logical :: test_passed_ = . false . character ( len = :), allocatable :: diagnostics_string_ contains procedure , non_overridable :: test_passed procedure , non_overridable :: diagnostics_string end type abstract interface function diagnosis_function_i () result ( test_diagnosis ) import test_diagnosis_t implicit none type ( test_diagnosis_t ) test_diagnosis end function end interface integer , parameter :: default_real = kind ( 1. ), double_precision = kind ( 1 D0 ) #if HAVE_DERIVED_TYPE_KIND_PARAMETERS type operands_t ( k ) integer , kind :: k = default_real real ( k ) actual , expected end type #else type operands_t real actual , expected end type type double_precision_operands_t double precision actual , expected end type #endif interface operator ( // ) elemental module function append_string_if_test_failed ( lhs , rhs ) result ( lhs_cat_rhs ) implicit none class ( test_diagnosis_t ), intent ( in ) :: lhs type ( string_t ), intent ( in ) :: rhs type ( test_diagnosis_t ) lhs_cat_rhs end function elemental module function append_character_if_test_failed ( lhs , rhs ) result ( lhs_cat_rhs ) implicit none class ( test_diagnosis_t ), intent ( in ) :: lhs character ( len =* ), intent ( in ) :: rhs type ( test_diagnosis_t ) lhs_cat_rhs end function end interface interface operator (. all .) #ifndef __GFORTRAN__ pure module function aggregate_diagnosis ( diagnoses ) result ( diagnosis ) implicit none type ( test_diagnosis_t ), intent ( in ) :: diagnoses (..) type ( test_diagnosis_t ) diagnosis end function #else pure module function aggregate_scalar_diagnosis ( diagnoses ) result ( diagnosis ) implicit none type ( test_diagnosis_t ), intent ( in ) :: diagnoses type ( test_diagnosis_t ) diagnosis end function pure module function aggregate_vector_diagnosis ( diagnoses ) result ( diagnosis ) implicit none type ( test_diagnosis_t ), intent ( in ) :: diagnoses (:) type ( test_diagnosis_t ) diagnosis end function pure module function aggregate_rank2_diagnosis ( diagnoses ) result ( diagnosis ) implicit none type ( test_diagnosis_t ), intent ( in ) :: diagnoses (:,:) type ( test_diagnosis_t ) diagnosis end function pure module function aggregate_rank3_diagnosis ( diagnoses ) result ( diagnosis ) implicit none type ( test_diagnosis_t ), intent ( in ) :: diagnoses (:,:,:) type ( test_diagnosis_t ) diagnosis end function pure module function aggregate_rank4_diagnosis ( diagnoses ) result ( diagnosis ) implicit none type ( test_diagnosis_t ), intent ( in ) :: diagnoses (:,:,:,:) type ( test_diagnosis_t ) diagnosis end function pure module function aggregate_rank5_diagnosis ( diagnoses ) result ( diagnosis ) implicit none type ( test_diagnosis_t ), intent ( in ) :: diagnoses (:,:,:,:,:) type ( test_diagnosis_t ) diagnosis end function pure module function aggregate_rank6_diagnosis ( diagnoses ) result ( diagnosis ) implicit none type ( test_diagnosis_t ), intent ( in ) :: diagnoses (:,:,:,:,:,:) type ( test_diagnosis_t ) diagnosis end function pure module function aggregate_rank7_diagnosis ( diagnoses ) result ( diagnosis ) implicit none type ( test_diagnosis_t ), intent ( in ) :: diagnoses (:,:,:,:,:,:,:) type ( test_diagnosis_t ) diagnosis end function pure module function aggregate_rank8_diagnosis ( diagnoses ) result ( diagnosis ) implicit none type ( test_diagnosis_t ), intent ( in ) :: diagnoses (:,:,:,:,:,:,:,:) type ( test_diagnosis_t ) diagnosis end function pure module function aggregate_rank9_diagnosis ( diagnoses ) result ( diagnosis ) implicit none type ( test_diagnosis_t ), intent ( in ) :: diagnoses (:,:,:,:,:,:,:,:,:) type ( test_diagnosis_t ) diagnosis end function pure module function aggregate_rank10_diagnosis ( diagnoses ) result ( diagnosis ) implicit none type ( test_diagnosis_t ), intent ( in ) :: diagnoses (:,:,:,:,:,:,:,:,:,:) type ( test_diagnosis_t ) diagnosis end function pure module function aggregate_rank11_diagnosis ( diagnoses ) result ( diagnosis ) implicit none type ( test_diagnosis_t ), intent ( in ) :: diagnoses (:,:,:,:,:,:,:,:,:,:,:) type ( test_diagnosis_t ) diagnosis end function pure module function aggregate_rank12_diagnosis ( diagnoses ) result ( diagnosis ) implicit none type ( test_diagnosis_t ), intent ( in ) :: diagnoses (:,:,:,:,:,:,:,:,:,:,:,:) type ( test_diagnosis_t ) diagnosis end function pure module function aggregate_rank13_diagnosis ( diagnoses ) result ( diagnosis ) implicit none type ( test_diagnosis_t ), intent ( in ) :: diagnoses (:,:,:,:,:,:,:,:,:,:,:,:,:) type ( test_diagnosis_t ) diagnosis end function pure module function aggregate_rank14_diagnosis ( diagnoses ) result ( diagnosis ) implicit none type ( test_diagnosis_t ), intent ( in ) :: diagnoses (:,:,:,:,:,:,:,:,:,:,:,:,:,:) type ( test_diagnosis_t ) diagnosis end function pure module function aggregate_rank15_diagnosis ( diagnoses ) result ( diagnosis ) implicit none type ( test_diagnosis_t ), intent ( in ) :: diagnoses (:,:,:,:,:,:,:,:,:,:,:,:,:,:,:) type ( test_diagnosis_t ) diagnosis end function #endif end interface interface operator (. also .) elemental module function also ( lhs , rhs ) result ( diagnosis ) implicit none type ( test_diagnosis_t ), intent ( in ) :: lhs , rhs type ( test_diagnosis_t ) diagnosis end function end interface interface operator (. and .) module procedure also end interface interface operator (. approximates .) elemental module function approximates_real ( actual , expected ) result ( operands ) implicit none real , intent ( in ) :: actual , expected type ( operands_t ) operands end function elemental module function approximates_double_precision ( actual , expected ) result ( operands ) implicit none double precision , intent ( in ) :: actual , expected #if HAVE_DERIVED_TYPE_KIND_PARAMETERS type ( operands_t ( double_precision )) operands #else type ( double_precision_operands_t ) operands #endif end function end interface interface operator (. expect .) elemental module function expect ( expected_true ) result ( test_diagnosis ) implicit none logical , intent ( in ) :: expected_true type ( test_diagnosis_t ) test_diagnosis end function end interface interface operator (. equalsExpected .) elemental module function equals_expected_c_ptr ( actual , expected ) result ( test_diagnosis ) implicit none type ( c_ptr ), intent ( in ) :: actual , expected type ( test_diagnosis_t ) test_diagnosis end function elemental module function equals_expected_integer ( actual , expected ) result ( test_diagnosis ) implicit none integer , intent ( in ) :: actual , expected type ( test_diagnosis_t ) test_diagnosis end function elemental module function equals_expected_integer_c_size_t ( actual , expected ) result ( test_diagnosis ) implicit none integer ( c_size_t ), intent ( in ) :: actual , expected type ( test_diagnosis_t ) test_diagnosis end function elemental module function equals_expected_character ( actual , expected ) result ( test_diagnosis ) implicit none character ( len =* ), intent ( in ) :: actual , expected type ( test_diagnosis_t ) test_diagnosis end function elemental module function equals_expected_string ( actual , expected ) result ( test_diagnosis ) implicit none type ( string_t ), intent ( in ) :: actual , expected type ( test_diagnosis_t ) test_diagnosis end function elemental module function equals_expected_character_vs_string ( actual , expected ) result ( test_diagnosis ) implicit none character ( len =* ), intent ( in ) :: actual type ( string_t ), intent ( in ) :: expected type ( test_diagnosis_t ) test_diagnosis end function elemental module function equals_expected_string_vs_character ( actual , expected ) result ( test_diagnosis ) implicit none type ( string_t ), intent ( in ) :: actual character ( len =* ), intent ( in ) :: expected type ( test_diagnosis_t ) test_diagnosis end function end interface interface operator (. lessThan .) elemental module function less_than_real ( actual , expected_ceiling ) result ( test_diagnosis ) implicit none real , intent ( in ) :: actual , expected_ceiling type ( test_diagnosis_t ) test_diagnosis end function elemental module function less_than_double ( actual , expected_ceiling ) result ( test_diagnosis ) implicit none double precision , intent ( in ) :: actual , expected_ceiling type ( test_diagnosis_t ) test_diagnosis end function elemental module function less_than_integer ( actual , expected_ceiling ) result ( test_diagnosis ) implicit none integer , intent ( in ) :: actual , expected_ceiling type ( test_diagnosis_t ) test_diagnosis end function end interface interface operator (. lessThanOrEqualTo .) elemental module function less_than_or_equal_to_integer ( actual , expected_max ) result ( test_diagnosis ) implicit none integer , intent ( in ) :: actual , expected_max type ( test_diagnosis_t ) test_diagnosis end function elemental module function less_than_or_equal_to_real ( actual , expected_max ) result ( test_diagnosis ) implicit none real , intent ( in ) :: actual , expected_max type ( test_diagnosis_t ) test_diagnosis end function elemental module function less_than_or_equal_to_double_precision ( actual , expected_max ) result ( test_diagnosis ) implicit none double precision , intent ( in ) :: actual , expected_max type ( test_diagnosis_t ) test_diagnosis end function end interface interface operator (. isAtMost .) module procedure less_than_or_equal_to_integer module procedure less_than_or_equal_to_real module procedure less_than_or_equal_to_double_precision end interface interface operator (. isAtLeast .) module procedure greater_than_or_equal_to_integer module procedure greater_than_or_equal_to_real module procedure greater_than_or_equal_to_double_precision end interface interface operator (. isBefore .) elemental module function alphabetical_character_vs_character ( lhs , rhs ) result ( test_diagnosis ) implicit none character ( len =* ), intent ( in ) :: lhs , rhs type ( test_diagnosis_t ) test_diagnosis end function elemental module function alphabetical_string_vs_string ( lhs , rhs ) result ( test_diagnosis ) implicit none type ( string_t ), intent ( in ) :: lhs , rhs type ( test_diagnosis_t ) test_diagnosis end function elemental module function alphabetical_character_vs_string ( lhs , rhs ) result ( test_diagnosis ) implicit none character ( len =* ), intent ( in ) :: lhs type ( string_t ), intent ( in ) :: rhs type ( test_diagnosis_t ) test_diagnosis end function elemental module function alphabetical_string_vs_character ( lhs , rhs ) result ( test_diagnosis ) implicit none type ( string_t ), intent ( in ) :: lhs character ( len =* ), intent ( in ) :: rhs type ( test_diagnosis_t ) test_diagnosis end function end interface interface operator (. isAfter .) elemental module function reverse_alphabetical_character_vs_character ( lhs , rhs ) result ( test_diagnosis ) implicit none character ( len =* ), intent ( in ) :: lhs , rhs type ( test_diagnosis_t ) test_diagnosis end function elemental module function reverse_alphabetical_string_vs_string ( lhs , rhs ) result ( test_diagnosis ) implicit none type ( string_t ), intent ( in ) :: lhs , rhs type ( test_diagnosis_t ) test_diagnosis end function elemental module function reverse_alphabetical_character_vs_string ( lhs , rhs ) result ( test_diagnosis ) implicit none character ( len =* ), intent ( in ) :: lhs type ( string_t ), intent ( in ) :: rhs type ( test_diagnosis_t ) test_diagnosis end function elemental module function reverse_alphabetical_string_vs_character ( lhs , rhs ) result ( test_diagnosis ) implicit none type ( string_t ), intent ( in ) :: lhs character ( len =* ), intent ( in ) :: rhs type ( test_diagnosis_t ) test_diagnosis end function end interface interface operator (. greaterThanOrEqualTo .) elemental module function greater_than_or_equal_to_integer ( actual , expected_min ) result ( test_diagnosis ) implicit none integer , intent ( in ) :: actual , expected_min type ( test_diagnosis_t ) test_diagnosis end function elemental module function greater_than_or_equal_to_real ( actual , expected_min ) result ( test_diagnosis ) implicit none real , intent ( in ) :: actual , expected_min type ( test_diagnosis_t ) test_diagnosis end function elemental module function greater_than_or_equal_to_double_precision ( actual , expected_min ) result ( test_diagnosis ) implicit none double precision , intent ( in ) :: actual , expected_min type ( test_diagnosis_t ) test_diagnosis end function end interface interface operator (. greaterThan .) elemental module function greater_than_real ( actual , expected_floor ) result ( test_diagnosis ) implicit none real , intent ( in ) :: actual , expected_floor type ( test_diagnosis_t ) test_diagnosis end function elemental module function greater_than_double ( actual , expected_floor ) result ( test_diagnosis ) implicit none double precision , intent ( in ) :: actual , expected_floor type ( test_diagnosis_t ) test_diagnosis end function elemental module function greater_than_integer ( actual , expected_floor ) result ( test_diagnosis ) implicit none integer , intent ( in ) :: actual , expected_floor type ( test_diagnosis_t ) test_diagnosis end function end interface interface operator (. within .) elemental module function within_real ( operands , tolerance ) result ( test_diagnosis ) implicit none type ( operands_t ), intent ( in ) :: operands real , intent ( in ) :: tolerance type ( test_diagnosis_t ) test_diagnosis end function elemental module function within_double_precision ( operands , tolerance ) result ( test_diagnosis ) implicit none #if HAVE_DERIVED_TYPE_KIND_PARAMETERS type ( operands_t ( double_precision )), intent ( in ) :: operands #else type ( double_precision_operands_t ), intent ( in ) :: operands #endif double precision , intent ( in ) :: tolerance type ( test_diagnosis_t ) test_diagnosis end function end interface interface operator (. withinFraction .) elemental module function within_real_fraction ( operands , fractional_tolerance ) result ( test_diagnosis ) implicit none type ( operands_t ), intent ( in ) :: operands real , intent ( in ) :: fractional_tolerance type ( test_diagnosis_t ) test_diagnosis end function elemental module function within_double_precision_fraction ( operands , fractional_tolerance ) result ( test_diagnosis ) implicit none #if HAVE_DERIVED_TYPE_KIND_PARAMETERS type ( operands_t ( double_precision )), intent ( in ) :: operands #else type ( double_precision_operands_t ), intent ( in ) :: operands #endif double precision , intent ( in ) :: fractional_tolerance type ( test_diagnosis_t ) test_diagnosis end function end interface interface operator (. withinPercentage .) elemental module function within_real_percentage ( operands , percentage_tolerance ) result ( test_diagnosis ) implicit none type ( operands_t ), intent ( in ) :: operands real , intent ( in ) :: percentage_tolerance type ( test_diagnosis_t ) test_diagnosis end function elemental module function within_double_precision_percentage ( operands , percentage_tolerance ) result ( test_diagnosis ) implicit none #if HAVE_DERIVED_TYPE_KIND_PARAMETERS type ( operands_t ( double_precision )), intent ( in ) :: operands #else type ( double_precision_operands_t ), intent ( in ) :: operands #endif double precision , intent ( in ) :: percentage_tolerance type ( test_diagnosis_t ) test_diagnosis end function end interface interface test_diagnosis_t elemental module function construct_from_string_t ( test_passed , diagnostics_string ) result ( test_diagnosis ) !! The result is a test_diagnosis_t object with the components defined by the dummy arguments implicit none logical , intent ( in ) :: test_passed type ( string_t ), intent ( in ) :: diagnostics_string type ( test_diagnosis_t ) test_diagnosis end function elemental module function construct_from_character ( test_passed , diagnostics_string ) result ( test_diagnosis ) !! The result is a test_diagnosis_t object with the components defined by the dummy arguments implicit none logical , intent ( in ) :: test_passed character ( len =* ), intent ( in ) :: diagnostics_string type ( test_diagnosis_t ) test_diagnosis end function end interface interface elemental module function test_passed ( self ) result ( passed ) !! The result is .true. if the test passed and false otherwise implicit none class ( test_diagnosis_t ), intent ( in ) :: self logical passed end function elemental module function diagnostics_string ( self ) result ( string_ ) !! The result is a string describing the condition(s) that caused a test failure implicit none class ( test_diagnosis_t ), intent ( in ) :: self type ( string_t ) string_ end function end interface end module julienne_test_diagnosis_m","tags":"","url":"sourcefile/julienne_test_diagnosis_m.f90.html"},{"title":"assertions.F90 – Julienne","text":"This file depends on sourcefile~~assertions.f90~~EfferentGraph sourcefile~assertions.f90 assertions.F90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~assertions.f90->sourcefile~julienne_m.f90 sourcefile~julienne_assert_m.f90 julienne_assert_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_assert_m.f90 sourcefile~julienne_bin_m.f90 julienne_bin_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_bin_m.f90 sourcefile~julienne_command_line_m.f90 julienne_command_line_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_file_m.f90 julienne_file_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_file_m.f90 sourcefile~julienne_formats_m.f90 julienne_formats_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_formats_m.f90 sourcefile~julienne_github_ci_m.f90 julienne_github_ci_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_github_ci_m.f90 sourcefile~julienne_one_image_prints_m.f90 julienne_one_image_prints_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_one_image_prints_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_fixture_m.f90 julienne_test_fixture_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_harness_m.f90 julienne_test_harness_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_harness_m.f90 sourcefile~julienne_test_m.f90 julienne_test_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_suite_m.f90 julienne_test_suite_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_suite_m.f90 sourcefile~julienne_assert_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_file_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_one_image_prints_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_fixture_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_harness_m.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_user_defined_collectives_m.f90 julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_suite_m.f90->sourcefile~julienne_file_m.f90 sourcefile~julienne_test_suite_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt #include \"julienne-assert-macros.h\" program assertions !! Example: two true assertions followed by one intentionally false assertion use julienne_m , only : & call_julienne_assert_ & , operator (. approximates .) & , operator (. equalsExpected .) & , operator (. within .) & , operator (. withinPercentage .) implicit none #if ! ASSERTIONS print * print '(a)' , \"Skipping asertions.\" print '(a)' , \"Use a command such as the following to rerun with assertions:\" print '(a)' , \"fpm run --example assertions --flag -DASSERTIONS\" #else print '(a)' , new_line ( '' ) print '(a)' , \"This program evaluates the following true assertions that should run silently:\" // new_line ( '' ) print '(a)' , \"   call_julienne_assert(pi_ .approximates. pi .within. absolute_tolerance)\" print '(a)' , \"   call_julienne_assert(pi_ .approximates. pi .withinPercentage. relative_tolerance)\" // new_line ( '' ) print '(a)' , \"where pi_ = 22./7., pi 3.14152654, absolute_tolerance = 0.1, and relative_tolerance = 1.0.\" // new_line ( '' ) print '(a)' , \"The program will then evaluate one false assertion:\" // new_line ( '' ) print '(a)' , \"   call_julienne_assert(1 .equalsExpected. 2)\" // new_line ( '' ) print '(a)' , \"which should initiate error termination and provide a diagnostic message:\" // new_line ( '' ) #endif block real , parameter :: pi_ = 2 2. / 7. real , parameter :: pi = 3.141592654 real , parameter :: absolute_tolerance = 0.2 real , parameter :: relative_tolerance = 1.0 ! percentage call_julienne_assert ( pi_ . approximates . pi . within . absolute_tolerance ) call_julienne_assert ( pi_ . approximates . pi . withinPercentage . relative_tolerance ) call_julienne_assert ( 1 . equalsExpected . 2 ) ! intentional failure end block end program","tags":"","url":"sourcefile/assertions.f90.html"},{"title":"julienne_github_ci_s.f90 – Julienne","text":"This file depends on sourcefile~~julienne_github_ci_s.f90~~EfferentGraph sourcefile~julienne_github_ci_s.f90 julienne_github_ci_s.f90 sourcefile~julienne_github_ci_m.f90 julienne_github_ci_m.f90 sourcefile~julienne_github_ci_s.f90->sourcefile~julienne_github_ci_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt submodule ( julienne_github_ci_m ) julienne_github_ci_s implicit none contains module procedure GitHub_CI integer name_length character ( len = :), allocatable :: CI call get_environment_variable ( \"CI\" , length = name_length ) if ( name_length == 0 ) then GitHub_CI = . false . else allocate ( character ( len = name_length ) :: CI ) call get_environment_variable ( \"CI\" , value = CI ) GitHub_CI = merge (. true ., . false ., CI == \"true\" ) end if end procedure end submodule","tags":"","url":"sourcefile/julienne_github_ci_s.f90.html"},{"title":"julienne_command_line_m.f90 – Julienne","text":"Files dependent on this one sourcefile~~julienne_command_line_m.f90~~AfferentGraph sourcefile~julienne_command_line_m.f90 julienne_command_line_m.f90 sourcefile~julienne_command_line_s.f90 julienne_command_line_s.f90 sourcefile~julienne_command_line_s.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_test_m.f90 julienne_test_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_fixture_m.f90 julienne_test_fixture_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_harness_m.f90 julienne_test_harness_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_harness_m.f90 sourcefile~julienne_test_description_s.f90 julienne_test_description_s.F90 sourcefile~julienne_test_description_s.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_test_harness_s.f90 julienne_test_harness_s.F90 sourcefile~julienne_test_harness_s.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_test_harness_s.f90->sourcefile~julienne_test_harness_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~assertions.f90 assertions.F90 sourcefile~assertions.f90->sourcefile~julienne_m.f90 sourcefile~check-for-command-line-argument.f90 check-for-command-line-argument.f90 sourcefile~check-for-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-command-line-flag-value.f90 get-command-line-flag-value.f90 sourcefile~get-command-line-flag-value.f90->sourcefile~julienne_m.f90 sourcefile~julienne_test_fixture_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_s.f90 julienne_test_s.F90 sourcefile~julienne_test_s.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_suite_s.f90 julienne_test_suite_s.F90 sourcefile~julienne_test_suite_s.f90->sourcefile~julienne_m.f90 sourcefile~scaffold.f90 scaffold.F90 sourcefile~scaffold.f90->sourcefile~julienne_m.f90 sourcefile~julienne_test_fixture_s.f90 julienne_test_fixture_s.F90 sourcefile~julienne_test_fixture_s.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_harness_m.f90->sourcefile~julienne_test_fixture_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt module julienne_command_line_m !! return command line argument information implicit none private public :: command_line_t type command_line_t contains procedure , nopass :: argument_present procedure , nopass :: flag_value end type interface module function argument_present ( acceptable_argument ) result ( found ) implicit none !! result is .true. only if a command-line argument matches an element of this function's argument character ( len =* ), intent ( in ) :: acceptable_argument (:) !! sample list: [character(len=len(<longest_argument>)):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"] !! where dashes support Linux/macOS, slashes support Windows, and <longest_argument> must be replaced !! by the longest list element (\"--benchmark\" above) logical found end function module function flag_value ( flag ) !! result = { the value passed immediately after a command-line flag if the flag is present or !!          { an empty string otherwise. implicit none character ( len =* ), intent ( in ) :: flag character ( len = :), allocatable :: flag_value end function end interface end module","tags":"","url":"sourcefile/julienne_command_line_m.f90.html"},{"title":"julienne_user_defined_collectives_s.F90 – Julienne","text":"This file depends on sourcefile~~julienne_user_defined_collectives_s.f90~~EfferentGraph sourcefile~julienne_user_defined_collectives_s.f90 julienne_user_defined_collectives_s.F90 sourcefile~julienne_user_defined_collectives_m.f90 julienne_user_defined_collectives_m.f90 sourcefile~julienne_user_defined_collectives_s.f90->sourcefile~julienne_user_defined_collectives_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! !     (c) 2019-2020 Guide Star Engineering, LLC !     This Software was developed for the US Nuclear Regulatory Commission (US NRC) under contract !     \"Multi-Dimensional Physics Implementation into Fuel Analysis under Steady-state and Transients (FAST)\", !     contract # NRC-HQ-60-17-C-0007 ! submodule ( julienne_user_defined_collectives_m ) julienne_user_defined_collectives_s implicit none contains module procedure co_all #if HAVE_MULTI_IMAGE_SUPPORT call co_reduce ( boolean , both ) #endif contains pure function both ( lhs , rhs ) result ( lhs_and_rhs ) logical , intent ( in ) :: lhs , rhs logical lhs_and_rhs lhs_and_rhs = lhs . and . rhs end function end procedure end submodule julienne_user_defined_collectives_s","tags":"","url":"sourcefile/julienne_user_defined_collectives_s.f90.html"},{"title":"julienne_string_m.F90 – Julienne","text":"Files dependent on this one sourcefile~~julienne_string_m.f90~~AfferentGraph sourcefile~julienne_string_m.f90 julienne_string_m.F90 sourcefile~create-markdown-table.f90 create-markdown-table.F90 sourcefile~create-markdown-table.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_file_m.f90 julienne_file_m.f90 sourcefile~julienne_file_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_file_m.f90 sourcefile~julienne_one_image_prints_m.f90 julienne_one_image_prints_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_one_image_prints_m.f90 sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_suite_m.f90 julienne_test_suite_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_suite_m.f90 sourcefile~julienne_assert_m.f90 julienne_assert_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_assert_m.f90 sourcefile~julienne_test_m.f90 julienne_test_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_fixture_m.f90 julienne_test_fixture_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_harness_m.f90 julienne_test_harness_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_harness_m.f90 sourcefile~julienne_one_image_prints_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_string_s.f90 julienne_string_s.F90 sourcefile~julienne_string_s.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_string_s.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_string_s.f90->sourcefile~julienne_assert_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_diagnosis_s.f90 julienne_test_diagnosis_s.F90 sourcefile~julienne_test_diagnosis_s.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_diagnosis_s.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_harness_s.f90 julienne_test_harness_s.F90 sourcefile~julienne_test_harness_s.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_harness_s.f90->sourcefile~julienne_one_image_prints_m.f90 sourcefile~julienne_test_harness_s.f90->sourcefile~julienne_test_harness_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_s.f90 julienne_test_s.F90 sourcefile~julienne_test_s.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_s.f90->sourcefile~julienne_one_image_prints_m.f90 sourcefile~julienne_test_s.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_s.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_suite_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_suite_m.f90->sourcefile~julienne_file_m.f90 sourcefile~assertions.f90 assertions.F90 sourcefile~assertions.f90->sourcefile~julienne_m.f90 sourcefile~check-for-command-line-argument.f90 check-for-command-line-argument.f90 sourcefile~check-for-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-command-line-flag-value.f90 get-command-line-flag-value.f90 sourcefile~get-command-line-flag-value.f90->sourcefile~julienne_m.f90 sourcefile~julienne_assert_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_bin_s.f90 julienne_bin_s.F90 sourcefile~julienne_bin_s.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_bin_s.f90->sourcefile~julienne_assert_m.f90 sourcefile~julienne_file_s.f90 julienne_file_s.F90 sourcefile~julienne_file_s.f90->sourcefile~julienne_file_m.f90 sourcefile~julienne_one_image_prints_s.f90 julienne_one_image_prints_s.F90 sourcefile~julienne_one_image_prints_s.f90->sourcefile~julienne_one_image_prints_m.f90 sourcefile~julienne_test_description_s.f90 julienne_test_description_s.F90 sourcefile~julienne_test_description_s.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_description_s.f90->sourcefile~julienne_assert_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_result_s.f90 julienne_test_result_s.f90 sourcefile~julienne_test_result_s.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_suite_s.f90 julienne_test_suite_s.F90 sourcefile~julienne_test_suite_s.f90->sourcefile~julienne_m.f90 sourcefile~julienne_test_suite_s.f90->sourcefile~julienne_test_suite_m.f90 sourcefile~scaffold.f90 scaffold.F90 sourcefile~scaffold.f90->sourcefile~julienne_m.f90 sourcefile~julienne_assert_s.f90 julienne_assert_s.f90 sourcefile~julienne_assert_s.f90->sourcefile~julienne_assert_m.f90 sourcefile~julienne_test_fixture_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_fixture_s.f90 julienne_test_fixture_s.F90 sourcefile~julienne_test_fixture_s.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_harness_m.f90->sourcefile~julienne_test_fixture_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt module julienne_string_m use iso_c_binding , only : c_bool , c_size_t implicit none private public :: string_t public :: array_of_strings ! construct 1D string_t array from a string containing delimited substrings public :: operator (. cat .) ! element-wise concatenation unary operator public :: operator (. csv .) ! comma-separated values unary operator public :: operator (. separatedBy .), operator (. sv .) ! separated-values binary operator type string_t private character ( len = :), allocatable :: string_ contains procedure :: as_character generic :: string => as_character procedure :: is_allocated procedure :: get_json_key procedure :: file_extension procedure :: base_name procedure :: bracket generic :: operator ( // ) => string_t_cat_string_t , string_t_cat_character , character_cat_string_t generic :: operator ( /= ) => string_t_ne_string_t , string_t_ne_character , character_ne_string_t generic :: operator ( == ) => string_t_eq_string_t , string_t_eq_character , character_eq_string_t generic :: assignment ( = ) => assign_string_t_to_character , assign_character_to_string_t generic :: get_json_value => get_string_with_string_key , get_string_with_character_key & , get_character_with_string_key , get_character_with_character_key & , get_string_t_array_with_character_key , get_string_t_array_with_string_t_key & , get_real , get_real_with_character_key & , get_logical , get_logical_with_character_key & , get_real_array , get_real_array_with_character_key & , get_integer_array , get_integer_array_with_character_key & , get_integer , get_integer_with_character_key & , get_double_precision , get_double_precision_with_character_key & , get_double_precision_array , get_double_precision_array_with_character_key procedure , private :: get_string_with_string_key , get_string_with_character_key procedure , private :: get_character_with_string_key , get_character_with_character_key procedure , private :: get_string_t_array_with_character_key , get_string_t_array_with_string_t_key procedure , private :: get_real , get_real_with_character_key procedure , private :: get_logical , get_logical_with_character_key procedure , private :: get_integer , get_integer_with_character_key procedure , private :: get_real_array , get_real_array_with_character_key procedure , private :: get_integer_array , get_integer_array_with_character_key procedure , private :: get_double_precision , get_double_precision_with_character_key procedure , private :: get_double_precision_array , get_double_precision_array_with_character_key procedure , private :: string_t_ne_string_t , string_t_ne_character procedure , private :: string_t_eq_string_t , string_t_eq_character procedure , private :: assign_character_to_string_t procedure , private :: string_t_cat_string_t , string_t_cat_character procedure , private , pass ( rhs ) :: character_cat_string_t procedure , private , pass ( rhs ) :: character_ne_string_t procedure , private , pass ( rhs ) :: character_eq_string_t procedure , private , pass ( rhs ) :: assign_string_t_to_character end type interface string_t elemental module function from_characters ( string ) result ( new_string ) implicit none character ( len =* ), intent ( in ) :: string type ( string_t ) new_string end function elemental module function from_default_integer ( i ) result ( string ) implicit none integer , intent ( in ) :: i type ( string_t ) string end function elemental module function from_integer_c_size_t ( i ) result ( string ) implicit none integer ( c_size_t ), intent ( in ) :: i type ( string_t ) string end function elemental module function from_default_real ( x ) result ( string ) implicit none real , intent ( in ) :: x type ( string_t ) string end function elemental module function from_double_precision ( x ) result ( string ) implicit none double precision , intent ( in ) :: x type ( string_t ) string end function elemental module function from_default_logical ( b ) result ( string ) implicit none logical , intent ( in ) :: b type ( string_t ) string end function elemental module function from_logical_c_bool ( b ) result ( string ) implicit none logical ( c_bool ), intent ( in ) :: b type ( string_t ) string end function elemental module function from_default_complex ( z ) result ( string ) implicit none complex , intent ( in ) :: z type ( string_t ) string end function elemental module function from_double_precision_complex ( z ) result ( string ) implicit none complex ( kind = kind ( 1 D0 )), intent ( in ) :: z type ( string_t ) string end function end interface interface operator (. cat .) pure module function concatenate_elements ( strings ) result ( concatenated_strings ) implicit none type ( string_t ), intent ( in ) :: strings (:) type ( string_t ) concatenated_strings end function end interface interface operator (. csv .) pure module function strings_with_comma_separator ( strings ) result ( csv ) implicit none type ( string_t ), intent ( in ) :: strings (:) type ( string_t ) csv end function pure module function characters_with_comma_separator ( strings ) result ( csv ) implicit none character ( len =* ), intent ( in ) :: strings (:) type ( string_t ) csv end function end interface interface operator (. sv .) pure module function strings_with_character_separator ( strings , separator ) result ( sv ) implicit none type ( string_t ) , intent ( in ) :: strings (:) character ( len =* ), intent ( in ) :: separator type ( string_t ) sv end function pure module function characters_with_character_separator ( strings , separator ) result ( sv ) implicit none character ( len =* ), intent ( in ) :: strings (:), separator type ( string_t ) sv end function pure module function characters_with_string_separator ( strings , separator ) result ( sv ) implicit none character ( len =* ), intent ( in ) :: strings (:) type ( string_t ) , intent ( in ) :: separator type ( string_t ) sv end function pure module function strings_with_string_t_separator ( strings , separator ) result ( sv ) implicit none type ( string_t ), intent ( in ) :: strings (:), separator type ( string_t ) sv end function end interface interface operator (. separatedBy .) module procedure strings_with_character_separator , strings_with_string_t_separator module procedure characters_with_character_separator , characters_with_string_separator end interface interface pure module function as_character ( self ) result ( raw_string ) implicit none class ( string_t ), intent ( in ) :: self character ( len = :), allocatable :: raw_string end function pure module function array_of_strings ( delimited_strings , delimiter ) result ( strings_array ) implicit none character ( len =* ), intent ( in ) :: delimited_strings , delimiter type ( string_t ), allocatable :: strings_array (:) end function elemental module function is_allocated ( self ) result ( string_allocated ) implicit none class ( string_t ), intent ( in ) :: self logical string_allocated end function elemental module function get_json_key ( self ) result ( unquoted_key ) implicit none class ( string_t ), intent ( in ) :: self type ( string_t ) unquoted_key end function elemental module function file_extension ( self ) result ( extension ) !! result contains all characters in file_name after the last dot (.) class ( string_t ), intent ( in ) :: self type ( string_t ) extension end function elemental module function base_name ( self ) result ( base ) !! result contains all characters in file_name before the last dot (.) class ( string_t ), intent ( in ) :: self type ( string_t ) base end function pure module function get_real ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self , key real , intent ( in ) :: mold real value_ end function pure module function get_real_with_character_key ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self character ( len =* ), intent ( in ) :: key real , intent ( in ) :: mold real value_ end function pure module function get_double_precision ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self , key double precision , intent ( in ) :: mold double precision value_ end function pure module function get_double_precision_with_character_key ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self character ( len =* ), intent ( in ) :: key double precision , intent ( in ) :: mold double precision value_ end function pure module function get_double_precision_array ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self , key double precision , intent ( in ) :: mold (:) double precision , allocatable :: value_ (:) end function pure module function get_double_precision_array_with_character_key ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self character ( len =* ), intent ( in ) :: key double precision , intent ( in ) :: mold (:) double precision , allocatable :: value_ (:) end function pure module function get_character_with_string_key ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self , key character ( len =* ), intent ( in ) :: mold character ( len = :), allocatable :: value_ end function pure module function get_character_with_character_key ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self character ( len =* ), intent ( in ) :: key , mold character ( len = :), allocatable :: value_ end function pure module function get_string_with_string_key ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self , key , mold type ( string_t ) :: value_ end function pure module function get_string_with_character_key ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self , mold character ( len =* ), intent ( in ) :: key type ( string_t ) :: value_ end function pure module function get_string_t_array_with_string_t_key ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self type ( string_t ), intent ( in ) :: key , mold (:) type ( string_t ), allocatable :: value_ (:) end function pure module function get_string_t_array_with_character_key ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self character ( len =* ), intent ( in ) :: key type ( string_t ), intent ( in ) :: mold (:) type ( string_t ), allocatable :: value_ (:) end function pure module function get_integer_with_character_key ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self character ( len =* ), intent ( in ) :: key integer , intent ( in ) :: mold integer value_ end function pure module function get_integer ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self , key integer , intent ( in ) :: mold integer value_ end function pure module function get_logical_with_character_key ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self character ( len =* ), intent ( in ) :: key logical , intent ( in ) :: mold logical value_ end function pure module function get_logical ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self , key logical , intent ( in ) :: mold logical value_ end function pure module function get_integer_array_with_character_key ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self character ( len =* ), intent ( in ) :: key integer , intent ( in ) :: mold (:) integer , allocatable :: value_ (:) end function pure module function get_integer_array ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self , key integer , intent ( in ) :: mold (:) integer , allocatable :: value_ (:) end function pure module function get_real_array_with_character_key ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self character ( len =* ), intent ( in ) :: key real , intent ( in ) :: mold (:) real , allocatable :: value_ (:) end function pure module function get_real_array ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self , key real , intent ( in ) :: mold (:) real , allocatable :: value_ (:) end function elemental module function string_t_eq_string_t ( lhs , rhs ) result ( lhs_eq_rhs ) implicit none class ( string_t ), intent ( in ) :: lhs , rhs logical lhs_eq_rhs end function elemental module function string_t_eq_character ( lhs , rhs ) result ( lhs_eq_rhs ) implicit none class ( string_t ), intent ( in ) :: lhs character ( len =* ), intent ( in ) :: rhs logical lhs_eq_rhs end function elemental module function character_eq_string_t ( lhs , rhs ) result ( lhs_eq_rhs ) implicit none class ( string_t ), intent ( in ) :: rhs character ( len =* ), intent ( in ) :: lhs logical lhs_eq_rhs end function elemental module function string_t_ne_string_t ( lhs , rhs ) result ( lhs_ne_rhs ) implicit none class ( string_t ), intent ( in ) :: lhs , rhs logical lhs_ne_rhs end function elemental module function string_t_ne_character ( lhs , rhs ) result ( lhs_ne_rhs ) implicit none class ( string_t ), intent ( in ) :: lhs character ( len =* ), intent ( in ) :: rhs logical lhs_ne_rhs end function elemental module function character_ne_string_t ( lhs , rhs ) result ( lhs_ne_rhs ) implicit none class ( string_t ), intent ( in ) :: rhs character ( len =* ), intent ( in ) :: lhs logical lhs_ne_rhs end function elemental module function string_t_cat_string_t ( lhs , rhs ) result ( lhs_cat_rhs ) implicit none class ( string_t ), intent ( in ) :: lhs , rhs type ( string_t ) lhs_cat_rhs end function elemental module function string_t_cat_character ( lhs , rhs ) result ( lhs_cat_rhs ) implicit none class ( string_t ), intent ( in ) :: lhs character ( len =* ), intent ( in ) :: rhs type ( string_t ) lhs_cat_rhs end function elemental module function character_cat_string_t ( lhs , rhs ) result ( lhs_cat_rhs ) implicit none character ( len =* ), intent ( in ) :: lhs class ( string_t ), intent ( in ) :: rhs type ( string_t ) lhs_cat_rhs end function elemental module subroutine assign_character_to_string_t ( lhs , rhs ) implicit none class ( string_t ), intent ( inout ) :: lhs character ( len =* ), intent ( in ) :: rhs end subroutine pure module subroutine assign_string_t_to_character ( lhs , rhs ) implicit none class ( string_t ), intent ( in ) :: rhs character ( len = :), intent ( out ), allocatable :: lhs end subroutine elemental module function bracket ( self , opening , closing ) result ( bracketed_self ) implicit none class ( string_t ), intent ( in ) :: self character ( len =* ), intent ( in ), optional :: opening , closing type ( string_t ) bracketed_self end function end interface end module julienne_string_m","tags":"","url":"sourcefile/julienne_string_m.f90.html"},{"title":"julienne_formats_m.F90 – Julienne","text":"Files dependent on this one sourcefile~~julienne_formats_m.f90~~AfferentGraph sourcefile~julienne_formats_m.f90 julienne_formats_m.F90 sourcefile~julienne_formats_s.f90 julienne_formats_s.F90 sourcefile~julienne_formats_s.f90->sourcefile~julienne_formats_m.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_formats_m.f90 sourcefile~assertions.f90 assertions.F90 sourcefile~assertions.f90->sourcefile~julienne_m.f90 sourcefile~check-for-command-line-argument.f90 check-for-command-line-argument.f90 sourcefile~check-for-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-command-line-flag-value.f90 get-command-line-flag-value.f90 sourcefile~get-command-line-flag-value.f90->sourcefile~julienne_m.f90 sourcefile~julienne_test_suite_s.f90 julienne_test_suite_s.F90 sourcefile~julienne_test_suite_s.f90->sourcefile~julienne_m.f90 sourcefile~scaffold.f90 scaffold.F90 sourcefile~scaffold.f90->sourcefile~julienne_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt module julienne_formats_m !! Useful strings for formatting `print` and `write` statements implicit none character ( len =* ), parameter :: csv = \"(*(G25.20,:,','))\" !! comma-separated values character ( len =* ), parameter :: cscv = \"(*('(',G25.20,',',G25.20,')',:,',')))\" !! comma-separated complex values #ifndef _CRAYFTN interface pure module function separated_values ( separator , mold ) result ( format_string ) character ( len =* ), intent ( in ) :: separator class ( * ), intent ( in ) :: mold (..) character ( len = :), allocatable :: format_string end function end interface #else interface separated_values pure module function separated_values_1D ( separator , mold ) result ( format_string ) character ( len =* ), intent ( in ) :: separator class ( * ), intent ( in ) :: mold (:) character ( len = :), allocatable :: format_string end function end interface #endif end module julienne_formats_m","tags":"","url":"sourcefile/julienne_formats_m.f90.html"},{"title":"julienne_string_s.F90 – Julienne","text":"This file depends on sourcefile~~julienne_string_s.f90~~EfferentGraph sourcefile~julienne_string_s.f90 julienne_string_s.F90 sourcefile~julienne_assert_m.f90 julienne_assert_m.f90 sourcefile~julienne_string_s.f90->sourcefile~julienne_assert_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.F90 sourcefile~julienne_string_s.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_string_s.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_assert_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt #include \"julienne-assert-macros.h\" #include \"assert_macros.h\" submodule ( julienne_string_m ) julienne_string_s use assert_m use julienne_assert_m , only : call_julienne_assert_ use julienne_test_diagnosis_m , only : operator (. equalsExpected .) implicit none integer , parameter :: default_integer_width_supremum = 11 , default_real_width_supremum = 20 , double_precision_width_supremum = 25 integer , parameter :: integer_c_size_t_width_supremum = 19 , logical_width = 2 , comma_width = 1 , parenthesis_width = 1 , space = 1 contains module procedure as_character raw_string = self % string_ end procedure module procedure is_allocated string_allocated = allocated ( self % string_ ) end procedure module procedure from_characters new_string % string_ = string end procedure module procedure from_default_integer allocate ( character ( len = default_integer_width_supremum ) :: string % string_ ) write ( string % string_ , '(g0)' ) i string % string_ = trim ( adjustl ( string % string_ )) end procedure module procedure from_integer_c_size_t allocate ( character ( len = integer_c_size_t_width_supremum ) :: string % string_ ) write ( string % string_ , '(g0)' ) i string % string_ = trim ( adjustl ( string % string_ )) end procedure module procedure from_default_real allocate ( character ( len = double_precision_width_supremum ) :: string % string_ ) write ( string % string_ , '(g20.13)' ) x string % string_ = trim ( adjustl ( string % string_ )) end procedure module procedure from_double_precision allocate ( character ( len = double_precision_width_supremum ) :: string % string_ ) write ( string % string_ , '(g20.13)' ) x string % string_ = trim ( adjustl ( string % string_ )) end procedure module procedure from_default_logical allocate ( character ( len = logical_width ) :: string % string_ ) write ( string % string_ , '(g0)' ) b string % string_ = trim ( adjustl ( string % string_ )) end procedure module procedure from_logical_c_bool allocate ( character ( len = logical_width ) :: string % string_ ) write ( string % string_ , '(g0)' ) b string % string_ = trim ( adjustl ( string % string_ )) end procedure module procedure from_default_complex allocate ( character ( len = 2 * default_real_width_supremum + 2 * parenthesis_width + comma_width ) :: string % string_ ) write ( string % string_ , '(\"(\",g20.13,\",\",g20.13,\")\")' ) z string % string_ = trim ( adjustl ( string % string_ )) end procedure module procedure from_double_precision_complex allocate ( character ( len = space + 2 * double_precision_width_supremum + 2 * parenthesis_width + comma_width ) :: string % string_ ) write ( string % string_ , '(\"(\",g20.13,\",\",g20.13,\")\")' ) z string % string_ = trim ( adjustl ( string % string_ )) end procedure module procedure concatenate_elements integer s concatenated_strings = \"\" do s = 1 , size ( strings ) concatenated_strings = concatenated_strings // strings ( s )% string () end do end procedure module procedure strings_with_comma_separator csv = strings_with_string_t_separator ( strings , string_t ( \",\" )) end procedure module procedure characters_with_comma_separator csv = strings_with_string_t_separator ( string_t ( strings ), string_t ( \",\" )) end procedure module procedure characters_with_character_separator sv = strings_with_string_t_separator ( string_t ( strings ), string_t ( separator )) end procedure module procedure characters_with_string_separator sv = strings_with_string_t_separator ( string_t ( strings ), separator ) end procedure module procedure strings_with_character_separator sv = strings_with_string_t_separator ( strings , string_t ( separator )) end procedure module procedure strings_with_string_t_separator integer s associate ( num_elements => size ( strings )) sv = \"\" do s = 1 , num_elements - 1 sv = sv // strings ( s ) // separator end do sv = sv // strings ( num_elements ) end associate end procedure module procedure array_of_strings character ( len = :), allocatable :: remainder , next_string integer next_delimiter , string_end remainder = trim ( adjustl ( delimited_strings )) allocate ( strings_array ( 0 )) do next_delimiter = index ( remainder , delimiter ) string_end = merge ( len ( remainder ), next_delimiter - 1 , next_delimiter == 0 ) next_string = trim ( adjustl ( remainder (: string_end ))) if ( len ( next_string ) == 0 ) exit strings_array = [ strings_array , string_t ( next_string )] if ( next_delimiter == 0 ) then remainder = \"\" else remainder = trim ( adjustl ( remainder ( next_delimiter + 1 :))) end if end do end procedure module procedure get_json_key character ( len = :), allocatable :: raw_line raw_line = self % string () associate ( opening_key_quotes => index ( raw_line , '\"' ), separator => index ( raw_line , ':' )) associate ( closing_key_quotes => opening_key_quotes + index ( raw_line ( opening_key_quotes + 1 :), '\"' )) unquoted_key = string_t ( trim ( raw_line ( opening_key_quotes + 1 : closing_key_quotes - 1 ))) end associate end associate end procedure module procedure file_extension character ( len = :), allocatable :: name_ name_ = trim ( adjustl ( self % string ())) associate ( dot_location => index ( name_ , '.' , back = . true .) ) if ( dot_location < len ( name_ )) then extension = trim ( adjustl ( name_ ( dot_location + 1 :))) else extension = \"\" end if end associate end procedure module procedure base_name character ( len = :), allocatable :: name_ name_ = self % string () associate ( dot_location => index ( name_ , '.' , back = . true .) ) if ( dot_location < len ( name_ )) then base = trim ( adjustl ( name_ ( 1 : dot_location - 1 ))) else base = \"\" end if end associate end procedure module procedure get_real_with_character_key value_ = self % get_real ( string_t ( key ), mold ) end procedure module procedure get_double_precision_with_character_key value_ = self % get_double_precision ( string_t ( key ), mold ) end procedure module procedure get_real character ( len = :), allocatable :: raw_line , string_value call_julienne_assert ( self % get_json_key () . equalsExpected . key ) raw_line = self % string () associate ( text_after_colon => raw_line ( index ( raw_line , ':' ) + 1 :)) associate ( trailing_comma => index ( text_after_colon , ',' )) if ( trailing_comma == 0 ) then string_value = trim ( adjustl (( text_after_colon ))) else string_value = trim ( adjustl (( text_after_colon (: trailing_comma - 1 )))) end if read ( string_value , fmt =* ) value_ end associate end associate end procedure module procedure get_double_precision character ( len = :), allocatable :: raw_line , string_value call_julienne_assert ( self % get_json_key () . equalsExpected . key ) raw_line = self % string () associate ( text_after_colon => raw_line ( index ( raw_line , ':' ) + 1 :)) associate ( trailing_comma => index ( text_after_colon , ',' )) if ( trailing_comma == 0 ) then string_value = trim ( adjustl (( text_after_colon ))) else string_value = trim ( adjustl (( text_after_colon (: trailing_comma - 1 )))) end if read ( string_value , fmt =* ) value_ end associate end associate end procedure module procedure get_character_with_string_key associate ( string_value => self % get_string_with_string_key ( key , string_t ( mold ))) value_ = string_value % string () end associate end procedure module procedure get_character_with_character_key associate ( string_value => self % get_string_with_string_key ( string_t ( key ), string_t ( mold ))) value_ = string_value % string () end associate end procedure module procedure get_string_with_character_key associate ( string_value => self % get_string_with_string_key ( string_t ( key ), mold )) value_ = string_value % string () end associate end procedure module procedure get_string_t_array_with_string_t_key value_ = self % get_string_t_array_with_character_key ( key % string (), mold ) end procedure module procedure get_string_t_array_with_character_key character ( len = :), allocatable :: raw_line integer i , comma , opening_quotes , closing_quotes call_julienne_assert ( self % get_json_key () . equalsExpected . key ) raw_line = self % string () associate ( colon => index ( raw_line , ':' )) associate ( opening_bracket => colon + index ( raw_line ( colon + 1 :), '[' )) associate ( closing_bracket => opening_bracket + index ( raw_line ( opening_bracket + 1 :), ']' )) associate ( commas => count ([( raw_line ( i : i ) == \",\" , i = opening_bracket + 1 , closing_bracket - 1 )])) allocate ( value_ ( commas + 1 )) opening_quotes = opening_bracket + index ( raw_line ( opening_bracket + 1 :), '\"' ) closing_quotes = opening_quotes + index ( raw_line ( opening_quotes + 1 :), '\"' ) value_ ( 1 ) = raw_line ( opening_quotes + 1 : closing_quotes - 1 ) do i = 1 , commas comma = closing_quotes + index ( raw_line ( closing_quotes + 1 :), ',' ) opening_quotes = comma + index ( raw_line ( comma + 1 :), '\"' ) closing_quotes = opening_quotes + index ( raw_line ( opening_quotes + 1 :), '\"' ) value_ ( i + 1 ) = raw_line ( opening_quotes + 1 : closing_quotes - 1 ) end do end associate end associate end associate end associate end procedure module procedure get_string_with_string_key character ( len = :), allocatable :: raw_line call_julienne_assert ( self % get_json_key () . equalsExpected . key ) raw_line = self % string () associate ( text_after_colon => raw_line ( index ( raw_line , ':' ) + 1 :)) associate ( opening_value_quotes => index ( text_after_colon , '\"' )) associate ( closing_value_quotes => opening_value_quotes + index ( text_after_colon ( opening_value_quotes + 1 :), '\"' )) if ( any ([ opening_value_quotes , closing_value_quotes ] == 0 )) then value_ = string_t ( trim ( adjustl (( text_after_colon )))) else value_ = string_t ( text_after_colon ( opening_value_quotes + 1 : closing_value_quotes - 1 )) end if end associate end associate end associate end procedure module procedure get_logical_with_character_key value_ = self % get_logical ( string_t ( key ), mold ) end procedure module procedure get_logical character ( len = :), allocatable :: raw_line , string_value call_julienne_assert ( self % get_json_key () . equalsExpected . key ) raw_line = self % string () associate ( text_after_colon => raw_line ( index ( raw_line , ':' ) + 1 :)) associate ( trailing_comma => index ( text_after_colon , ',' )) if ( trailing_comma == 0 ) then string_value = trim ( adjustl (( text_after_colon ))) else string_value = trim ( adjustl (( text_after_colon (: trailing_comma - 1 )))) end if call_assert ( any ( string_value == [ 'true ' , 'false' ])) value_ = string_value == \"true\" end associate end associate end procedure module procedure get_integer character ( len = :), allocatable :: raw_line , string_value call_julienne_assert ( self % get_json_key () . equalsExpected . key ) raw_line = self % string () associate ( text_after_colon => raw_line ( index ( raw_line , ':' ) + 1 :)) associate ( trailing_comma => index ( text_after_colon , ',' )) if ( trailing_comma == 0 ) then string_value = trim ( adjustl (( text_after_colon ))) else string_value = trim ( adjustl (( text_after_colon (: trailing_comma - 1 )))) end if read ( string_value , fmt =* ) value_ end associate end associate end procedure module procedure get_integer_with_character_key value_ = self % get_integer ( string_t ( key ), mold ) end procedure module procedure get_integer_array_with_character_key value_ = int ( self % get_integer_array ( string_t ( key ), mold )) end procedure module procedure get_integer_array value_ = int ( self % get_real_array ( key , mold = [ 0. ])) end procedure module procedure get_real_array_with_character_key value_ = self % get_real_array ( string_t ( key ), mold ) end procedure module procedure get_double_precision_array_with_character_key value_ = self % get_double_precision_array ( string_t ( key ), mold ) end procedure module procedure get_real_array character ( len = :), allocatable :: raw_line real , allocatable :: real_array (:) integer i call_julienne_assert ( self % get_json_key () . equalsExpected . key ) raw_line = self % string () associate ( colon => index ( raw_line , \":\" )) associate ( opening_bracket => colon + index ( raw_line ( colon + 1 :), \"[\" )) associate ( closing_bracket => opening_bracket + index ( raw_line ( opening_bracket + 1 :), \"]\" )) associate ( commas => count ( \",\" == [( raw_line ( i : i ), i = opening_bracket + 1 , closing_bracket - 1 )])) associate ( num_inputs => commas + 1 ) allocate ( real_array ( num_inputs )) read ( raw_line ( opening_bracket + 1 : closing_bracket - 1 ), fmt =* ) real_array value_ = real_array end associate end associate end associate end associate end associate end procedure module procedure get_double_precision_array character ( len = :), allocatable :: raw_line double precision , allocatable :: double_precision_array (:) integer i call_julienne_assert ( self % get_json_key () . equalsExpected . key ) raw_line = self % string () associate ( colon => index ( raw_line , \":\" )) associate ( opening_bracket => colon + index ( raw_line ( colon + 1 :), \"[\" )) associate ( closing_bracket => opening_bracket + index ( raw_line ( opening_bracket + 1 :), \"]\" )) associate ( commas => count ( \",\" == [( raw_line ( i : i ), i = opening_bracket + 1 , closing_bracket - 1 )])) associate ( num_inputs => commas + 1 ) allocate ( double_precision_array ( num_inputs )) read ( raw_line ( opening_bracket + 1 : closing_bracket - 1 ), fmt =* ) double_precision_array value_ = double_precision_array end associate end associate end associate end associate end associate end procedure module procedure string_t_eq_string_t lhs_eq_rhs = lhs % string () == rhs % string () end procedure module procedure string_t_eq_character lhs_eq_rhs = lhs % string () == rhs end procedure module procedure character_eq_string_t lhs_eq_rhs = lhs == rhs % string () end procedure module procedure string_t_ne_string_t lhs_ne_rhs = lhs % string () /= rhs % string () end procedure module procedure string_t_ne_character lhs_ne_rhs = lhs % string () /= rhs end procedure module procedure character_ne_string_t lhs_ne_rhs = lhs /= rhs % string () end procedure module procedure assign_string_t_to_character lhs = rhs % string () end procedure module procedure assign_character_to_string_t lhs % string_ = rhs end procedure module procedure string_t_cat_string_t lhs_cat_rhs = string_t ( lhs % string_ // rhs % string_ ) end procedure module procedure string_t_cat_character lhs_cat_rhs = string_t ( lhs % string_ // rhs ) end procedure module procedure character_cat_string_t lhs_cat_rhs = string_t ( lhs // rhs % string_ ) end procedure module procedure bracket character ( len = :), allocatable :: actual_opening , actual_closing associate ( opening_present => present ( opening )) if ( opening_present ) then actual_opening = opening else actual_opening = \"[\" end if if ( present ( closing )) then actual_closing = closing else if ( opening_present ) then actual_closing = actual_opening else actual_closing = \"]\" end if end associate bracketed_self = string_t ( actual_opening // self % string_ // actual_closing ) end procedure end submodule julienne_string_s","tags":"","url":"sourcefile/julienne_string_s.f90.html"},{"title":"julienne_test_result_m.f90 – Julienne","text":"This file depends on sourcefile~~julienne_test_result_m.f90~~EfferentGraph sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.F90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~julienne_test_result_m.f90~~AfferentGraph sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_m.f90 julienne_test_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_fixture_m.f90 julienne_test_fixture_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_harness_m.f90 julienne_test_harness_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_harness_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_result_s.f90 julienne_test_result_s.f90 sourcefile~julienne_test_result_s.f90->sourcefile~julienne_test_result_m.f90 sourcefile~assertions.f90 assertions.F90 sourcefile~assertions.f90->sourcefile~julienne_m.f90 sourcefile~check-for-command-line-argument.f90 check-for-command-line-argument.f90 sourcefile~check-for-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-command-line-flag-value.f90 get-command-line-flag-value.f90 sourcefile~get-command-line-flag-value.f90->sourcefile~julienne_m.f90 sourcefile~julienne_test_description_s.f90 julienne_test_description_s.F90 sourcefile~julienne_test_description_s.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_fixture_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_s.f90 julienne_test_s.F90 sourcefile~julienne_test_s.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_s.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_suite_s.f90 julienne_test_suite_s.F90 sourcefile~julienne_test_suite_s.f90->sourcefile~julienne_m.f90 sourcefile~scaffold.f90 scaffold.F90 sourcefile~scaffold.f90->sourcefile~julienne_m.f90 sourcefile~julienne_test_fixture_s.f90 julienne_test_fixture_s.F90 sourcefile~julienne_test_fixture_s.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_harness_m.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_harness_s.f90 julienne_test_harness_s.F90 sourcefile~julienne_test_harness_s.f90->sourcefile~julienne_test_harness_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt module julienne_test_result_m !! Define an abstraction for describing test results the test description and, !! if the test was not skipped, then also a test diagnosis. use julienne_string_m , only : string_t use julienne_test_diagnosis_m , only : test_diagnosis_t implicit none private public :: test_result_t type test_result_t !! Encapsulate a test-description string and optionally a test diagnosis. !! This type is similar to test_description_t and test_diagnosis_t type but !! 1. Doesn't need the former's procedure(diagnosis_function_i) component and !! 2. Allocates an instance of the latter if and only if the test wasn't skipped. private type ( string_t ) :: description_ type ( test_diagnosis_t ), allocatable :: diagnosis_ contains procedure :: characterize procedure :: passed procedure :: skipped generic :: description_contains => description_contains_string , description_contains_characters procedure , private :: description_contains_string , description_contains_characters end type interface test_result_t elemental module function construct_from_string ( description , diagnosis ) result ( test_result ) !! The result is a test_result_t object with the components defined by the dummy arguments implicit none type ( string_t ), intent ( in ) :: description type ( test_diagnosis_t ), intent ( in ), optional :: diagnosis type ( test_result_t ) test_result end function elemental module function construct_from_character ( description , diagnosis ) result ( test_result ) !! The result is a test_result_t object with the components defined by the dummy arguments implicit none character ( len =* ), intent ( in ) :: description type ( test_diagnosis_t ), intent ( in ), optional :: diagnosis type ( test_result_t ) test_result end function end interface interface pure module function characterize ( self ) result ( characterization ) !! The result is a character description of the test and its outcome implicit none class ( test_result_t ), intent ( in ) :: self character ( len = :), allocatable :: characterization end function impure elemental module function passed ( self ) result ( test_passed ) !! The result is true if and only if the test passed on all images implicit none class ( test_result_t ), intent ( in ) :: self logical test_passed end function impure elemental module function skipped ( self ) result ( test_skipped ) !! The result is true if and only if the test result contains no diagnosis on any image implicit none class ( test_result_t ), intent ( in ) :: self logical test_skipped end function elemental module function description_contains_string ( self , substring ) result ( substring_found ) !! The result is true if and only if the test description contains the substring implicit none class ( test_result_t ), intent ( in ) :: self type ( string_t ), intent ( in ) :: substring logical substring_found end function elemental module function description_contains_characters ( self , substring ) result ( substring_found ) !! The result is true if and only if the test description contains the substring implicit none class ( test_result_t ), intent ( in ) :: self character ( len =* ), intent ( in ) :: substring logical substring_found end function end interface end module julienne_test_result_m","tags":"","url":"sourcefile/julienne_test_result_m.f90.html"},{"title":"julienne_test_diagnosis_s.F90 – Julienne","text":"This file depends on sourcefile~~julienne_test_diagnosis_s.f90~~EfferentGraph sourcefile~julienne_test_diagnosis_s.f90 julienne_test_diagnosis_s.F90 sourcefile~julienne_string_m.f90 julienne_string_m.F90 sourcefile~julienne_test_diagnosis_s.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_test_diagnosis_s.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt #include \"language-support.F90\" #include \"assert_macros.h\" submodule ( julienne_test_diagnosis_m ) julienne_test_diagnosis_s use assert_m use julienne_string_m , only : operator (. cat .) use iso_c_binding , only : c_associated , c_intptr_t implicit none contains module procedure append_string_if_test_failed if ( lhs % test_passed_ ) then lhs_cat_rhs = lhs else lhs_cat_rhs = test_diagnosis_t ( lhs % test_passed_ , lhs % diagnostics_string_ // rhs ) end if end procedure module procedure append_character_if_test_failed if ( lhs % test_passed_ ) then lhs_cat_rhs = lhs else lhs_cat_rhs = test_diagnosis_t ( lhs % test_passed_ , lhs % diagnostics_string_ // rhs ) end if end procedure module procedure also diagnosis = . all . ([ lhs , rhs ]) end procedure #ifndef __GFORTRAN__ module procedure aggregate_diagnosis character ( len =* ), parameter :: new_line_indent = new_line ( '' ) // \"        \" select rank ( diagnoses ) rank ( 0 ) diagnosis = diagnoses rank ( 1 ) diagnosis = aggregate_vector_diagnosis ( diagnoses ) rank ( 2 ) diagnosis = aggregate_vector_diagnosis ( reshape ( diagnoses , shape = [ size ( diagnoses )])) rank ( 3 ) diagnosis = aggregate_vector_diagnosis ( reshape ( diagnoses , shape = [ size ( diagnoses )])) rank ( 4 ) diagnosis = aggregate_vector_diagnosis ( reshape ( diagnoses , shape = [ size ( diagnoses )])) rank ( 5 ) diagnosis = aggregate_vector_diagnosis ( reshape ( diagnoses , shape = [ size ( diagnoses )])) rank ( 6 ) diagnosis = aggregate_vector_diagnosis ( reshape ( diagnoses , shape = [ size ( diagnoses )])) rank ( 7 ) diagnosis = aggregate_vector_diagnosis ( reshape ( diagnoses , shape = [ size ( diagnoses )])) rank ( 8 ) diagnosis = aggregate_vector_diagnosis ( reshape ( diagnoses , shape = [ size ( diagnoses )])) rank ( 9 ) diagnosis = aggregate_vector_diagnosis ( reshape ( diagnoses , shape = [ size ( diagnoses )])) rank ( 10 ) diagnosis = aggregate_vector_diagnosis ( reshape ( diagnoses , shape = [ size ( diagnoses )])) rank ( 11 ) diagnosis = aggregate_vector_diagnosis ( reshape ( diagnoses , shape = [ size ( diagnoses )])) rank ( 12 ) diagnosis = aggregate_vector_diagnosis ( reshape ( diagnoses , shape = [ size ( diagnoses )])) rank ( 13 ) diagnosis = aggregate_vector_diagnosis ( reshape ( diagnoses , shape = [ size ( diagnoses )])) rank ( 14 ) diagnosis = aggregate_vector_diagnosis ( reshape ( diagnoses , shape = [ size ( diagnoses )])) rank ( 15 ) diagnosis = aggregate_vector_diagnosis ( reshape ( diagnoses , shape = [ size ( diagnoses )])) rank default associate ( diagnoses_rank => string_t ( rank ( diagnoses ))) error stop \"aggregate_diagnosis (julienne_test_diagnosis_s): rank \" // diagnoses_rank % string () // \" unspported\" end associate end select contains pure function aggregate_vector_diagnosis ( diagnoses ) result ( diagnosis ) type ( test_diagnosis_t ), intent ( in ) :: diagnoses (:) type ( test_diagnosis_t ) diagnosis character ( len =* ), parameter :: new_line_indent = new_line ( '' ) // \"        \" type ( string_t ), allocatable :: array (:) integer i allocate ( array ( size ( diagnoses ))) do i = 1 , size ( diagnoses ) array ( i ) = string_t ( new_line_indent // diagnoses ( i )% diagnostics_string_ ) end do diagnosis = test_diagnosis_t ( & test_passed = all ( diagnoses % test_passed_ ) & , diagnostics_string = . cat . pack ( & array = array & , mask = . not . diagnoses % test_passed_ & ) ) end function end procedure #else module procedure aggregate_scalar_diagnosis diagnosis = diagnoses end procedure module procedure aggregate_vector_diagnosis character ( len =* ), parameter :: new_line_indent = new_line ( '' ) // \"        \" type ( string_t ), allocatable :: array (:) integer i allocate ( array ( size ( diagnoses ))) do i = 1 , size ( diagnoses ) array ( i ) = string_t ( new_line_indent // diagnoses ( i )% diagnostics_string_ ) end do diagnosis = test_diagnosis_t ( & test_passed = all ( diagnoses % test_passed_ ) & , diagnostics_string = . cat . pack ( & array = array & , mask = . not . diagnoses % test_passed_ & ) ) end procedure module procedure aggregate_rank2_diagnosis diagnosis = aggregate_vector_diagnosis ( reshape ( diagnoses , shape = [ size ( diagnoses )])) end procedure module procedure aggregate_rank3_diagnosis diagnosis = aggregate_vector_diagnosis ( reshape ( diagnoses , shape = [ size ( diagnoses )])) end procedure module procedure aggregate_rank4_diagnosis diagnosis = aggregate_vector_diagnosis ( reshape ( diagnoses , shape = [ size ( diagnoses )])) end procedure module procedure aggregate_rank5_diagnosis diagnosis = aggregate_vector_diagnosis ( reshape ( diagnoses , shape = [ size ( diagnoses )])) end procedure module procedure aggregate_rank6_diagnosis diagnosis = aggregate_vector_diagnosis ( reshape ( diagnoses , shape = [ size ( diagnoses )])) end procedure module procedure aggregate_rank7_diagnosis diagnosis = aggregate_vector_diagnosis ( reshape ( diagnoses , shape = [ size ( diagnoses )])) end procedure module procedure aggregate_rank8_diagnosis diagnosis = aggregate_vector_diagnosis ( reshape ( diagnoses , shape = [ size ( diagnoses )])) end procedure module procedure aggregate_rank9_diagnosis diagnosis = aggregate_vector_diagnosis ( reshape ( diagnoses , shape = [ size ( diagnoses )])) end procedure module procedure aggregate_rank10_diagnosis diagnosis = aggregate_vector_diagnosis ( reshape ( diagnoses , shape = [ size ( diagnoses )])) end procedure module procedure aggregate_rank11_diagnosis diagnosis = aggregate_vector_diagnosis ( reshape ( diagnoses , shape = [ size ( diagnoses )])) end procedure module procedure aggregate_rank12_diagnosis diagnosis = aggregate_vector_diagnosis ( reshape ( diagnoses , shape = [ size ( diagnoses )])) end procedure module procedure aggregate_rank13_diagnosis diagnosis = aggregate_vector_diagnosis ( reshape ( diagnoses , shape = [ size ( diagnoses )])) end procedure module procedure aggregate_rank14_diagnosis diagnosis = aggregate_vector_diagnosis ( reshape ( diagnoses , shape = [ size ( diagnoses )])) end procedure module procedure aggregate_rank15_diagnosis diagnosis = aggregate_vector_diagnosis ( reshape ( diagnoses , shape = [ size ( diagnoses )])) end procedure #endif module procedure approximates_real operands = operands_t ( actual , expected ) end procedure module procedure approximates_double_precision #if HAVE_DERIVED_TYPE_KIND_PARAMETERS operands = operands_t ( double_precision )( actual , expected ) #else operands = double_precision_operands_t ( actual , expected ) #endif end procedure module procedure alphabetical_character_vs_character if ( lhs < rhs ) then test_diagnosis = test_diagnosis_t (. true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t (. false ., diagnostics_string = rhs // \" is before \" // lhs // \" alphabetically.\" ) end if end procedure module procedure alphabetical_string_vs_string if ( lhs % string () < rhs % string ()) then test_diagnosis = test_diagnosis_t (. true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t (. false ., diagnostics_string = lhs // \" is before \" // rhs // \" alphabetically.\" ) end if end procedure module procedure alphabetical_character_vs_string if ( lhs < rhs % string ()) then test_diagnosis = test_diagnosis_t (. true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t (. false ., diagnostics_string = lhs // \" is before \" // rhs // \" alphabetically.\" ) end if end procedure module procedure alphabetical_string_vs_character if ( lhs % string () < rhs ) then test_diagnosis = test_diagnosis_t (. true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t (. false ., diagnostics_string = lhs // \" is before \" // rhs // \" alphabetically.\" ) end if end procedure module procedure reverse_alphabetical_character_vs_character test_diagnosis = rhs . isBefore . lhs end procedure module procedure reverse_alphabetical_string_vs_string test_diagnosis = rhs . isBefore . lhs end procedure module procedure reverse_alphabetical_character_vs_string test_diagnosis = rhs . isBefore . lhs end procedure module procedure reverse_alphabetical_string_vs_character test_diagnosis = rhs . isBefore . lhs end procedure module procedure expect if ( expected_true ) then test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false ., diagnostics_string = \"expected to be true\" ) end if end procedure module procedure equals_expected_c_ptr if ( c_associated ( actual , expected )) then test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else block integer ( c_intptr_t ) actual_c_loc , expected_c_loc integer ( c_intptr_t ), parameter :: mold = 0_c_intptr_t associate ( actual_c_loc => transfer ( actual , mold ), expected_c_loc => transfer ( expected , mold )) test_diagnosis = test_diagnosis_t ( & test_passed = . false . & , diagnostics_string = \"expected \" // string_t ( expected_c_loc ) // \"; actual value is \" // string_t ( actual_c_loc ) & ) end associate end block end if end procedure module procedure equals_expected_integer if ( actual == expected ) then test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"expected \" // string_t ( expected ) // \"; actual value is \" // string_t ( actual ) & ) end if end procedure module procedure equals_expected_integer_c_size_t if ( actual == expected ) then test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"expected \" // string_t ( expected ) // \"; actual value is \" // string_t ( actual ) & ) end if end procedure module procedure equals_expected_character if ( actual == expected ) then test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"expected '\" // expected // \"'; actual value is '\" // actual // \"'\" & ) end if end procedure module procedure equals_expected_character_vs_string if ( actual == expected ) then test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"expected '\" // expected // \"'; actual value is '\" // actual // \"'\" & ) end if end procedure module procedure equals_expected_string if ( actual == expected ) then test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"expected '\" // expected // \"'; actual value is '\" // actual // \"'\" & ) end if end procedure module procedure equals_expected_string_vs_character if ( actual == expected ) then test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"expected '\" // expected // \"'; actual value is '\" // actual // \"'\" & ) end if end procedure module procedure less_than_real if ( actual < expected_ceiling ) then test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"The value \" // string_t ( actual ) // \" was expected to be less than \" // string_t ( expected_ceiling ) & ) end if end procedure module procedure less_than_double if ( actual < expected_ceiling ) then test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"The value \" // string_t ( actual ) // \" was expected to be less than \" // string_t ( expected_ceiling ) & ) end if end procedure module procedure less_than_integer if ( actual < expected_ceiling ) then test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"The value \" // string_t ( actual ) // \" was expected to be less than \" // string_t ( expected_ceiling ) & ) end if end procedure module procedure less_than_or_equal_to_integer if ( actual <= expected_max ) then test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"The value \" // string_t ( actual ) // \" was expected to be less than or equal to \" // string_t ( expected_max ) & ) end if end procedure module procedure less_than_or_equal_to_real if ( actual <= expected_max ) then test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"The value \" // string_t ( actual ) // \" was expected to be less than or equal to \" // string_t ( expected_max ) & ) end if end procedure module procedure less_than_or_equal_to_double_precision if ( actual <= expected_max ) then test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"The value \" // string_t ( actual ) // \" was expected to be less than or equal to \" // string_t ( expected_max ) & ) end if end procedure module procedure greater_than_or_equal_to_integer if ( actual >= expected_min ) then test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"The value \" // string_t ( actual ) // \" was expected to be greater than or equal to \" // string_t ( expected_min ) & ) end if end procedure module procedure greater_than_or_equal_to_real if ( actual >= expected_min ) then test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"The value \" // string_t ( actual ) // \" was expected to be greater than or equal to \" // string_t ( expected_min ) & ) end if end procedure module procedure greater_than_or_equal_to_double_precision if ( actual >= expected_min ) then test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"The value \" // string_t ( actual ) // \" was expected to be greater than or equal to \" // string_t ( expected_min ) & ) end if end procedure module procedure greater_than_real if ( actual > expected_floor ) then test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"The value \" // string_t ( actual ) // \" was expected to be greater than \" // string_t ( expected_floor ) & ) end if end procedure module procedure greater_than_double if ( actual > expected_floor ) then test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"The value \" // string_t ( actual ) // \" was expected to be greater than \" // string_t ( expected_floor ) & ) end if end procedure module procedure greater_than_integer if ( actual > expected_floor ) then test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"The value \" // string_t ( actual ) // \" was expected to be greater than \" // string_t ( expected_floor ) & ) end if end procedure module procedure within_real if ( abs ( operands % actual - operands % expected ) <= tolerance ) then ! We use <= to allow for tolerance=0, which could never be satisfied if we used < instead: test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"expected \" // string_t ( operands % expected ) & // \" within a tolerance of \" // string_t ( tolerance ) & // \"; actual value is \" // string_t ( operands % actual ) & ) end if end procedure module procedure within_real_fraction if ( abs ( operands % actual - operands % expected ) <= abs ( fractional_tolerance * operands % expected )) then ! We use <= to allow for fractional_tolerance=0, which could never be satisfied if we used < instead: test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"expected \" // string_t ( operands % expected ) & // \" within a fractional tolerance of \" // string_t ( fractional_tolerance ) & // \"; actual value is \" // string_t ( operands % actual ) & ) end if end procedure module procedure within_real_percentage if ( abs ( operands % actual - operands % expected ) <= abs ( operands % expected * percentage_tolerance / 1 D02 )) then ! We use <= to allow for fractional_tolerance=0, which could never be satisfied if we used < instead: test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"expected \" // string_t ( operands % expected ) & // \" within a tolerance of \" // string_t ( percentage_tolerance ) // \" percent;\" & // \" actual value is \" // string_t ( operands % actual ) & ) end if end procedure module procedure within_double_precision if ( abs ( operands % actual - operands % expected ) <= tolerance ) then ! We use <= to allow for tolerance=0, which could never be satisfied if we used < instead: test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"expected \" // string_t ( operands % expected ) & // \" within a tolerance of \" // string_t ( tolerance ) & // \"; actual value is \" // string_t ( operands % actual ) & ) end if end procedure module procedure within_double_precision_fraction if ( abs ( operands % actual - operands % expected ) <= abs ( fractional_tolerance * operands % expected )) then ! We use <= to allow for tolerance=0, which could never be satisfied if we used < instead: test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"expected \" // string_t ( operands % expected ) & // \" within a fractional tolerance of \" // string_t ( fractional_tolerance ) & // \"; actual value is \" // string_t ( operands % actual ) & ) end if end procedure module procedure within_double_precision_percentage if ( abs (( operands % actual - operands % expected )) <= abs ( operands % expected * percentage_tolerance / 1 D02 )) then ! We use <= to allow for tolerance=0, which could never be satisfied if we used < instead: test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"expected \" // string_t ( operands % expected ) & // \" within a tolerance of \" // string_t ( percentage_tolerance ) // \" percent;\" & // \" actual value is \" // string_t ( operands % actual ) & ) end if end procedure module procedure construct_from_string_t test_diagnosis % test_passed_ = test_passed test_diagnosis % diagnostics_string_ = diagnostics_string end procedure module procedure construct_from_character test_diagnosis % test_passed_ = test_passed test_diagnosis % diagnostics_string_ = diagnostics_string end procedure module procedure test_passed passed = self % test_passed_ end procedure module procedure diagnostics_string call_assert ( allocated ( self % diagnostics_string_ )) string_ = string_t ( self % diagnostics_string_ ) end procedure end submodule julienne_test_diagnosis_s","tags":"","url":"sourcefile/julienne_test_diagnosis_s.f90.html"},{"title":"julienne_bin_m.f90 – Julienne","text":"Files dependent on this one sourcefile~~julienne_bin_m.f90~~AfferentGraph sourcefile~julienne_bin_m.f90 julienne_bin_m.f90 sourcefile~julienne_bin_s.f90 julienne_bin_s.F90 sourcefile~julienne_bin_s.f90->sourcefile~julienne_bin_m.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_bin_m.f90 sourcefile~assertions.f90 assertions.F90 sourcefile~assertions.f90->sourcefile~julienne_m.f90 sourcefile~check-for-command-line-argument.f90 check-for-command-line-argument.f90 sourcefile~check-for-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-command-line-flag-value.f90 get-command-line-flag-value.f90 sourcefile~get-command-line-flag-value.f90->sourcefile~julienne_m.f90 sourcefile~julienne_test_suite_s.f90 julienne_test_suite_s.F90 sourcefile~julienne_test_suite_s.f90->sourcefile~julienne_m.f90 sourcefile~scaffold.f90 scaffold.F90 sourcefile~scaffold.f90->sourcefile~julienne_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt module julienne_bin_m !! distribute item numbers across bins such that the number of items differs by at most 1 between any two bins implicit none private public :: bin_t type bin_t !! encapsulate a range of item numbers associated with a bin private integer first_ , last_ contains procedure first procedure last end type interface bin_t elemental module function construct ( num_items , num_bins , bin_number ) result ( bin ) !! the result is a bin associated with a range of item numbers integer , intent ( in ) :: num_items , num_bins , bin_number type ( bin_t ) bin end function end interface interface elemental module function first ( self ) result ( first_item_number ) !! the result is the first item number associated with the given bin implicit none class ( bin_t ), intent ( in ) :: self integer first_item_number end function elemental module function last ( self ) result ( last_item_number ) !! the result is the last item number associated with the given bin implicit none class ( bin_t ), intent ( in ) :: self integer last_item_number end function end interface end module julienne_bin_m","tags":"","url":"sourcefile/julienne_bin_m.f90.html"},{"title":"julienne_test_description_m.f90 – Julienne","text":"This file depends on sourcefile~~julienne_test_description_m.f90~~EfferentGraph sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.F90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_test_diagnosis_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~julienne_test_description_m.f90~~AfferentGraph sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_m.f90 julienne_test_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_fixture_m.f90 julienne_test_fixture_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_harness_m.f90 julienne_test_harness_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_harness_m.f90 sourcefile~julienne_test_description_s.f90 julienne_test_description_s.F90 sourcefile~julienne_test_description_s.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_s.f90 julienne_test_s.F90 sourcefile~julienne_test_s.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_s.f90->sourcefile~julienne_test_m.f90 sourcefile~assertions.f90 assertions.F90 sourcefile~assertions.f90->sourcefile~julienne_m.f90 sourcefile~check-for-command-line-argument.f90 check-for-command-line-argument.f90 sourcefile~check-for-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-command-line-flag-value.f90 get-command-line-flag-value.f90 sourcefile~get-command-line-flag-value.f90->sourcefile~julienne_m.f90 sourcefile~julienne_test_fixture_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_suite_s.f90 julienne_test_suite_s.F90 sourcefile~julienne_test_suite_s.f90->sourcefile~julienne_m.f90 sourcefile~scaffold.f90 scaffold.F90 sourcefile~scaffold.f90->sourcefile~julienne_m.f90 sourcefile~julienne_test_fixture_s.f90 julienne_test_fixture_s.F90 sourcefile~julienne_test_fixture_s.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_harness_m.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_harness_s.f90 julienne_test_harness_s.F90 sourcefile~julienne_test_harness_s.f90->sourcefile~julienne_test_harness_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt module julienne_test_description_m !! Define an abstraction for describing test intentions and test functions use julienne_string_m , only : string_t use julienne_test_result_m , only : test_result_t use julienne_test_diagnosis_m , only : test_diagnosis_t , diagnosis_function_i implicit none private public :: test_description_t public :: filter type test_description_t !! Encapsulate test descriptions and test-functions private character ( len = :), allocatable :: description_ procedure ( diagnosis_function_i ), pointer , nopass :: diagnosis_function_ => null () contains procedure run generic :: contains_text => contains_string_t , contains_characters procedure , private :: contains_string_t , contains_characters generic :: operator ( == ) => equals procedure , private :: equals end type interface test_description_t module function construct_from_string ( description , diagnosis_function ) result ( test_description ) !! The result is a test_description_t object with the components defined by the dummy arguments implicit none type ( string_t ), intent ( in ) :: description procedure ( diagnosis_function_i ), intent ( in ), pointer , optional :: diagnosis_function type ( test_description_t ) test_description end function module function construct_from_characters ( description , diagnosis_function ) result ( test_description ) !! The result is a test_description_t object with the components defined by the dummy arguments implicit none character ( len =* ), intent ( in ) :: description procedure ( diagnosis_function_i ), intent ( in ), pointer , optional :: diagnosis_function type ( test_description_t ) test_description end function end interface interface impure elemental module function run ( self ) result ( test_result ) !! The result encapsulates the test description and test outcome implicit none class ( test_description_t ), intent ( in ) :: self type ( test_result_t ) test_result end function elemental module function contains_string_t ( self , substring ) result ( match ) !! The result is .true. if the test description includes the value of substring implicit none class ( test_description_t ), intent ( in ) :: self type ( string_t ), intent ( in ) :: substring logical match end function elemental module function contains_characters ( self , substring ) result ( match ) !! The result is .true. if the test description includes the value of substring implicit none class ( test_description_t ), intent ( in ) :: self character ( len =* ), intent ( in ) :: substring logical match end function elemental module function equals ( lhs , rhs ) result ( lhs_eq_rhs ) !! The result is .true. if the components of the lhs & rhs are equal implicit none class ( test_description_t ), intent ( in ) :: lhs , rhs logical lhs_eq_rhs end function module function filter ( test_descriptions , subject ) result ( filtered_test_descriptions ) !! The result is .true. an array of test_description_t objects whose description_ or contains the substring specified !! by command-line --contains flag if present, or all test_descriptions if the subject contains the same substring implicit none type ( test_description_t ), intent ( in ) :: test_descriptions (:) character ( len =* ), intent ( in ) :: subject type ( test_description_t ), allocatable :: filtered_test_descriptions (:) end function end interface end module julienne_test_description_m","tags":"","url":"sourcefile/julienne_test_description_m.f90.html"},{"title":"julienne_file_s.F90 – Julienne","text":"This file depends on sourcefile~~julienne_file_s.f90~~EfferentGraph sourcefile~julienne_file_s.f90 julienne_file_s.F90 sourcefile~julienne_file_m.f90 julienne_file_m.f90 sourcefile~julienne_file_s.f90->sourcefile~julienne_file_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.F90 sourcefile~julienne_file_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt #include \"assert_macros.h\" submodule ( julienne_file_m ) julienne_file_s use iso_fortran_env , only : iostat_end , iostat_eor , output_unit use assert_m implicit none contains module procedure lines my_lines = self % lines_ end procedure module procedure write_to_output_unit integer l call_assert ( allocated ( self % lines_ )) do l = 1 , size ( self % lines_ ) write ( output_unit , '(a)' ) self % lines_ ( l )% string () end do end procedure module procedure write_to_character_file_name integer file_unit , l call_assert ( allocated ( self % lines_ )) open ( newunit = file_unit , file = file_name , form = 'formatted' , status = 'unknown' , action = 'write' ) do l = 1 , size ( self % lines_ ) write ( file_unit , '(a)' ) self % lines_ ( l )% string () end do end procedure module procedure write_to_string_file_name call self % write_to_character_file_name ( file_name % string ()) end procedure module procedure from_lines file_object % lines_ = lines end procedure module procedure from_file_with_character_name file_object = from_file_with_string_name ( string_t ( file_name )) end procedure module procedure from_file_with_string_name integer io_status , file_unit , line_num character ( len = :), allocatable :: line integer , parameter :: max_message_length = 128 character ( len = max_message_length ) error_message integer , allocatable :: lengths (:) open ( newunit = file_unit , file = file_name % string (), form = 'formatted' , status = 'old' ) lengths = line_lengths ( file_unit ) associate ( num_lines => size ( lengths )) allocate ( file_object % lines_ ( num_lines )) do line_num = 1 , num_lines allocate ( character ( len = lengths ( line_num )) :: line ) read ( file_unit , '(a)' ) line file_object % lines_ ( line_num ) = string_t ( line ) deallocate ( line ) end do end associate close ( file_unit ) contains function line_count ( file_unit ) result ( num_lines ) integer , intent ( in ) :: file_unit integer num_lines rewind ( file_unit ) num_lines = 0 do read ( file_unit , * , iostat = io_status ) if ( io_status == iostat_end ) exit num_lines = num_lines + 1 end do rewind ( file_unit ) end function function line_lengths ( file_unit ) result ( lengths ) integer , intent ( in ) :: file_unit integer , allocatable :: lengths (:) integer io_status , l character ( len = 1 ) c associate ( num_lines => line_count ( file_unit )) allocate ( lengths ( num_lines ), source = 0 ) rewind ( file_unit ) do l = 1 , num_lines do read ( file_unit , '(a)' , advance = 'no' , iostat = io_status , iomsg = error_message ) c associate ( eliminate_unused_variable_warning => c ) ! eliminate NAG compiler \"variable c set but never referenced\" warning end associate if ( io_status == iostat_eor . or . io_status == iostat_end ) exit lengths ( l ) = lengths ( l ) + 1 end do end do rewind ( file_unit ) end associate end function end procedure end submodule julienne_file_s","tags":"","url":"sourcefile/julienne_file_s.f90.html"},{"title":"get-command-line-flag-value.f90 – Julienne","text":"This file depends on sourcefile~~get-command-line-flag-value.f90~~EfferentGraph sourcefile~get-command-line-flag-value.f90 get-command-line-flag-value.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~get-command-line-flag-value.f90->sourcefile~julienne_m.f90 sourcefile~julienne_assert_m.f90 julienne_assert_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_assert_m.f90 sourcefile~julienne_bin_m.f90 julienne_bin_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_bin_m.f90 sourcefile~julienne_command_line_m.f90 julienne_command_line_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_file_m.f90 julienne_file_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_file_m.f90 sourcefile~julienne_formats_m.f90 julienne_formats_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_formats_m.f90 sourcefile~julienne_github_ci_m.f90 julienne_github_ci_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_github_ci_m.f90 sourcefile~julienne_one_image_prints_m.f90 julienne_one_image_prints_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_one_image_prints_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_fixture_m.f90 julienne_test_fixture_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_harness_m.f90 julienne_test_harness_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_harness_m.f90 sourcefile~julienne_test_m.f90 julienne_test_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_suite_m.f90 julienne_test_suite_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_suite_m.f90 sourcefile~julienne_assert_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_file_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_one_image_prints_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_fixture_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_harness_m.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_user_defined_collectives_m.f90 julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_suite_m.f90->sourcefile~julienne_file_m.f90 sourcefile~julienne_test_suite_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt program get_command_line_flag_value !! This program demonstrates how to find the value of a command-line flag.  Running this program !! as follows should print 'foo=bar' without quotes: !! !! fpm run --example get-command-line-flag-value -- --foo bar !! !! Running the above command either without `bar` or without \"--foo bar\" should print an indication the message \"flag '--foo' not present or present with no value\". !! was provided. use julienne_m , only : command_line_t implicit none type ( command_line_t ) command_line character ( len = :), allocatable :: foo_value foo_value = command_line % flag_value ( \"--foo\" ) if ( len ( foo_value ) /= 0 ) then print '(a)' , new_line ( '' ) // \"foo=\" // foo_value // new_line ( '' ) else print '(a)' , new_line ( '' ) // \"flag '--foo' not present or present with no value\" // new_line ( '' ) end if end program","tags":"","url":"sourcefile/get-command-line-flag-value.f90.html"},{"title":"julienne_test_suite_s.F90 – Julienne","text":"This file depends on sourcefile~~julienne_test_suite_s.f90~~EfferentGraph sourcefile~julienne_test_suite_s.f90 julienne_test_suite_s.F90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_test_suite_s.f90->sourcefile~julienne_m.f90 sourcefile~julienne_test_suite_m.f90 julienne_test_suite_m.f90 sourcefile~julienne_test_suite_s.f90->sourcefile~julienne_test_suite_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_suite_m.f90 sourcefile~julienne_assert_m.f90 julienne_assert_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_assert_m.f90 sourcefile~julienne_bin_m.f90 julienne_bin_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_bin_m.f90 sourcefile~julienne_command_line_m.f90 julienne_command_line_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_file_m.f90 julienne_file_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_file_m.f90 sourcefile~julienne_formats_m.f90 julienne_formats_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_formats_m.f90 sourcefile~julienne_github_ci_m.f90 julienne_github_ci_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_github_ci_m.f90 sourcefile~julienne_one_image_prints_m.f90 julienne_one_image_prints_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_one_image_prints_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_fixture_m.f90 julienne_test_fixture_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_harness_m.f90 julienne_test_harness_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_harness_m.f90 sourcefile~julienne_test_m.f90 julienne_test_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_suite_m.f90->sourcefile~julienne_file_m.f90 sourcefile~julienne_test_suite_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_assert_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_file_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_one_image_prints_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_fixture_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_harness_m.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_user_defined_collectives_m.f90 julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_test_diagnosis_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt #include \"assert_macros.h\" submodule ( julienne_test_suite_m ) julienne_test_suite_s use assert_m use julienne_m , only : operator (. csv .) implicit none character ( len =* ), parameter :: test_suite_key = \"test suite\" character ( len =* ), parameter :: test_subjects_key = \"test subjects\" character ( len =* ), parameter :: copyright_and_license = & \"! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute\" // new_line ( '' ) & // \"! Terms of use are as specified in LICENSE.txt\" contains module procedure test_subjects subjects = self % test_subjects_ end procedure module procedure test_modules modules = self % test_subjects_ // \"_test_m\" end procedure module procedure test_types types = self % test_subjects_ // \"_test_t\" end procedure module procedure from_components test_suite % test_subjects_ = test_subjects end procedure module procedure from_file integer l logical test_suite_key_found test_suite_key_found = . false . associate ( lines => file % lines ()) do l = 1 , size ( lines ) if ( lines ( l )% get_json_key () == test_suite_key ) then test_suite_key_found = . true . test_suite % test_subjects_ = lines ( l + 1 )% get_json_value ( string_t ( test_subjects_key ), mold = [ string_t ( \"\" )]) return end if end do end associate call_assert ( test_suite_key_found ) end procedure module procedure to_file character ( len =* ), parameter :: indent = repeat ( \" \" , ncopies = 4 ) file = file_t ([ & string_t ( \"{\" ) & , string_t ( indent // '\"' // test_suite_key // '\": {' ) & , indent // indent // '\"' // test_subjects_key // '\" : [' // . csv . self % test_subjects_ % bracket ( '\"' ) // '],' & , string_t ( indent // '}' ) & , string_t ( \"}\" ) & ]) end procedure module procedure driver_file integer i type ( string_t ), allocatable :: test_types (:), test_modules (:) test_types = self % test_types () ! GCC 14.2 blocks the use of an association test_modules = self % test_modules () ! GCC 14.2 blocks the use of an association file = file_t ([ & string_t ( copyright_and_license ) // new_line ( '' ) & , string_t ( \"program test_suite_driver\" ) & , string_t ( \"  use julienne_m, only : test_fixture_t, test_harness_t\" ) & ,[( string_t ( \"  use \" ) // test_modules ( i ) // string_t ( \", only : \" ) // test_types ( i ), i = 1 , size ( test_modules ))] & , string_t ( \"  implicit none\" ) // new_line ( '' ) & , string_t ( \"  associate(test_harness => test_harness_t([ &\" ) & ,[( string_t ( \"     test_fixture_t(\" ) // test_types ( 1 ) // string_t ( \"()) &\" ))] & ,[( string_t ( \"    ,test_fixture_t(\" ) // test_types ( i ) // string_t ( \"()) &\" ), i = 2 , size ( test_types ))] & , string_t ( \"  ]))\" ) & , string_t ( \"    call test_harness%report_results\" ) & , string_t ( \"  end associate\" ) & , string_t ( \"end program test_suite_driver\" ) & ]) end procedure module procedure stub_file character ( len = :), allocatable :: subject_module , subject_type , test_module , test_type subject_module = subject // \"_m\" subject_type = subject // \"_t\" test_module = subject // \"_test_m\" test_type = subject // \"_test_t\" file = file_t ([ & string_t ( copyright_and_license ) // new_line ( '' ) & , string_t ( \"module \" ) // test_module & , string_t ( \"  use julienne_m, only : &\" ) & , string_t ( \"     test_t, test_description_t, test_diagnosis_t, test_result_t &\" ) & , string_t ( \"    ,operator(.approximates.), operator(.within.), operator(.all.), operator(//)\" ) & , string_t ( \"  use \" // subject_module // \", only : \" // subject_type ) & , string_t ( \"  implicit none\" ) // new_line ( '' ) & , string_t ( \"  type, extends(test_t) :: \" ) // test_type & , string_t ( \"  contains\" ) & , string_t ( \"    procedure, nopass :: subject\" ) & , string_t ( \"    procedure, nopass :: results\" ) & , string_t ( \"  end type\" ) // new_line ( '' ) & , string_t ( \"contains\" ) // new_line ( '' ) & , string_t ( \"  pure function subject() result(test_subject)\" ) & , string_t ( \"    character(len=:), allocatable :: test_subject\" ) & , string_t ( \"    test_subject = 'A \" ) // subject // \"'\" & , string_t ( \"  end function\" ) // new_line ( '' ) & , string_t ( \"  function results() result(test_results)\" ) & , string_t ( \"    type(\" ) // test_type // \") \" // subject // \"_test\" & , string_t ( \"    type(test_result_t), allocatable :: test_results(:)\" ) & , string_t ( \"    test_results = \" ) // subject // \"_test%run( & \" & , string_t ( \"      [test_description_t('doing something', do_something) &\" ) & , string_t ( \"      ,test_description_t('checking something', check_something) &\" ) & , string_t ( \"      ,test_description_t('skipping something') &\" ) & , string_t ( \"    ])\" ) & , string_t ( \"  end function\" ) // new_line ( '' ) & , string_t ( \"  function check_something() result(test_diagnosis)\" ) & , string_t ( \"    type(test_diagnosis_t) test_diagnosis\" ) & , string_t ( \"    type(\" ) // subject_type // \") \" // subject & , string_t ( \"    test_diagnosis = .all.( &\" ) & , string_t ( \"       [22./7., 3.14159] .approximates. \" ) // subject // \"%pi() .within. 0.001 &\" & , string_t ( \"    ) // ' (pi approximation)'\" ) & , string_t ( \"  end function\" ) // new_line ( '' ) & , string_t ( \"  function do_something() result(test_diagnosis)\" ) & , string_t ( \"    type(test_diagnosis_t) test_diagnosis\" ) & , string_t ( \"    test_diagnosis = &\" ) & , string_t ( \"      test_diagnosis_t(test_passed = 1 == 1, diagnostics_string = 'craziness ensued')\" ) & , string_t ( \"  end function\" ) // new_line ( '' ) & , string_t ( \"end module\" ) & ]) end procedure module procedure write_driver integer file_unit , l type ( string_t ) use_statement , fixture_constructor type ( string_t ), allocatable :: test_modules (:), test_types (:) open ( newunit = file_unit , file = file_name , form = 'formatted' , status = 'unknown' , action = 'write' ) write ( file_unit , '(a)' ) copyright_and_license // new_line ( '' ) write ( file_unit , '(a)' ) \"program test_suite_driver\" write ( file_unit , '(a)' ) \"  use julienne_m, only : test_fixture_t, test_harness_t\" block type ( string_t ), allocatable :: test_modules (:) type ( string_t ) use_statement test_modules = self % test_modules () ! GCC 14.2 blocks the use of an association test_types = self % test_types () ! GCC 14.2 blocks the use of an association do l = 1 , size ( test_modules ) use_statement = \"  use \" // test_modules ( l ) // \", only : \" // test_types ( l ) write ( file_unit , '(a)' ) use_statement % string () end do end block write ( file_unit , '(a)' ) \"  implicit none\" // new_line ( '' ) write ( file_unit , '(a)' ) \"  associate(test_harness => test_harness_t([ &\" block type ( string_t ), allocatable :: test_types (:) type ( string_t ) fixture_constructor test_types = self % test_types () ! GCC 14.2 blocks the use of an association fixture_constructor = \"     test_fixture_t(\" // test_types ( 1 ) // \"()) &\" write ( file_unit , '(a)' ) fixture_constructor % string () do l = 2 , size ( test_modules ) fixture_constructor = \"    ,test_fixture_t(\" // test_types ( l ) // \"()) &\" write ( file_unit , '(a)' ) fixture_constructor % string () end do end block write ( file_unit , '(a)' ) \"  ]))\" write ( file_unit , '(a)' ) \"    call test_harness%report_results\" write ( file_unit , '(a)' ) \"  end associate\" write ( file_unit , '(a)' ) \"end program test_suite_driver\" close ( file_unit ) end procedure end submodule julienne_test_suite_s","tags":"","url":"sourcefile/julienne_test_suite_s.f90.html"},{"title":"julienne_test_description_s.F90 – Julienne","text":"This file depends on sourcefile~~julienne_test_description_s.f90~~EfferentGraph sourcefile~julienne_test_description_s.f90 julienne_test_description_s.F90 sourcefile~julienne_assert_m.f90 julienne_assert_m.f90 sourcefile~julienne_test_description_s.f90->sourcefile~julienne_assert_m.f90 sourcefile~julienne_command_line_m.f90 julienne_command_line_m.f90 sourcefile~julienne_test_description_s.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_test_description_s.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_assert_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.F90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_test_diagnosis_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 20242-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt #include \"julienne-assert-macros.h\" #include \"assert_macros.h\" #include \"language-support.F90\" submodule ( julienne_test_description_m ) julienne_test_description_s use assert_m use julienne_assert_m , only : call_julienne_assert_ use julienne_command_line_m , only : command_line_t implicit none contains module procedure construct_from_characters test_description % description_ = description if ( present ( diagnosis_function )) test_description % diagnosis_function_ => diagnosis_function call_assert ( allocated ( test_description % description_ )) end procedure module procedure construct_from_string test_description % description_ = description if ( present ( diagnosis_function )) test_description % diagnosis_function_ => diagnosis_function call_assert ( allocated ( test_description % description_ )) end procedure module procedure run call_assert ( allocated ( self % description_ )) if ( associated ( self % diagnosis_function_ )) then test_result = test_result_t ( self % description_ , self % diagnosis_function_ ()) else test_result = test_result_t ( self % description_ ) end if end procedure module procedure contains_string_t call_assert ( allocated ( self % description_ )) match = index ( self % description_ , substring % string ()) /= 0 end procedure module procedure contains_characters call_assert ( allocated ( self % description_ )) match = index ( self % description_ , substring ) /= 0 end procedure module procedure equals call_assert ( allocated ( lhs % description_ ) . and . allocated ( rhs % description_ )) lhs_eq_rhs = ( lhs % description_ == rhs % description_ ) if ( associated ( lhs % diagnosis_function_ ) . and . associated ( rhs % diagnosis_function_ )) & lhs_eq_rhs = lhs_eq_rhs . and . associated ( lhs % diagnosis_function_ , rhs % diagnosis_function_ ) end procedure module procedure filter type ( command_line_t ) command_line #if  defined(__flang__) associate ( search_string => command_line % flag_value ( \"--contains\" )) filtered_test_descriptions = & pack ( array = test_descriptions & , mask = index ( subject , search_string ) /= 0 & ! subject contains search_string . or . test_descriptions % contains_text ( search_string ) & ! test_description%description_ contains search_string ) end associate #else block character ( len = :), allocatable :: search_string search_string = command_line % flag_value ( \"--contains\" ) filtered_test_descriptions = & pack ( array = test_descriptions & , mask = index ( subject , search_string ) /= 0 & ! subject contains search_string . or . test_descriptions % contains_text ( search_string ) & ! test_description%description_ contains search_string ) end block #endif end procedure end submodule julienne_test_description_s","tags":"","url":"sourcefile/julienne_test_description_s.f90.html"},{"title":"julienne_m.f90 – Julienne","text":"This file depends on sourcefile~~julienne_m.f90~~EfferentGraph sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_assert_m.f90 julienne_assert_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_assert_m.f90 sourcefile~julienne_bin_m.f90 julienne_bin_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_bin_m.f90 sourcefile~julienne_command_line_m.f90 julienne_command_line_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_file_m.f90 julienne_file_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_file_m.f90 sourcefile~julienne_formats_m.f90 julienne_formats_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_formats_m.f90 sourcefile~julienne_github_ci_m.f90 julienne_github_ci_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_github_ci_m.f90 sourcefile~julienne_one_image_prints_m.f90 julienne_one_image_prints_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_one_image_prints_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_fixture_m.f90 julienne_test_fixture_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_harness_m.f90 julienne_test_harness_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_harness_m.f90 sourcefile~julienne_test_m.f90 julienne_test_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_suite_m.f90 julienne_test_suite_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_suite_m.f90 sourcefile~julienne_assert_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_file_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_one_image_prints_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_fixture_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_harness_m.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_user_defined_collectives_m.f90 julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_suite_m.f90->sourcefile~julienne_file_m.f90 sourcefile~julienne_test_suite_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~julienne_m.f90~~AfferentGraph sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~assertions.f90 assertions.F90 sourcefile~assertions.f90->sourcefile~julienne_m.f90 sourcefile~check-for-command-line-argument.f90 check-for-command-line-argument.f90 sourcefile~check-for-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-command-line-flag-value.f90 get-command-line-flag-value.f90 sourcefile~get-command-line-flag-value.f90->sourcefile~julienne_m.f90 sourcefile~julienne_test_suite_s.f90 julienne_test_suite_s.F90 sourcefile~julienne_test_suite_s.f90->sourcefile~julienne_m.f90 sourcefile~scaffold.f90 scaffold.F90 sourcefile~scaffold.f90->sourcefile~julienne_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt module julienne_m !! Global aggregation of all public entities use julienne_assert_m , only : call_julienne_assert_ , julienne_assert use julienne_bin_m , only : bin_t use julienne_command_line_m , only : command_line_t use julienne_file_m , only : file_t use julienne_formats_m , only : separated_values , csv use julienne_github_ci_m , only : github_ci use julienne_one_image_prints_m , only : one_image_prints use julienne_string_m , only : string_t , array_of_strings & , operator (. cat .) & , operator (. csv .) & , operator (. separatedBy .) & ! same as operator(.sv.) , operator (. sv .) use julienne_test_description_m , only : test_description_t , filter use julienne_test_diagnosis_m , only : test_diagnosis_t , diagnosis_function_i & , operator ( // ) & , operator (. all .) & , operator (. also .) & , operator (. and .) & , operator (. approximates .) & , operator (. equalsExpected .) & , operator (. expect .) & , operator (. isAfter .) & , operator (. isAtLeast .) & , operator (. isAtMost .) & , operator (. isBefore .) & , operator (. lessThan .) & , operator (. lessThanOrEqualTo .) & ! same as operator(.isAtMost.) , operator (. greaterThan .) & , operator (. greaterThanOrEqualTo .) & ! same as operator(.isAtLeast.) , operator (. within .) & , operator (. withinFraction .) & , operator (. withinPercentage .) use julienne_test_fixture_m , only : test_fixture_t use julienne_test_harness_m , only : test_harness_t use julienne_test_result_m , only : test_result_t use julienne_test_suite_m , only : test_suite_t use julienne_test_m , only : test_t implicit none end module julienne_m","tags":"","url":"sourcefile/julienne_m.f90.html"},{"title":"julienne_test_s.F90 – Julienne","text":"This file depends on sourcefile~~julienne_test_s.f90~~EfferentGraph sourcefile~julienne_test_s.f90 julienne_test_s.F90 sourcefile~julienne_one_image_prints_m.f90 julienne_one_image_prints_m.f90 sourcefile~julienne_test_s.f90->sourcefile~julienne_one_image_prints_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.F90 sourcefile~julienne_test_s.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_test_s.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_m.f90 julienne_test_m.F90 sourcefile~julienne_test_s.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_one_image_prints_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_command_line_m.f90 julienne_command_line_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_user_defined_collectives_m.f90 julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_test_diagnosis_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt #include \"language-support.F90\" submodule ( julienne_test_m ) julienne_test_s use julienne_test_description_m , only : test_description_t use julienne_one_image_prints_m , only : one_image_prints use julienne_string_m , only : string_t implicit none contains #if __GNUC__ && ( __GNUC__ > 13) module procedure run associate ( matching_descriptions => filter ( test_descriptions , test % subject ())) test_results = matching_descriptions % run () end associate end procedure #else module procedure run type ( test_description_t ), allocatable :: matching_descriptions (:) matching_descriptions = filter ( test_descriptions , test % subject ()) test_results = matching_descriptions % run () end procedure #endif module procedure report logical , save :: do_first_report = . true . #if HAVE_MULTI_IMAGE_SUPPORT associate ( me => this_image ()) #else integer me me = 1 #endif image_1_prints_usage_info : & if ( me == 1 ) then block type ( command_line_t ) command_line first_report : & if ( do_first_report ) then do_first_report = . false . block character ( len = :), allocatable :: search_string search_string = command_line % flag_value ( \"--contains\" ) if ( len ( search_string ) == 0 ) then call one_image_prints ( new_line ( '' ) // & \"Running all tests.\" // new_line ( '' ) // & \"(Add '-- --contains <string>' to run only tests with subjects or descriptions containing the specified string.)\" ) else #ifndef NAGFOR call one_image_prints ( new_line ( '' ) // \"Running only tests with subjects or descriptions containing '\" // search_string // \"'.\" ) #else call one_image_prints ( new_line ( '' ) // \"Running only tests with subjects or descriptions containing '\" // string_t ( search_string ) // \"'.\" ) #endif end if end block end if first_report end block #ifndef NAGFOR call one_image_prints ( new_line ( '' ) // test % subject ()) #else call one_image_prints ( new_line ( '' ) // string_t ( test % subject ())) #endif end if image_1_prints_usage_info #ifndef _CRAYFTN associate ( test_results => test % results ()) associate ( num_tests => size ( test_results )) tests = tests + num_tests if ( me == 1 ) then block integer i do i = 1 , num_tests call one_image_prints ( \"   \" // test_results ( i )% characterize ()) end do end block end if block logical , allocatable :: passing_tests (:), skipped_tests (:) passing_tests = test_results % passed () skipped_tests = test_results % skipped () call co_all ( passing_tests ) call co_all ( skipped_tests ) associate ( num_passes => count ( passing_tests ), num_skipped => count ( skipped_tests )) call one_image_prints ( \" \" // string_t ( num_passes ) // \" of \" // string_t ( num_tests ) // \" tests passed. \" // string_t ( num_skipped ) // \" tests were skipped.\" ) passes = passes + num_passes skips = skips + num_skipped end associate end block end associate #if HAVE_MULTI_IMAGE_SUPPORT end associate #endif #else block logical , allocatable :: passing_tests (:) type ( test_result_t ), allocatable :: test_results (:) integer i test_results = test % results () associate ( num_tests => size ( test_results )) tests = tests + num_tests if ( me == 1 ) then do i = 1 , num_tests call one_image_prints ( test_results ( i )% characterize ()) end do end if passing_tests = test_results % passed () call co_all ( passing_tests ) associate ( num_passes => count ( passing_tests )) call one_image_prints ( \" \" // string_t ( num_passes ) // \" of \" // string_t ( num_tests ) // \" tests passed.\" ) passes = passes + num_passes end associate end associate end block #endif end associate end procedure end submodule julienne_test_s","tags":"","url":"sourcefile/julienne_test_s.f90.html"},{"title":"julienne_github_ci_m.f90 – Julienne","text":"Files dependent on this one sourcefile~~julienne_github_ci_m.f90~~AfferentGraph sourcefile~julienne_github_ci_m.f90 julienne_github_ci_m.f90 sourcefile~julienne_github_ci_s.f90 julienne_github_ci_s.f90 sourcefile~julienne_github_ci_s.f90->sourcefile~julienne_github_ci_m.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_github_ci_m.f90 sourcefile~assertions.f90 assertions.F90 sourcefile~assertions.f90->sourcefile~julienne_m.f90 sourcefile~check-for-command-line-argument.f90 check-for-command-line-argument.f90 sourcefile~check-for-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-command-line-flag-value.f90 get-command-line-flag-value.f90 sourcefile~get-command-line-flag-value.f90->sourcefile~julienne_m.f90 sourcefile~julienne_test_suite_s.f90 julienne_test_suite_s.F90 sourcefile~julienne_test_suite_s.f90->sourcefile~julienne_m.f90 sourcefile~scaffold.f90 scaffold.F90 sourcefile~scaffold.f90->sourcefile~julienne_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt module julienne_github_ci_m !! Detect whether a program is running in GitHub Continuous Integration (CI) implicit none interface logical module function GitHub_CI () !! The result is true if the environment variable named \"CI\" is set to the string \"true\" end function end interface end module","tags":"","url":"sourcefile/julienne_github_ci_m.f90.html"},{"title":"julienne_test_harness_s.F90 – Julienne","text":"This file depends on sourcefile~~julienne_test_harness_s.f90~~EfferentGraph sourcefile~julienne_test_harness_s.f90 julienne_test_harness_s.F90 sourcefile~julienne_command_line_m.f90 julienne_command_line_m.f90 sourcefile~julienne_test_harness_s.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_one_image_prints_m.f90 julienne_one_image_prints_m.f90 sourcefile~julienne_test_harness_s.f90->sourcefile~julienne_one_image_prints_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.F90 sourcefile~julienne_test_harness_s.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_harness_m.f90 julienne_test_harness_m.f90 sourcefile~julienne_test_harness_s.f90->sourcefile~julienne_test_harness_m.f90 sourcefile~julienne_one_image_prints_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_fixture_m.f90 julienne_test_fixture_m.f90 sourcefile~julienne_test_harness_m.f90->sourcefile~julienne_test_fixture_m.f90 sourcefile~julienne_test_m.f90 julienne_test_m.F90 sourcefile~julienne_test_fixture_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_user_defined_collectives_m.f90 julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt #include \"language-support.F90\" submodule ( julienne_test_harness_m ) julienne_test_harness_s use iso_fortran_env , only : int64 , real64 use julienne_command_line_m , only : command_line_t use julienne_one_image_prints_m , only : one_image_prints use julienne_string_m , only : string_t implicit none contains module procedure component_constructor test_harness % test_fixture_ = test_fixtures end procedure module procedure report_results integer i , passes , tests , skips integer ( int64 ) start_time , end_time , clock_rate passes = 0 ; tests = 0 ; skips = 0 call print_usage_info_and_stop_if_requested call system_clock ( start_time , clock_rate ) do i = 1 , size ( self % test_fixture_ ) call self % test_fixture_ ( i )% report ( passes , tests , skips ) end do call system_clock ( end_time ) #if HAVE_MULTI_IMAGE_SUPPORT associate ( me => this_image (), image_count => num_images ()) #else associate ( me => 1 , image_count => 1 ) #endif call one_image_prints ( \"\" ) call one_image_prints ( \"Test-suite execution time: \" // string_t ( real ( end_time - start_time , real64 ) / real ( clock_rate , real64 )) // \" seconds\" ) call one_image_prints ( \"Number of images: \" // string_t ( image_count )) call one_image_prints ( \"\" ) call one_image_prints ( \"_____ \" // string_t ( passes ) // \" of \" // string_t ( tests ) // \" tests passed. \" // string_t ( skips ) // \" tests were skipped _____\" ) if ( passes + skips /= tests . and . me == 1 ) error stop \"Some tests failed.\" end associate end procedure subroutine print_usage_info_and_stop_if_requested character ( len =* ), parameter :: usage = & new_line ( '' ) // new_line ( '' ) // & 'Usage: fpm test -- [--help] | [--contains <substring>]' // & new_line ( '' ) // new_line ( '' ) // & 'where square brackets ([]) denote optional arguments, a pipe (|) separates alternative arguments,' // new_line ( '' ) // & 'angular brackets (<>) denote a user-provided value, and passing a substring limits execution to' // new_line ( '' ) // & 'the tests with test subjects or test descriptions containing the user-specified substring.' // new_line ( '' ) associate ( command_line => command_line_t ()) if ( command_line % argument_present ([ character ( len = len ( \"--help\" )) :: \"--help\" , \"-h\" ])) then call one_image_prints ( usage ) stop end if call one_image_prints ( new_line ( \"\" ) // \"Append '-- --help' or '-- -h' to your `fpm test` command to display usage information.\" ) end associate end subroutine end submodule julienne_test_harness_s","tags":"","url":"sourcefile/julienne_test_harness_s.f90.html"},{"title":"julienne_file_m.f90 – Julienne","text":"This file depends on sourcefile~~julienne_file_m.f90~~EfferentGraph sourcefile~julienne_file_m.f90 julienne_file_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.F90 sourcefile~julienne_file_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~julienne_file_m.f90~~AfferentGraph sourcefile~julienne_file_m.f90 julienne_file_m.f90 sourcefile~julienne_file_s.f90 julienne_file_s.F90 sourcefile~julienne_file_s.f90->sourcefile~julienne_file_m.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_file_m.f90 sourcefile~julienne_test_suite_m.f90 julienne_test_suite_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_suite_m.f90 sourcefile~julienne_test_suite_m.f90->sourcefile~julienne_file_m.f90 sourcefile~assertions.f90 assertions.F90 sourcefile~assertions.f90->sourcefile~julienne_m.f90 sourcefile~check-for-command-line-argument.f90 check-for-command-line-argument.f90 sourcefile~check-for-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-command-line-flag-value.f90 get-command-line-flag-value.f90 sourcefile~get-command-line-flag-value.f90->sourcefile~julienne_m.f90 sourcefile~julienne_test_suite_s.f90 julienne_test_suite_s.F90 sourcefile~julienne_test_suite_s.f90->sourcefile~julienne_m.f90 sourcefile~julienne_test_suite_s.f90->sourcefile~julienne_test_suite_m.f90 sourcefile~scaffold.f90 scaffold.F90 sourcefile~scaffold.f90->sourcefile~julienne_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt module julienne_file_m !! A representation of a file as an object use julienne_string_m , only : string_t private public :: file_t type file_t private type ( string_t ), allocatable :: lines_ (:) contains procedure :: lines generic :: write_lines => write_to_output_unit , write_to_character_file_name , write_to_string_file_name procedure , private :: write_to_output_unit , write_to_character_file_name , write_to_string_file_name end type interface file_t module function from_file_with_string_name ( file_name ) result ( file_object ) implicit none type ( string_t ), intent ( in ) :: file_name type ( file_t ) file_object end function module function from_file_with_character_name ( file_name ) result ( file_object ) implicit none character ( len =* ), intent ( in ) :: file_name type ( file_t ) file_object end function pure module function from_lines ( lines ) result ( file_object ) implicit none type ( string_t ), intent ( in ) :: lines (:) type ( file_t ) file_object end function end interface interface pure module function lines ( self ) result ( my_lines ) implicit none class ( file_t ), intent ( in ) :: self type ( string_t ), allocatable :: my_lines (:) end function module subroutine write_to_output_unit ( self ) implicit none class ( file_t ), intent ( in ) :: self end subroutine impure elemental module subroutine write_to_string_file_name ( self , file_name ) implicit none class ( file_t ), intent ( in ) :: self type ( string_t ), intent ( in ) :: file_name end subroutine impure elemental module subroutine write_to_character_file_name ( self , file_name ) implicit none class ( file_t ), intent ( in ) :: self character ( len =* ), intent ( in ) :: file_name end subroutine end interface end module julienne_file_m","tags":"","url":"sourcefile/julienne_file_m.f90.html"},{"title":"julienne_formats_s.F90 – Julienne","text":"This file depends on sourcefile~~julienne_formats_s.f90~~EfferentGraph sourcefile~julienne_formats_s.f90 julienne_formats_s.F90 sourcefile~julienne_formats_m.f90 julienne_formats_m.F90 sourcefile~julienne_formats_s.f90->sourcefile~julienne_formats_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt submodule ( julienne_formats_m ) julienne_formats_s !! Construct separated-value formats implicit none contains #ifndef _CRAYFTN module procedure separated_values character ( len =* ), parameter :: prefix = \"(*(G0,:,'\" character ( len =* ), parameter :: double_prefix = \"(*(G25.20,:,'\" character ( len =* ), parameter :: complex_prefix = \"(*('(',G0,',',G0,')',:,'\" character ( len =* ), parameter :: suffix = \"'))\" select rank ( mold ) rank ( 1 ) select type ( mold ) type is ( complex ) format_string = complex_prefix // separator // suffix type is ( double precision ) format_string = double_prefix // separator // \"'))\" type is ( real ) format_string = prefix // separator // suffix type is ( integer ) format_string = prefix // separator // suffix type is ( character ( len =* )) format_string = prefix // separator // suffix class default error stop \"format_s separated_values: unsupported type\" end select rank default error stop \"formats_s separated_values: unsupported rank\" end select end procedure #else module procedure separated_values_1D character ( len =* ), parameter :: prefix = \"(*(G0,:,'\" character ( len =* ), parameter :: suffix = \"'))\" character ( len =* ), parameter :: complex_prefix = \"(*('(',G0,',',G0,')',:,'\" select type ( mold ) type is ( complex ) format_string = complex_prefix // separator // suffix type is ( double precision ) format_string = prefix // separator // suffix type is ( real ) format_string = prefix // separator // suffix type is ( integer ) format_string = prefix // separator // suffix type is ( character ( len =* )) format_string = prefix // separator // suffix class default error stop \"format_s separated_values_1D: unsupported type\" end select end procedure #endif end submodule julienne_formats_s","tags":"","url":"sourcefile/julienne_formats_s.f90.html"}]}