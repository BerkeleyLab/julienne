var tipuesearch = {"pages":[{"title":" Julienne ","text":"Julienne Julienne Julienne is a modern Fortran unit-testing framework that includes utilities for manipulating strings\nvia Julienne's string_t derived type.  The target strings include command-line arguments accessed\nvia Julienne's command_line_t type  and format strings generated by functions in Julienne's formats_m module. Users construct tests by\n1. Extending Julienne's test_t abstract derived type,\n2. Defining a subject() function that returns a description of the entity being tested,\n3. Defining a results() function that\n    - Defines a result comprised of an array of test_result_t objects.\n    - Defines a local array of test_description_t objects, each of which encapsulates\n        * A string describing a test performed by a test-diagnosis function and\n        * The corresponding test-diagnosis function's name. Test-diagnosis functions conform to the [ diagnosis_function_i ] abstract interface, which stipulates that\nthe function takes no arguments and produces a result of the test_diagnosis_t type. Users have two ways to construct a test_diagnosis_t object:\n1. Write an expression using Julienne's user-defined operators, which are inspired by natural language, or\n2. Invoke one of Julienne's test_diagnosis_t constructor functions. Approach 1 is simpler, covers several common use cases, and automates the construction of the diagnostic \noutput to be printed when a test fails.  Approach 2 facilitates user-customization of diagnostic output \nusing Julienne's string-handling capabilities to format the output.  Such string handling centers around\nJulienne's string_t type. Alternatively, Julienne's vector_test_description_t type facilitates writing test functions that produce \nmultiple test diagnoses. Such functions conform to Julienne's [ vector_test_diagnosis_i ] abstract interface, \nwhich requires conforming functions to produce a one-dimensional array of test_diagnosis_t objects. Origin Story Julienne's name derives from the term for vegetables sliced into thin strings: julienned vegetables.\nThe Veggies and Garden unit-testing frameworks inspired the structure of Julienne's tests and output.\nJulienne aims to be a more lightweight alternative that is more portable across compilers. Getting Started Please see the demonstration test suite in demo README.md . Compiler Support The table below shows the compiler that Julienne fully or partially supports.  When built with a fully\nsupported compiler, all Julienne tests pass.  When built with a partially supported compiler, the Julienne\ntest suite skips some tests due to compiler bugs.  The test output reports which tests are skipped and\nthereby details the features, if any, that are not supported with a given compiler. Compiler Version(s) Tested Support LLVM flang-new 19, 20 full NAG nagfor 7.2 Build 7227 full GCC gfortran 13.1.0, 14.2.0_1, 15.0.1 partial (see 1 below) Intel ifx 2025.4 Build 20241205 partial (see 2 below) Compiler bugs related to the following issues have been reported: gfortran issues: The test_description_t constructor's diagnosis_function actual argument must be a procedure pointer. Each element of a vector_test_description_t array must be defined in a separate program statement. The string_t type's bracket type-bound procedure causes a program crash. The string_t type's .all. operator causes a program crash. ifx issue: Two string_t tests fail as described in issue #51 . Building and Testing LLVM ( flang-new ) compiler flang-new version 20 or later fpm test --compiler flang-new flang-new version 19 Add the following command before the fpm command recommended above for LLVM 20 or later: export FPM_FFLAGS = \"-mmlir -allow-assumed-rank\" where this FPM_FFLAGS setting turns on the support for Fortran's assumed-rank dummy arguments. If you do not have access to LLVM 19 or 20, we recommend building the main branch of llvm-project from source.\nA script that might be helpful for doing so is in the handy-dandy repository. NAG ( nagfor ) compiler fpm test --compiler nagfor --flag -fpp GNU ( gfortran ) compiler gfortran versions 14 or higher fpm test --compiler gfortran --profile release gfortran version 13 fpm test --compiler gfortran --profile release --flag \"-ffree-line-length-none\" where the -ffree-line-length-none turns on support for lines exceeding the Fortran 2018 limit of 132 columns.\n(Fortran 2023 expands the allowable line length to 5,000 characters.) Intel ( ifx ) compiler fpm test --compiler ifx --flag \"-fpp -O3 -coarray\" --profile release Documentation See our online documentation or build the documentation locally by installing FORD and executing ford ford.md . Developer Info Berkeley Lab","tags":"home","url":"index.html"},{"title":"test_diagnosis_t – Julienne ","text":"type, public :: test_diagnosis_t Encapsulate test outcome and diagnostic information Inherited by type~~test_diagnosis_t~~InheritedByGraph type~test_diagnosis_t test_diagnosis_t type~test_result_t test_result_t type~test_result_t->type~test_diagnosis_t diagnosis_ Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Components Type Visibility Attributes Name Initial character(len=:), private, allocatable :: diagnostics_string_ logical, private :: test_passed_ Constructor public        interface test_diagnosis_t private elemental module function construct_from_character(test_passed, diagnostics_string) result(test_diagnosis) Implementation → The result is a test_diagnosis_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name logical, intent(in) :: test_passed character(len=*), intent(in) :: diagnostics_string Return Value type( test_diagnosis_t ) private elemental module function construct_from_string_t(test_passed, diagnostics_string) result(test_diagnosis) Implementation → The result is a test_diagnosis_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name logical, intent(in) :: test_passed type( string_t ), intent(in) :: diagnostics_string Return Value type( test_diagnosis_t ) Type-Bound Procedures procedure, public :: diagnostics_string interface private elemental module function diagnostics_string(self) result(string_) Implementation → The result is a string describing the condition(s) that caused a test failure Arguments Type Intent Optional Attributes Name class( test_diagnosis_t ), intent(in) :: self Return Value type( string_t ) procedure, public :: test_passed interface private elemental module function test_passed(self) result(passed) Implementation → The result is .true. if the test passed and false otherwise Arguments Type Intent Optional Attributes Name class( test_diagnosis_t ), intent(in) :: self Return Value logical","tags":"","url":"type/test_diagnosis_t.html"},{"title":"double_precision_operands_t – Julienne ","text":"type, private :: double_precision_operands_t Components Type Visibility Attributes Name Initial double precision, public :: actual double precision, public :: expected","tags":"","url":"type/double_precision_operands_t.html"},{"title":"operands_t – Julienne ","text":"type, private :: operands_t Components Type Visibility Attributes Name Initial real(kind=k), public :: actual real(kind=k), public :: expected integer, public, kind :: k = default_real","tags":"","url":"type/operands_t.html"},{"title":"operands_t – Julienne ","text":"type, private :: operands_t Components Type Visibility Attributes Name Initial real, public :: actual real, public :: expected","tags":"","url":"type/operands_t~2.html"},{"title":"test_result_t – Julienne ","text":"type, public :: test_result_t Encapsulate test descriptions and outcomes Inherits type~~test_result_t~~InheritsGraph type~test_result_t test_result_t type~string_t string_t type~test_result_t->type~string_t description_ type~test_diagnosis_t test_diagnosis_t type~test_result_t->type~test_diagnosis_t diagnosis_ characterizable_t characterizable_t type~string_t->characterizable_t Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Components Type Visibility Attributes Name Initial type( string_t ), private :: description_ type( test_diagnosis_t ), private, allocatable :: diagnosis_ Constructor public        interface test_result_t private elemental module function construct_from_character(description, diagnosis) result(test_result) Implementation → The result is a test_result_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description type( test_diagnosis_t ), intent(in), optional :: diagnosis Return Value type( test_result_t ) private elemental module function construct_from_string(description, diagnosis) result(test_result) Implementation → The result is a test_result_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description type( test_diagnosis_t ), intent(in), optional :: diagnosis Return Value type( test_result_t ) Type-Bound Procedures procedure, public :: characterize interface private pure module function characterize(self) result(characterization) Implementation → The result is a character description of the test and its outcome Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value character(len=:), allocatable generic, public :: description_contains => description_contains_string , description_contains_characters private  interface description_contains_string () Arguments None private  interface description_contains_characters () Arguments None procedure, public :: passed interface private impure elemental module function passed(self) result(test_passed) Implementation → The result is true if and only if the test passed on all images Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value logical procedure, public :: skipped interface private impure elemental module function skipped(self) result(test_skipped) Implementation → The result is true if and only if the test result contains no diagnosis on any image Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value logical procedure, private :: description_contains_characters interface private elemental module function description_contains_characters(self, substring) result(substring_found) Implementation → The result is true if and only if the test description contains the substring Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical procedure, private :: description_contains_string interface private elemental module function description_contains_string(self, substring) result(substring_found) Implementation → The result is true if and only if the test description contains the substring Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical","tags":"","url":"type/test_result_t.html"},{"title":"command_line_t – Julienne ","text":"type, public :: command_line_t Type-Bound Procedures procedure, public, nopass :: argument_present interface private module function argument_present(acceptable_argument) result(found) Implementation → result is .true. only if a command-line argument matches an element of this function's argument Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: acceptable_argument (:) sample list: [character(len=len( )):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"]\nwhere dashes support Linux/macOS, slashes support Windows, and must be replaced\nby the longest list element (\"--benchmark\" above) Return Value logical procedure, public, nopass :: flag_value interface private module function flag_value(flag) Implementation → result = { the value passed immediately after a command-line flag if the flag is present or\n         { an empty string otherwise. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: flag Return Value character(len=:), allocatable","tags":"","url":"type/command_line_t.html"},{"title":"string_t – Julienne ","text":"type, public, extends(characterizable_t) :: string_t Inherits type~~string_t~~InheritsGraph type~string_t string_t characterizable_t characterizable_t type~string_t->characterizable_t Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Inherited by type~~string_t~~InheritedByGraph type~string_t string_t type~file_t file_t type~file_t->type~string_t lines_ type~test_result_t test_result_t type~test_result_t->type~string_t description_ type~vector_test_description_t vector_test_description_t type~vector_test_description_t->type~string_t descriptions_ Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Components Type Visibility Attributes Name Initial character(len=:), private, allocatable :: string_ Constructor public        interface string_t private elemental module function from_characters(string) result(new_string) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string Return Value type( string_t ) private elemental module function from_default_complex(z) result(string) Implementation → Arguments Type Intent Optional Attributes Name complex, intent(in) :: z Return Value type( string_t ) private elemental module function from_default_integer(i) result(string) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: i Return Value type( string_t ) private elemental module function from_default_logical(b) result(string) Implementation → Arguments Type Intent Optional Attributes Name logical, intent(in) :: b Return Value type( string_t ) private elemental module function from_default_real(x) result(string) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: x Return Value type( string_t ) private elemental module function from_double_precision(x) result(string) Implementation → Arguments Type Intent Optional Attributes Name double precision, intent(in) :: x Return Value type( string_t ) private elemental module function from_double_precision_complex(z) result(string) Implementation → Arguments Type Intent Optional Attributes Name complex(kind=kind(1D0)), intent(in) :: z Return Value type( string_t ) private elemental module function from_logical_c_bool(b) result(string) Implementation → Arguments Type Intent Optional Attributes Name logical(kind=c_bool), intent(in) :: b Return Value type( string_t ) Type-Bound Procedures procedure, public :: as_character interface private pure module function as_character(self) result(raw_string) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value character(len=:), allocatable generic, public :: assignment(= ) => assign_string_t_to_character , assign_character_to_string_t private  interface assign_string_t_to_character () Arguments None private  interface assign_character_to_string_t () Arguments None procedure, public :: base_name interface private pure module function base_name(self) result(base) Implementation → result contains all characters in file_name before the last dot (.) Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) procedure, public :: bracket interface private elemental module function bracket(self, opening, closing) result(bracketed_self) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in), optional :: opening character(len=*), intent(in), optional :: closing Return Value type( string_t ) procedure, public :: file_extension interface private elemental module function file_extension(self) result(extension) Implementation → result contains all characters in file_name after the last dot (.) Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) procedure, public :: get_json_key interface private elemental module function get_json_key(self) result(unquoted_key) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) generic, public :: get_json_value => get_string , get_string_t_array_with_character_key , get_string_t_array_with_string_t_key , get_real , get_real_with_character_key , get_character , get_character_with_character_key , get_logical , get_logical_with_character_key , get_real_array , get_real_array_with_character_key , get_integer_array , get_integer_array_with_character_key , get_integer , get_integer_with_character_key , get_double_precision , get_double_precision_with_character_key , get_double_precision_array , get_double_precision_array_with_character_key private  interface get_string () Arguments None private  interface get_string_t_array_with_character_key () Arguments None private  interface get_string_t_array_with_string_t_key () Arguments None private  interface get_real () Arguments None private  interface get_real_with_character_key () Arguments None private  interface get_character () Arguments None private  interface get_character_with_character_key () Arguments None private  interface get_logical () Arguments None private  interface get_logical_with_character_key () Arguments None private  interface get_real_array () Arguments None private  interface get_real_array_with_character_key () Arguments None private  interface get_integer_array () Arguments None private  interface get_integer_array_with_character_key () Arguments None private  interface get_integer () Arguments None private  interface get_integer_with_character_key () Arguments None private  interface get_double_precision () Arguments None private  interface get_double_precision_with_character_key () Arguments None private  interface get_double_precision_array () Arguments None private  interface get_double_precision_array_with_character_key () Arguments None procedure, public :: is_allocated interface private elemental module function is_allocated(self) result(string_allocated) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value logical generic, public :: operator(//) => string_t_cat_string_t , string_t_cat_character , character_cat_string_t private  interface string_t_cat_string_t () Arguments None private  interface string_t_cat_character () Arguments None private  interface character_cat_string_t () Arguments None generic, public :: operator(/=) => string_t_ne_string_t , string_t_ne_character , character_ne_string_t private  interface string_t_ne_string_t () Arguments None private  interface string_t_ne_character () Arguments None private  interface character_ne_string_t () Arguments None generic, public :: operator(==) => string_t_eq_string_t , string_t_eq_character , character_eq_string_t private  interface string_t_eq_string_t () Arguments None private  interface string_t_eq_character () Arguments None private  interface character_eq_string_t () Arguments None generic, public :: string => as_character private  interface as_character () Arguments None procedure, private :: assign_character_to_string_t interface private elemental module subroutine assign_character_to_string_t(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(inout) :: lhs character(len=*), intent(in) :: rhs procedure, private, pass(rhs) :: assign_string_t_to_character interface private pure module subroutine assign_string_t_to_character(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=:), intent(out), allocatable :: lhs class( string_t ), intent(in) :: rhs procedure, private, pass(rhs) :: character_cat_string_t interface private pure module function character_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t ) procedure, private, pass(rhs) :: character_eq_string_t interface private elemental module function character_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical procedure, private, pass(rhs) :: character_ne_string_t interface private elemental module function character_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical procedure, private :: get_character interface private pure module function get_character(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key character(len=*), intent(in) :: mold Return Value character(len=:), allocatable procedure, private :: get_character_with_character_key interface private pure module function get_character_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key character(len=*), intent(in) :: mold Return Value character(len=:), allocatable procedure, private :: get_double_precision interface private pure module function get_double_precision(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key double precision, intent(in) :: mold Return Value double precision procedure, private :: get_double_precision_array interface private pure module function get_double_precision_array(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key double precision, intent(in) :: mold (:) Return Value double precision, allocatable, (:) procedure, private :: get_double_precision_array_with_character_key interface private pure module function get_double_precision_array_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key double precision, intent(in) :: mold (:) Return Value double precision, allocatable, (:) procedure, private :: get_double_precision_with_character_key interface private pure module function get_double_precision_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key double precision, intent(in) :: mold Return Value double precision procedure, private :: get_integer interface private pure module function get_integer(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold Return Value integer procedure, private :: get_integer_array interface private pure module function get_integer_array(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold (:) Return Value integer, allocatable, (:) procedure, private :: get_integer_array_with_character_key interface private pure module function get_integer_array_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key integer, intent(in) :: mold (:) Return Value integer, allocatable, (:) procedure, private :: get_integer_with_character_key interface private pure module function get_integer_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key integer, intent(in) :: mold Return Value integer procedure, private :: get_logical interface private elemental module function get_logical(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key logical, intent(in) :: mold Return Value logical procedure, private :: get_logical_with_character_key interface private pure module function get_logical_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key logical, intent(in) :: mold Return Value logical procedure, private :: get_real interface private pure module function get_real(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold Return Value real procedure, private :: get_real_array interface private pure module function get_real_array(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold (:) Return Value real, allocatable, (:) procedure, private :: get_real_array_with_character_key interface private pure module function get_real_array_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key real, intent(in) :: mold (:) Return Value real, allocatable, (:) procedure, private :: get_real_with_character_key interface private pure module function get_real_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key real, intent(in) :: mold Return Value real procedure, private :: get_string interface private elemental module function get_string(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key class( string_t ), intent(in) :: mold Return Value type( string_t ) procedure, private :: get_string_t_array_with_character_key interface private pure module function get_string_t_array_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key type( string_t ), intent(in) :: mold (:) Return Value type( string_t ), allocatable, (:) procedure, private :: get_string_t_array_with_string_t_key interface private pure module function get_string_t_array_with_string_t_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self type( string_t ), intent(in) :: key type( string_t ), intent(in) :: mold (:) Return Value type( string_t ), allocatable, (:) procedure, private :: string_t_cat_character interface private pure module function string_t_cat_character(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( string_t ) procedure, private :: string_t_cat_string_t interface private pure module function string_t_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t ) procedure, private :: string_t_eq_character interface private elemental module function string_t_eq_character(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical procedure, private :: string_t_eq_string_t interface private elemental module function string_t_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical procedure, private :: string_t_ne_character interface private elemental module function string_t_ne_character(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical procedure, private :: string_t_ne_string_t interface private elemental module function string_t_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical","tags":"","url":"type/string_t.html"},{"title":"file_t – Julienne ","text":"type, public :: file_t Inherits type~~file_t~~InheritsGraph type~file_t file_t type~string_t string_t type~file_t->type~string_t lines_ characterizable_t characterizable_t type~string_t->characterizable_t Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Components Type Visibility Attributes Name Initial type( string_t ), private, allocatable :: lines_ (:) Constructor public        interface file_t private module function from_file_with_character_name(file_name) result(file_object) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: file_name Return Value type( file_t ) private module function from_file_with_string_name(file_name) result(file_object) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: file_name Return Value type( file_t ) private module function from_lines(lines) result(file_object) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lines (:) Return Value type( file_t ) Type-Bound Procedures procedure, public :: lines interface private pure module function lines(self) result(my_lines) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self Return Value type( string_t ), allocatable, (:) generic, public :: write_lines => write_to_output_unit , write_to_character_file_name , write_to_string_file_name private  interface write_to_output_unit () Arguments None private  interface write_to_character_file_name () Arguments None private  interface write_to_string_file_name () Arguments None procedure, private :: write_to_character_file_name interface private impure elemental module subroutine write_to_character_file_name(self, file_name) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self character(len=*), intent(in) :: file_name procedure, private :: write_to_output_unit interface private module subroutine write_to_output_unit(self) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self procedure, private :: write_to_string_file_name interface private impure elemental module subroutine write_to_string_file_name(self, file_name) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self type( string_t ), intent(in) :: file_name","tags":"","url":"type/file_t.html"},{"title":"test_description_t – Julienne ","text":"type, public :: test_description_t Encapsulate test descriptions and test-functions Components Type Visibility Attributes Name Initial character(len=:), private, allocatable :: description_ procedure( diagnosis_function_i ), private, pointer, nopass :: diagnosis_function_ => null() Constructor public        interface test_description_t private module function construct_from_characters(description, diagnosis_function) result(test_description) Implementation → The result is a test_description_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description procedure( diagnosis_function_i ), intent(in), optional, pointer :: diagnosis_function Return Value type( test_description_t ) private module function construct_from_string(description, diagnosis_function) result(test_description) Implementation → The result is a test_description_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description procedure( diagnosis_function_i ), intent(in), optional, pointer :: diagnosis_function Return Value type( test_description_t ) Type-Bound Procedures generic, public :: contains_text => contains_string_t , contains_characters private  interface contains_string_t () Arguments None private  interface contains_characters () Arguments None generic, public :: operator(==) => equals private  interface equals () Arguments None procedure, public :: run interface private impure elemental module function run(self) result(test_result) Implementation → The result encapsulates the test description and test outcome Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self Return Value type( test_result_t ) procedure, private :: contains_characters interface private elemental module function contains_characters(self, substring) result(match) Implementation → The result is .true. if the test description includes the value of substring Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical procedure, private :: contains_string_t interface private elemental module function contains_string_t(self, substring) result(match) Implementation → The result is .true. if the test description includes the value of substring Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical procedure, private :: equals interface private elemental module function equals(lhs, rhs) result(lhs_eq_rhs) Implementation → The result is .true. if the components of the lhs & rhs are equal Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: lhs class( test_description_t ), intent(in) :: rhs Return Value logical","tags":"","url":"type/test_description_t.html"},{"title":"bin_t – Julienne ","text":"type, public :: bin_t encapsulate a range of item numbers associated with a bin Components Type Visibility Attributes Name Initial integer, private :: first_ integer, private :: last_ Constructor public        interface bin_t private elemental module function construct(num_items, num_bins, bin_number) result(bin) Implementation → the result is a bin associated with a range of item numbers Arguments Type Intent Optional Attributes Name integer, intent(in) :: num_items integer, intent(in) :: num_bins integer, intent(in) :: bin_number Return Value type( bin_t ) Type-Bound Procedures procedure, public :: first interface private elemental module function first(self) result(first_item_number) Implementation → the result is the first item number associated with the given bin Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer procedure, public :: last interface private elemental module function last(self) result(last_item_number) Implementation → the result is the last item number associated with the given bin Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer","tags":"","url":"type/bin_t.html"},{"title":"test_t – Julienne ","text":"type, public, abstract :: test_t Facilitate testing and test reporting Type-Bound Procedures procedure, public :: report interface private module subroutine report(test, passes, tests, skips) Implementation → Print the test results and increment the tallies of passing tests, total tests, and skipped tests. Arguments Type Intent Optional Attributes Name class( test_t ), intent(in) :: test integer, intent(inout) :: passes integer, intent(inout) :: tests integer, intent(inout) :: skips procedure( results_interface ), public, deferred, nopass :: results function results_interface() result(test_results) Prototype The result is an array of test results for subsequent reporting in the \"report\" type-bound procedure Arguments None Return Value type( test_result_t ), allocatable, (:) procedure( subject_interface ), public, deferred, nopass :: subject pure function subject_interface() result(specimen_description) Prototype The result is the name of the test specimen (the subject of testing) Arguments None Return Value character(len=:), allocatable","tags":"","url":"type/test_t.html"},{"title":"vector_test_description_t – Julienne ","text":"type, public :: vector_test_description_t Inherits type~~vector_test_description_t~~InheritsGraph type~vector_test_description_t vector_test_description_t type~string_t string_t type~vector_test_description_t->type~string_t descriptions_ characterizable_t characterizable_t type~string_t->characterizable_t Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Components Type Visibility Attributes Name Initial type( string_t ), private, allocatable :: descriptions_ (:) procedure( vector_diagnosis_function_i ), private, pointer, nopass :: vector_diagnosis_function_ => null() Constructor public        interface vector_test_description_t private module function construct_from_strings(descriptions, vector_diagnosis_function) result(vector_test_description) Implementation → The result is a vector_test_description_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: descriptions (:) procedure( vector_diagnosis_function_i ), intent(in), optional, pointer :: vector_diagnosis_function Return Value type( vector_test_description_t ) Type-Bound Procedures generic, public :: contains_text => contains_string_t , contains_characters private  interface contains_string_t () Arguments None private  interface contains_characters () Arguments None procedure, public :: run interface public impure module function run(self) result(test_results) Implementation → The result encapsulates the test description and test outcome Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self Return Value type( test_result_t ), allocatable, (:) procedure, private :: contains_characters interface private module function contains_characters(self, substring) result(match_vector) Implementation → The result is .true. if the test description includes the value of substring Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical, allocatable, (:) procedure, private :: contains_string_t interface private module function contains_string_t(self, substring) result(match_vector) Implementation → The result is .true. if the test description includes the value of substring%string() Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical, allocatable, (:)","tags":"","url":"type/vector_test_description_t.html"},{"title":"diagnosis_function_i – Julienne","text":"interface public  function diagnosis_function_i() result(test_diagnosis) Arguments None Return Value type( test_diagnosis_t )","tags":"","url":"interface/diagnosis_function_i.html"},{"title":"results_interface – Julienne","text":"interface private  function results_interface() result(test_results) Arguments None Return Value type( test_result_t ),allocatable,(:) Description The result is an array of test results for subsequent reporting in the \"report\" type-bound procedure","tags":"","url":"interface/results_interface.html"},{"title":"subject_interface – Julienne","text":"interface private pure function subject_interface() result(specimen_description) Arguments None Return Value character(len=:),allocatable Description The result is the name of the test specimen (the subject of testing)","tags":"","url":"interface/subject_interface.html"},{"title":"vector_diagnosis_function_i – Julienne","text":"interface public  function vector_diagnosis_function_i() result(diagnoses) Arguments None Return Value type( test_diagnosis_t ),allocatable,(:)","tags":"","url":"interface/vector_diagnosis_function_i.html"},{"title":"operator(.all.) – Julienne","text":"public interface operator(.all.) Functions private pure module function aggregate_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (..) Return Value type( test_diagnosis_t )","tags":"","url":"interface/operator(.all.).html"},{"title":"operator(.and.) – Julienne","text":"public interface operator(.and.) Functions private elemental module function and(lhs, rhs) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: lhs type( test_diagnosis_t ), intent(in) :: rhs Return Value type( test_diagnosis_t )","tags":"","url":"interface/operator(.and.).html"},{"title":"operator(.approximates.) – Julienne","text":"public interface operator(.approximates.) Functions private elemental module function approximates_double_precision(actual, expected) result(operands) Implementation → Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected Return Value type( operands_t (double_precision)) private elemental module function approximates_real(actual, expected) result(operands) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected Return Value type( operands_t )","tags":"","url":"interface/operator(.approximates.).html"},{"title":"operator(.equalsExpected.) – Julienne","text":"public interface operator(.equalsExpected.) Functions private elemental module function equals_expected_integer(actual, expected) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected Return Value type( test_diagnosis_t )","tags":"","url":"interface/operator(.equalsexpected.).html"},{"title":"operator(.greaterThan.) – Julienne","text":"public interface operator(.greaterThan.) Functions private elemental module function greater_than_double(actual, expected_floor) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected_floor Return Value type( test_diagnosis_t ) private elemental module function greater_than_integer(actual, expected_floor) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_floor Return Value type( test_diagnosis_t ) private elemental module function greater_than_real(actual, expected_floor) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected_floor Return Value type( test_diagnosis_t )","tags":"","url":"interface/operator(.greaterthan.).html"},{"title":"operator(.greaterThanOrEqualTo.) – Julienne","text":"public interface operator(.greaterThanOrEqualTo.) Functions private elemental module function greater_than_or_equal_to_integer(actual, expected_min) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_min Return Value type( test_diagnosis_t )","tags":"","url":"interface/operator(.greaterthanorequalto.).html"},{"title":"operator(.lessThan.) – Julienne","text":"public interface operator(.lessThan.) Functions private elemental module function less_than_double(actual, expected_ceiling) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected_ceiling Return Value type( test_diagnosis_t ) private elemental module function less_than_integer(actual, expected_ceiling) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_ceiling Return Value type( test_diagnosis_t ) private elemental module function less_than_real(actual, expected_ceiling) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected_ceiling Return Value type( test_diagnosis_t )","tags":"","url":"interface/operator(.lessthan.).html"},{"title":"operator(.lessThanOrEqualTo.) – Julienne","text":"public interface operator(.lessThanOrEqualTo.) Functions private elemental module function less_than_or_equal_to_integer(actual, expected_max) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_max Return Value type( test_diagnosis_t )","tags":"","url":"interface/operator(.lessthanorequalto.).html"},{"title":"operator(.within.) – Julienne","text":"public interface operator(.within.) Functions private elemental module function within_double_precision(operands, tolerance) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( operands_t (double_precision)), intent(in) :: operands double precision, intent(in) :: tolerance Return Value type( test_diagnosis_t ) private elemental module function within_real(operands, tolerance) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( operands_t ), intent(in) :: operands real, intent(in) :: tolerance Return Value type( test_diagnosis_t )","tags":"","url":"interface/operator(.within.).html"},{"title":"operator(.withinFraction.) – Julienne","text":"public interface operator(.withinFraction.) Functions private elemental module function within_double_precision_fraction(operands, fractional_tolerance) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( operands_t (double_precision)), intent(in) :: operands double precision, intent(in) :: fractional_tolerance Return Value type( test_diagnosis_t ) private elemental module function within_real_fraction(operands, fractional_tolerance) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( operands_t ), intent(in) :: operands real, intent(in) :: fractional_tolerance Return Value type( test_diagnosis_t )","tags":"","url":"interface/operator(.withinfraction.).html"},{"title":"operator(.withinPercentage.) – Julienne","text":"public interface operator(.withinPercentage.) Functions private elemental module function within_double_precision_percentage(operands, percentage_tolerance) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( operands_t (double_precision)), intent(in) :: operands double precision, intent(in) :: percentage_tolerance Return Value type( test_diagnosis_t ) private elemental module function within_real_percentage(operands, percentage_tolerance) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( operands_t ), intent(in) :: operands real, intent(in) :: percentage_tolerance Return Value type( test_diagnosis_t )","tags":"","url":"interface/operator(.withinpercentage.).html"},{"title":"test_diagnosis_t – Julienne","text":"public interface test_diagnosis_t Functions private elemental module function construct_from_character(test_passed, diagnostics_string) result(test_diagnosis) Implementation → The result is a test_diagnosis_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name logical, intent(in) :: test_passed character(len=*), intent(in) :: diagnostics_string Return Value type( test_diagnosis_t ) private elemental module function construct_from_string_t(test_passed, diagnostics_string) result(test_diagnosis) Implementation → The result is a test_diagnosis_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name logical, intent(in) :: test_passed type( string_t ), intent(in) :: diagnostics_string Return Value type( test_diagnosis_t )","tags":"","url":"interface/test_diagnosis_t.html"},{"title":"diagnostics_string – Julienne","text":"interface Called by interface~~diagnostics_string~~CalledByGraph interface~diagnostics_string test_diagnosis_t%diagnostics_string proc~characterize characterize proc~characterize->interface~diagnostics_string Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private elemental module function diagnostics_string(self) result(string_) Implementation → Arguments Type Intent Optional Attributes Name class( test_diagnosis_t ), intent(in) :: self Return Value type( string_t ) Description The result is a string describing the condition(s) that caused a test failure","tags":"","url":"interface/diagnostics_string.html"},{"title":"test_passed – Julienne","text":"interface Called by interface~~test_passed~~CalledByGraph interface~test_passed test_diagnosis_t%test_passed proc~characterize characterize proc~characterize->interface~test_passed proc~passed passed proc~passed->interface~test_passed Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private elemental module function test_passed(self) result(passed) Implementation → Arguments Type Intent Optional Attributes Name class( test_diagnosis_t ), intent(in) :: self Return Value logical Description The result is .true. if the test passed and false otherwise","tags":"","url":"interface/test_passed.html"},{"title":"test_result_t – Julienne","text":"public interface test_result_t Functions private elemental module function construct_from_character(description, diagnosis) result(test_result) Implementation → The result is a test_result_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description type( test_diagnosis_t ), intent(in), optional :: diagnosis Return Value type( test_result_t ) private elemental module function construct_from_string(description, diagnosis) result(test_result) Implementation → The result is a test_result_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description type( test_diagnosis_t ), intent(in), optional :: diagnosis Return Value type( test_result_t )","tags":"","url":"interface/test_result_t.html"},{"title":"characterize – Julienne","text":"interface private pure module function characterize(self) result(characterization) Implementation → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value character(len=:),allocatable Description The result is a character description of the test and its outcome","tags":"","url":"interface/characterize.html"},{"title":"description_contains_characters – Julienne","text":"interface Called by interface~~description_contains_characters~~CalledByGraph interface~description_contains_characters test_result_t%description_contains_characters proc~description_contains_string description_contains_string proc~description_contains_string->interface~description_contains_characters Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private elemental module function description_contains_characters(self, substring) result(substring_found) Implementation → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical Description The result is true if and only if the test description contains the substring","tags":"","url":"interface/description_contains_characters.html"},{"title":"description_contains_string – Julienne","text":"interface private elemental module function description_contains_string(self, substring) result(substring_found) Implementation → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical Description The result is true if and only if the test description contains the substring","tags":"","url":"interface/description_contains_string.html"},{"title":"passed – Julienne","text":"interface private impure elemental module function passed(self) result(test_passed) Implementation → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value logical Description The result is true if and only if the test passed on all images","tags":"","url":"interface/passed.html"},{"title":"skipped – Julienne","text":"interface private impure elemental module function skipped(self) result(test_skipped) Implementation → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value logical Description The result is true if and only if the test result contains no diagnosis on any image","tags":"","url":"interface/skipped.html"},{"title":"argument_present – Julienne","text":"interface Called by interface~~argument_present~~CalledByGraph interface~argument_present command_line_t%argument_present program~check_for_command_line_argument check_for_command_line_argument program~check_for_command_line_argument->interface~argument_present Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private module function argument_present(acceptable_argument) result(found) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: acceptable_argument (:) sample list: [character(len=len( )):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"]\nwhere dashes support Linux/macOS, slashes support Windows, and must be replaced\nby the longest list element (\"--benchmark\" above) Return Value logical Description result is .true. only if a command-line argument matches an element of this function's argument","tags":"","url":"interface/argument_present.html"},{"title":"flag_value – Julienne","text":"interface Called by interface~~flag_value~~CalledByGraph interface~flag_value command_line_t%flag_value program~get_command_line_flag_value get_command_line_flag_value program~get_command_line_flag_value->interface~flag_value Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private module function flag_value(flag) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: flag Return Value character(len=:),allocatable Description result = { the value passed immediately after a command-line flag if the flag is present or\n         { an empty string otherwise.","tags":"","url":"interface/flag_value.html"},{"title":"compiler – Julienne","text":"pure function compiler() Arguments None Return Value type( string_t ) Called by proc~~compiler~~CalledByGraph proc~compiler compiler program~create_markdown_table create_markdown_table program~create_markdown_table->proc~compiler Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/compiler.html"},{"title":"markdown_table – Julienne","text":"pure function markdown_table(row_header, column_header, body_cells, side_borders) result(lines) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: row_header (first_body_row:) type( string_t ), intent(in) :: column_header (:) type( string_t ), intent(in) :: body_cells (first_body_row:,:) logical, intent(in) :: side_borders Return Value type( string_t ), (size(body_cells,1)+rank(column_header)+num_rule_lines) Calls proc~~markdown_table~~CallsGraph proc~markdown_table markdown_table interface~bracket string_t%bracket proc~markdown_table->interface~bracket Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~markdown_table~~CalledByGraph proc~markdown_table markdown_table program~create_markdown_table create_markdown_table program~create_markdown_table->proc~markdown_table Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/markdown_table.html"},{"title":"array_of_strings – Julienne","text":"interface public pure module function array_of_strings(delimited_strings, delimiter) result(strings_array) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: delimited_strings character(len=*), intent(in) :: delimiter Return Value type( string_t ),allocatable,(:)","tags":"","url":"interface/array_of_strings.html"},{"title":"operator(.cat.) – Julienne","text":"public interface operator(.cat.) Functions private pure module function concatenate_elements(strings) result(concatenated_strings) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) Return Value type( string_t )","tags":"","url":"interface/operator(.cat.).html"},{"title":"operator(.csv.) – Julienne","text":"public interface operator(.csv.) Functions private pure module function characters_with_comma_separator(strings) result(csv) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: strings (:) Return Value type( string_t ) private pure module function strings_with_comma_separator(strings) result(csv) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) Return Value type( string_t )","tags":"","url":"interface/operator(.csv.).html"},{"title":"operator(.sv.) – Julienne","text":"public interface operator(.sv.) Functions private pure module function characters_with_character_separator(strings, separator) result(sv) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: strings (:) character(len=*), intent(in) :: separator Return Value type( string_t ) private pure module function characters_with_string_separator(strings, separator) result(sv) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: strings (:) type( string_t ), intent(in) :: separator Return Value type( string_t ) private pure module function strings_with_character_separator(strings, separator) result(sv) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) character(len=*), intent(in) :: separator Return Value type( string_t ) private pure module function strings_with_string_t_separator(strings, separator) result(sv) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) type( string_t ), intent(in) :: separator Return Value type( string_t )","tags":"","url":"interface/operator(.sv.).html"},{"title":"string_t – Julienne","text":"public interface string_t Functions private elemental module function from_characters(string) result(new_string) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string Return Value type( string_t ) private elemental module function from_default_complex(z) result(string) Implementation → Arguments Type Intent Optional Attributes Name complex, intent(in) :: z Return Value type( string_t ) private elemental module function from_default_integer(i) result(string) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: i Return Value type( string_t ) private elemental module function from_default_logical(b) result(string) Implementation → Arguments Type Intent Optional Attributes Name logical, intent(in) :: b Return Value type( string_t ) private elemental module function from_default_real(x) result(string) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: x Return Value type( string_t ) private elemental module function from_double_precision(x) result(string) Implementation → Arguments Type Intent Optional Attributes Name double precision, intent(in) :: x Return Value type( string_t ) private elemental module function from_double_precision_complex(z) result(string) Implementation → Arguments Type Intent Optional Attributes Name complex(kind=kind(1D0)), intent(in) :: z Return Value type( string_t ) private elemental module function from_logical_c_bool(b) result(string) Implementation → Arguments Type Intent Optional Attributes Name logical(kind=c_bool), intent(in) :: b Return Value type( string_t )","tags":"","url":"interface/string_t.html"},{"title":"as_character – Julienne","text":"interface Called by interface~~as_character~~CalledByGraph interface~as_character string_t%as_character none~string string_t%string none~string->interface~as_character proc~aggregate_diagnosis aggregate_diagnosis proc~aggregate_diagnosis->none~string proc~assign_string_t_to_character assign_string_t_to_character proc~assign_string_t_to_character->none~string proc~base_name base_name proc~base_name->none~string proc~character_eq_string_t character_eq_string_t proc~character_eq_string_t->none~string proc~character_ne_string_t character_ne_string_t proc~character_ne_string_t->none~string proc~characterize characterize proc~characterize->none~string proc~concatenate_elements concatenate_elements proc~concatenate_elements->none~string proc~contains_characters~2 contains_characters proc~contains_characters~2->none~string proc~contains_string_t contains_string_t proc~contains_string_t->none~string proc~contains_string_t~2 contains_string_t proc~contains_string_t~2->none~string proc~description_contains_characters description_contains_characters proc~description_contains_characters->none~string proc~description_contains_string description_contains_string proc~description_contains_string->none~string proc~file_extension file_extension proc~file_extension->none~string proc~from_file_with_string_name from_file_with_string_name proc~from_file_with_string_name->none~string proc~get_double_precision get_double_precision proc~get_double_precision->none~string proc~get_double_precision_array get_double_precision_array proc~get_double_precision_array->none~string proc~get_integer get_integer proc~get_integer->none~string proc~get_json_key get_json_key proc~get_json_key->none~string proc~get_logical get_logical proc~get_logical->none~string proc~get_real get_real proc~get_real->none~string proc~get_real_array get_real_array proc~get_real_array->none~string proc~get_string get_string proc~get_string->none~string proc~get_string_t_array_with_character_key get_string_t_array_with_character_key proc~get_string_t_array_with_character_key->none~string proc~get_string_t_array_with_string_t_key get_string_t_array_with_string_t_key proc~get_string_t_array_with_string_t_key->none~string proc~string_t_eq_character string_t_eq_character proc~string_t_eq_character->none~string proc~string_t_eq_string_t string_t_eq_string_t proc~string_t_eq_string_t->none~string proc~string_t_ne_character string_t_ne_character proc~string_t_ne_character->none~string proc~string_t_ne_string_t string_t_ne_string_t proc~string_t_ne_string_t->none~string proc~write_to_character_file_name write_to_character_file_name proc~write_to_character_file_name->none~string proc~write_to_output_unit write_to_output_unit proc~write_to_output_unit->none~string proc~write_to_string_file_name write_to_string_file_name proc~write_to_string_file_name->none~string Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private pure module function as_character(self) result(raw_string) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value character(len=:),allocatable","tags":"","url":"interface/as_character.html"},{"title":"assign_character_to_string_t – Julienne","text":"interface private elemental module subroutine assign_character_to_string_t(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(inout) :: lhs character(len=*), intent(in) :: rhs","tags":"","url":"interface/assign_character_to_string_t.html"},{"title":"assign_string_t_to_character – Julienne","text":"interface private pure module subroutine assign_string_t_to_character(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=:), intent(out), allocatable :: lhs class( string_t ), intent(in) :: rhs","tags":"","url":"interface/assign_string_t_to_character.html"},{"title":"base_name – Julienne","text":"interface private pure module function base_name(self) result(base) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) Description result contains all characters in file_name before the last dot (.)","tags":"","url":"interface/base_name.html"},{"title":"bracket – Julienne","text":"interface Called by interface~~bracket~~CalledByGraph interface~bracket string_t%bracket proc~markdown_table markdown_table proc~markdown_table->interface~bracket program~create_markdown_table create_markdown_table program~create_markdown_table->proc~markdown_table Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private elemental module function bracket(self, opening, closing) result(bracketed_self) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in), optional :: opening character(len=*), intent(in), optional :: closing Return Value type( string_t )","tags":"","url":"interface/bracket.html"},{"title":"character_cat_string_t – Julienne","text":"interface private pure module function character_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t )","tags":"","url":"interface/character_cat_string_t.html"},{"title":"character_eq_string_t – Julienne","text":"interface private elemental module function character_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical","tags":"","url":"interface/character_eq_string_t.html"},{"title":"character_ne_string_t – Julienne","text":"interface private elemental module function character_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical","tags":"","url":"interface/character_ne_string_t.html"},{"title":"file_extension – Julienne","text":"interface private elemental module function file_extension(self) result(extension) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) Description result contains all characters in file_name after the last dot (.)","tags":"","url":"interface/file_extension.html"},{"title":"get_character – Julienne","text":"interface private pure module function get_character(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key character(len=*), intent(in) :: mold Return Value character(len=:),allocatable","tags":"","url":"interface/get_character.html"},{"title":"get_character_with_character_key – Julienne","text":"interface private pure module function get_character_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key character(len=*), intent(in) :: mold Return Value character(len=:),allocatable","tags":"","url":"interface/get_character_with_character_key.html"},{"title":"get_double_precision – Julienne","text":"interface Called by interface~~get_double_precision~~CalledByGraph interface~get_double_precision string_t%get_double_precision proc~get_double_precision_with_character_key get_double_precision_with_character_key proc~get_double_precision_with_character_key->interface~get_double_precision Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private pure module function get_double_precision(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key double precision, intent(in) :: mold Return Value double precision","tags":"","url":"interface/get_double_precision.html"},{"title":"get_double_precision_array – Julienne","text":"interface Called by interface~~get_double_precision_array~~CalledByGraph interface~get_double_precision_array string_t%get_double_precision_array proc~get_double_precision_array_with_character_key get_double_precision_array_with_character_key proc~get_double_precision_array_with_character_key->interface~get_double_precision_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private pure module function get_double_precision_array(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key double precision, intent(in) :: mold (:) Return Value double precision,allocatable,(:)","tags":"","url":"interface/get_double_precision_array.html"},{"title":"get_double_precision_array_with_character_key – Julienne","text":"interface private pure module function get_double_precision_array_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key double precision, intent(in) :: mold (:) Return Value double precision,allocatable,(:)","tags":"","url":"interface/get_double_precision_array_with_character_key.html"},{"title":"get_double_precision_with_character_key – Julienne","text":"interface private pure module function get_double_precision_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key double precision, intent(in) :: mold Return Value double precision","tags":"","url":"interface/get_double_precision_with_character_key.html"},{"title":"get_integer – Julienne","text":"interface Called by interface~~get_integer~~CalledByGraph interface~get_integer string_t%get_integer proc~get_integer_with_character_key get_integer_with_character_key proc~get_integer_with_character_key->interface~get_integer Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private pure module function get_integer(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold Return Value integer","tags":"","url":"interface/get_integer.html"},{"title":"get_integer_array – Julienne","text":"interface Called by interface~~get_integer_array~~CalledByGraph interface~get_integer_array string_t%get_integer_array proc~get_integer_array_with_character_key get_integer_array_with_character_key proc~get_integer_array_with_character_key->interface~get_integer_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private pure module function get_integer_array(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold (:) Return Value integer,allocatable,(:)","tags":"","url":"interface/get_integer_array.html"},{"title":"get_integer_array_with_character_key – Julienne","text":"interface private pure module function get_integer_array_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key integer, intent(in) :: mold (:) Return Value integer,allocatable,(:)","tags":"","url":"interface/get_integer_array_with_character_key.html"},{"title":"get_integer_with_character_key – Julienne","text":"interface private pure module function get_integer_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key integer, intent(in) :: mold Return Value integer","tags":"","url":"interface/get_integer_with_character_key.html"},{"title":"get_json_key – Julienne","text":"interface Called by interface~~get_json_key~~CalledByGraph interface~get_json_key string_t%get_json_key proc~get_double_precision get_double_precision proc~get_double_precision->interface~get_json_key proc~get_double_precision_array get_double_precision_array proc~get_double_precision_array->interface~get_json_key proc~get_integer get_integer proc~get_integer->interface~get_json_key proc~get_logical get_logical proc~get_logical->interface~get_json_key proc~get_real get_real proc~get_real->interface~get_json_key proc~get_real_array get_real_array proc~get_real_array->interface~get_json_key proc~get_string get_string proc~get_string->interface~get_json_key proc~get_string_t_array_with_character_key get_string_t_array_with_character_key proc~get_string_t_array_with_character_key->interface~get_json_key Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private elemental module function get_json_key(self) result(unquoted_key) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t )","tags":"","url":"interface/get_json_key.html"},{"title":"get_logical – Julienne","text":"interface Called by interface~~get_logical~~CalledByGraph interface~get_logical string_t%get_logical proc~get_logical_with_character_key get_logical_with_character_key proc~get_logical_with_character_key->interface~get_logical Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private elemental module function get_logical(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key logical, intent(in) :: mold Return Value logical","tags":"","url":"interface/get_logical.html"},{"title":"get_logical_with_character_key – Julienne","text":"interface private pure module function get_logical_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key logical, intent(in) :: mold Return Value logical","tags":"","url":"interface/get_logical_with_character_key.html"},{"title":"get_real – Julienne","text":"interface Called by interface~~get_real~~CalledByGraph interface~get_real string_t%get_real proc~get_real_with_character_key get_real_with_character_key proc~get_real_with_character_key->interface~get_real Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private pure module function get_real(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold Return Value real","tags":"","url":"interface/get_real.html"},{"title":"get_real_array – Julienne","text":"interface Called by interface~~get_real_array~~CalledByGraph interface~get_real_array string_t%get_real_array proc~get_integer_array get_integer_array proc~get_integer_array->interface~get_real_array proc~get_real_array_with_character_key get_real_array_with_character_key proc~get_real_array_with_character_key->interface~get_real_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private pure module function get_real_array(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold (:) Return Value real,allocatable,(:)","tags":"","url":"interface/get_real_array.html"},{"title":"get_real_array_with_character_key – Julienne","text":"interface private pure module function get_real_array_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key real, intent(in) :: mold (:) Return Value real,allocatable,(:)","tags":"","url":"interface/get_real_array_with_character_key.html"},{"title":"get_real_with_character_key – Julienne","text":"interface private pure module function get_real_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key real, intent(in) :: mold Return Value real","tags":"","url":"interface/get_real_with_character_key.html"},{"title":"get_string – Julienne","text":"interface Called by interface~~get_string~~CalledByGraph interface~get_string string_t%get_string proc~get_character get_character proc~get_character->interface~get_string proc~get_character_with_character_key get_character_with_character_key proc~get_character_with_character_key->interface~get_string Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private elemental module function get_string(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key class( string_t ), intent(in) :: mold Return Value type( string_t )","tags":"","url":"interface/get_string.html"},{"title":"get_string_t_array_with_character_key – Julienne","text":"interface Called by interface~~get_string_t_array_with_character_key~~CalledByGraph interface~get_string_t_array_with_character_key string_t%get_string_t_array_with_character_key proc~get_string_t_array_with_string_t_key get_string_t_array_with_string_t_key proc~get_string_t_array_with_string_t_key->interface~get_string_t_array_with_character_key Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private pure module function get_string_t_array_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key type( string_t ), intent(in) :: mold (:) Return Value type( string_t ),allocatable,(:)","tags":"","url":"interface/get_string_t_array_with_character_key.html"},{"title":"get_string_t_array_with_string_t_key – Julienne","text":"interface private pure module function get_string_t_array_with_string_t_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self type( string_t ), intent(in) :: key type( string_t ), intent(in) :: mold (:) Return Value type( string_t ),allocatable,(:)","tags":"","url":"interface/get_string_t_array_with_string_t_key.html"},{"title":"is_allocated – Julienne","text":"interface private elemental module function is_allocated(self) result(string_allocated) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value logical","tags":"","url":"interface/is_allocated.html"},{"title":"string_t_cat_character – Julienne","text":"interface private pure module function string_t_cat_character(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( string_t )","tags":"","url":"interface/string_t_cat_character.html"},{"title":"string_t_cat_string_t – Julienne","text":"interface private pure module function string_t_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t )","tags":"","url":"interface/string_t_cat_string_t.html"},{"title":"string_t_eq_character – Julienne","text":"interface private elemental module function string_t_eq_character(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical","tags":"","url":"interface/string_t_eq_character.html"},{"title":"string_t_eq_string_t – Julienne","text":"interface private elemental module function string_t_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical","tags":"","url":"interface/string_t_eq_string_t.html"},{"title":"string_t_ne_character – Julienne","text":"interface private elemental module function string_t_ne_character(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical","tags":"","url":"interface/string_t_ne_character.html"},{"title":"string_t_ne_string_t – Julienne","text":"interface private elemental module function string_t_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical","tags":"","url":"interface/string_t_ne_string_t.html"},{"title":"file_t – Julienne","text":"public interface file_t Functions private module function from_file_with_character_name(file_name) result(file_object) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: file_name Return Value type( file_t ) private module function from_file_with_string_name(file_name) result(file_object) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: file_name Return Value type( file_t ) private module function from_lines(lines) result(file_object) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lines (:) Return Value type( file_t )","tags":"","url":"interface/file_t.html"},{"title":"lines – Julienne","text":"interface private pure module function lines(self) result(my_lines) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self Return Value type( string_t ),allocatable,(:)","tags":"","url":"interface/lines.html"},{"title":"write_to_character_file_name – Julienne","text":"interface Called by interface~~write_to_character_file_name~~CalledByGraph interface~write_to_character_file_name file_t%write_to_character_file_name proc~write_to_string_file_name write_to_string_file_name proc~write_to_string_file_name->interface~write_to_character_file_name Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private impure elemental module subroutine write_to_character_file_name(self, file_name) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self character(len=*), intent(in) :: file_name","tags":"","url":"interface/write_to_character_file_name.html"},{"title":"write_to_output_unit – Julienne","text":"interface private module subroutine write_to_output_unit(self) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self","tags":"","url":"interface/write_to_output_unit.html"},{"title":"write_to_string_file_name – Julienne","text":"interface private impure elemental module subroutine write_to_string_file_name(self, file_name) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self type( string_t ), intent(in) :: file_name","tags":"","url":"interface/write_to_string_file_name.html"},{"title":"co_all – Julienne","text":"interface Called by interface~~co_all~~CalledByGraph interface~co_all co_all proc~passed passed proc~passed->interface~co_all proc~report report proc~report->interface~co_all proc~skipped skipped proc~skipped->interface~co_all Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. public impure elemental module subroutine co_all(boolean) Implementation → Arguments Type Intent Optional Attributes Name logical, intent(inout) :: boolean Description If any image in a team calls this subroutine, then every image in the \nthe same team must call this subroutine.  This subroutine sets the\n\"boolean\" argument .true. if it is true in all participating images\nupon entry and .false. otherwise.","tags":"","url":"interface/co_all.html"},{"title":"test_description_t – Julienne","text":"public interface test_description_t Functions private module function construct_from_characters(description, diagnosis_function) result(test_description) Implementation → The result is a test_description_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description procedure( diagnosis_function_i ), intent(in), optional, pointer :: diagnosis_function Return Value type( test_description_t ) private module function construct_from_string(description, diagnosis_function) result(test_description) Implementation → The result is a test_description_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description procedure( diagnosis_function_i ), intent(in), optional, pointer :: diagnosis_function Return Value type( test_description_t )","tags":"","url":"interface/test_description_t.html"},{"title":"contains_characters – Julienne","text":"interface private elemental module function contains_characters(self, substring) result(match) Implementation → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical Description The result is .true. if the test description includes the value of substring","tags":"","url":"interface/contains_characters.html"},{"title":"contains_string_t – Julienne","text":"interface private elemental module function contains_string_t(self, substring) result(match) Implementation → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical Description The result is .true. if the test description includes the value of substring","tags":"","url":"interface/contains_string_t.html"},{"title":"equals – Julienne","text":"interface private elemental module function equals(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: lhs class( test_description_t ), intent(in) :: rhs Return Value logical Description The result is .true. if the components of the lhs & rhs are equal","tags":"","url":"interface/equals.html"},{"title":"run – Julienne","text":"interface private impure elemental module function run(self) result(test_result) Implementation → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self Return Value type( test_result_t ) Description The result encapsulates the test description and test outcome","tags":"","url":"interface/run.html"},{"title":"GitHub_CI – Julienne","text":"interface public module function GitHub_CI() Implementation → Arguments None Return Value logical Description The result is true if the environment variable named \"CI\" is set to the string \"true\"","tags":"","url":"interface/github_ci.html"},{"title":"separated_values – Julienne","text":"interface public pure module function separated_values(separator, mold) result(format_string) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: separator class(*), intent(in) :: mold (..) Return Value character(len=:),allocatable","tags":"","url":"interface/separated_values.html"},{"title":"bin_t – Julienne","text":"public interface bin_t Functions private elemental module function construct(num_items, num_bins, bin_number) result(bin) Implementation → the result is a bin associated with a range of item numbers Arguments Type Intent Optional Attributes Name integer, intent(in) :: num_items integer, intent(in) :: num_bins integer, intent(in) :: bin_number Return Value type( bin_t )","tags":"","url":"interface/bin_t.html"},{"title":"first – Julienne","text":"interface private elemental module function first(self) result(first_item_number) Implementation → Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer Description the result is the first item number associated with the given bin","tags":"","url":"interface/first.html"},{"title":"last – Julienne","text":"interface private elemental module function last(self) result(last_item_number) Implementation → Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer Description the result is the last item number associated with the given bin","tags":"","url":"interface/last.html"},{"title":"report – Julienne","text":"interface private module subroutine report(test, passes, tests, skips) Implementation → Arguments Type Intent Optional Attributes Name class( test_t ), intent(in) :: test integer, intent(inout) :: passes integer, intent(inout) :: tests integer, intent(inout) :: skips Description Print the test results and increment the tallies of passing tests, total tests, and skipped tests.","tags":"","url":"interface/report.html"},{"title":"run – Julienne","text":"interface public impure module function run(self) result(test_results) Implementation → Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self Return Value type( test_result_t ),allocatable,(:) Description The result encapsulates the test description and test outcome","tags":"","url":"interface/run~2.html"},{"title":"vector_test_description_t – Julienne","text":"public interface vector_test_description_t Functions private module function construct_from_strings(descriptions, vector_diagnosis_function) result(vector_test_description) Implementation → The result is a vector_test_description_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: descriptions (:) procedure( vector_diagnosis_function_i ), intent(in), optional, pointer :: vector_diagnosis_function Return Value type( vector_test_description_t )","tags":"","url":"interface/vector_test_description_t.html"},{"title":"contains_characters – Julienne","text":"interface Called by interface~~contains_characters~2~~CalledByGraph interface~contains_characters~2 vector_test_description_t%contains_characters proc~contains_string_t~2 contains_string_t proc~contains_string_t~2->interface~contains_characters~2 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private module function contains_characters(self, substring) result(match_vector) Implementation → Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical,allocatable,(:) Description The result is .true. if the test description includes the value of substring","tags":"","url":"interface/contains_characters~2.html"},{"title":"contains_string_t – Julienne","text":"interface private module function contains_string_t(self, substring) result(match_vector) Implementation → Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical,allocatable,(:) Description The result is .true. if the test description includes the value of substring%string()","tags":"","url":"interface/contains_string_t~2.html"},{"title":"construct_from_characters – Julienne","text":"module procedure construct_from_characters module function construct_from_characters(description, diagnosis_function) result(test_description) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description procedure( diagnosis_function_i ), intent(in), optional, pointer :: diagnosis_function Return Value type( test_description_t ) Calls proc~~construct_from_characters~~CallsGraph proc~construct_from_characters construct_from_characters call_assert call_assert proc~construct_from_characters->call_assert Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/construct_from_characters.html"},{"title":"construct_from_string – Julienne","text":"module procedure construct_from_string module function construct_from_string(description, diagnosis_function) result(test_description) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description procedure( diagnosis_function_i ), intent(in), optional, pointer :: diagnosis_function Return Value type( test_description_t ) Calls proc~~construct_from_string~~CallsGraph proc~construct_from_string construct_from_string call_assert call_assert proc~construct_from_string->call_assert Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/construct_from_string.html"},{"title":"contains_characters – Julienne","text":"module procedure contains_characters elemental module function contains_characters(self, substring) result(match) Interface → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical Calls proc~~contains_characters~~CallsGraph proc~contains_characters contains_characters call_assert call_assert proc~contains_characters->call_assert Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/contains_characters.html"},{"title":"contains_string_t – Julienne","text":"module procedure contains_string_t elemental module function contains_string_t(self, substring) result(match) Interface → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical Calls proc~~contains_string_t~~CallsGraph proc~contains_string_t contains_string_t call_assert call_assert proc~contains_string_t->call_assert none~string string_t%string proc~contains_string_t->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/contains_string_t.html"},{"title":"equals – Julienne","text":"module procedure equals elemental module function equals(lhs, rhs) result(lhs_eq_rhs) Interface → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: lhs class( test_description_t ), intent(in) :: rhs Return Value logical Calls proc~~equals~~CallsGraph proc~equals equals call_assert call_assert proc~equals->call_assert Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/equals.html"},{"title":"run – Julienne","text":"module procedure run impure elemental module function run(self) result(test_result) Interface → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self Return Value type( test_result_t ) Calls proc~~run~~CallsGraph proc~run run call_assert call_assert proc~run->call_assert Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/run.html"},{"title":"co_all – Julienne","text":"module procedure co_all impure elemental module subroutine co_all(boolean) Interface → Arguments Type Intent Optional Attributes Name logical, intent(inout) :: boolean","tags":"","url":"proc/co_all.html"},{"title":"argument_present – Julienne","text":"module procedure argument_present module function argument_present(acceptable_argument) result(found) Interface → list of acceptable arguments\nsample list: [character(len=len(longest_argument)):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"]\nwhere dashes support Linux/macOS and slashes support Windows Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: acceptable_argument (:) sample list: [character(len=len( )):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"]\nwhere dashes support Linux/macOS, slashes support Windows, and must be replaced\nby the longest list element (\"--benchmark\" above) Return Value logical Calls proc~~argument_present~~CallsGraph proc~argument_present argument_present [] [] proc~argument_present->[] Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/argument_present.html"},{"title":"flag_value – Julienne","text":"module procedure flag_value module function flag_value(flag) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: flag Return Value character(len=:), allocatable","tags":"","url":"proc/flag_value.html"},{"title":"construct – Julienne","text":"module procedure construct elemental module function construct(num_items, num_bins, bin_number) result(bin) Arguments Type Intent Optional Attributes Name integer, intent(in) :: num_items integer, intent(in) :: num_bins integer, intent(in) :: bin_number Return Value type( bin_t ) Calls proc~~construct~~CallsGraph proc~construct construct call_assert_diagnose call_assert_diagnose proc~construct->call_assert_diagnose intrinsic_array_t intrinsic_array_t proc~construct->intrinsic_array_t Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/construct.html"},{"title":"first – Julienne","text":"module procedure first elemental module function first(self) result(first_item_number) Interface → Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer","tags":"","url":"proc/first.html"},{"title":"last – Julienne","text":"module procedure last elemental module function last(self) result(last_item_number) Interface → Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer","tags":"","url":"proc/last.html"},{"title":"construct_from_strings – Julienne","text":"module function construct_from_strings(descriptions, vector_diagnosis_function) result(vector_test_description) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: descriptions (:) procedure( vector_diagnosis_function_i ), intent(in), optional, pointer :: vector_diagnosis_function Return Value type( vector_test_description_t )","tags":"","url":"proc/construct_from_strings~2.html"},{"title":"construct_from_strings – Julienne","text":"module procedure construct_from_strings module function construct_from_strings(descriptions, vector_diagnosis_function) result(vector_test_description) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: descriptions (:) procedure( vector_diagnosis_function_i ), intent(in), optional, pointer :: vector_diagnosis_function Return Value type( vector_test_description_t )","tags":"","url":"proc/construct_from_strings.html"},{"title":"contains_characters – Julienne","text":"module procedure contains_characters module function contains_characters(self, substring) result(match_vector) Interface → Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical, allocatable, (:) Calls proc~~contains_characters~2~~CallsGraph proc~contains_characters~2 contains_characters call_assert call_assert proc~contains_characters~2->call_assert none~string string_t%string proc~contains_characters~2->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/contains_characters~2.html"},{"title":"contains_string_t – Julienne","text":"module procedure contains_string_t module function contains_string_t(self, substring) result(match_vector) Interface → Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical, allocatable, (:) Calls proc~~contains_string_t~2~~CallsGraph proc~contains_string_t~2 contains_string_t interface~contains_characters~2 vector_test_description_t%contains_characters proc~contains_string_t~2->interface~contains_characters~2 none~string string_t%string proc~contains_string_t~2->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/contains_string_t~2.html"},{"title":"run – Julienne","text":"module procedure run impure module function run(self) result(test_results) Interface → Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self Return Value type( test_result_t ), allocatable, (:) Calls proc~~run~2~~CallsGraph proc~run~2 run call_assert_diagnose call_assert_diagnose proc~run~2->call_assert_diagnose intrinsic_array_t intrinsic_array_t proc~run~2->intrinsic_array_t Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/run~2.html"},{"title":"separated_values – Julienne","text":"module procedure separated_values pure module function separated_values(separator, mold) result(format_string) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: separator class(*), intent(in) :: mold (..) Return Value character(len=:), allocatable","tags":"","url":"proc/separated_values.html"},{"title":"array_of_strings – Julienne","text":"module procedure array_of_strings pure module function array_of_strings(delimited_strings, delimiter) result(strings_array) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: delimited_strings character(len=*), intent(in) :: delimiter Return Value type( string_t ), allocatable, (:)","tags":"","url":"proc/array_of_strings.html"},{"title":"as_character – Julienne","text":"module procedure as_character pure module function as_character(self) result(raw_string) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value character(len=:), allocatable","tags":"","url":"proc/as_character.html"},{"title":"assign_character_to_string_t – Julienne","text":"module procedure assign_character_to_string_t elemental module subroutine assign_character_to_string_t(lhs, rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(inout) :: lhs character(len=*), intent(in) :: rhs","tags":"","url":"proc/assign_character_to_string_t.html"},{"title":"assign_string_t_to_character – Julienne","text":"module procedure assign_string_t_to_character pure module subroutine assign_string_t_to_character(lhs, rhs) Interface → Arguments Type Intent Optional Attributes Name character(len=:), intent(out), allocatable :: lhs class( string_t ), intent(in) :: rhs Calls proc~~assign_string_t_to_character~~CallsGraph proc~assign_string_t_to_character assign_string_t_to_character none~string string_t%string proc~assign_string_t_to_character->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/assign_string_t_to_character.html"},{"title":"base_name – Julienne","text":"module procedure base_name pure module function base_name(self) result(base) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) Calls proc~~base_name~~CallsGraph proc~base_name base_name none~string string_t%string proc~base_name->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/base_name.html"},{"title":"bracket – Julienne","text":"module procedure bracket elemental module function bracket(self, opening, closing) result(bracketed_self) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in), optional :: opening character(len=*), intent(in), optional :: closing Return Value type( string_t )","tags":"","url":"proc/bracket.html"},{"title":"character_cat_string_t – Julienne","text":"module procedure character_cat_string_t pure module function character_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t )","tags":"","url":"proc/character_cat_string_t.html"},{"title":"character_eq_string_t – Julienne","text":"module procedure character_eq_string_t elemental module function character_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical Calls proc~~character_eq_string_t~~CallsGraph proc~character_eq_string_t character_eq_string_t none~string string_t%string proc~character_eq_string_t->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/character_eq_string_t.html"},{"title":"character_ne_string_t – Julienne","text":"module procedure character_ne_string_t elemental module function character_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical Calls proc~~character_ne_string_t~~CallsGraph proc~character_ne_string_t character_ne_string_t none~string string_t%string proc~character_ne_string_t->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/character_ne_string_t.html"},{"title":"characters_with_character_separator – Julienne","text":"module procedure characters_with_character_separator pure module function characters_with_character_separator(strings, separator) result(sv) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: strings (:) character(len=*), intent(in) :: separator Return Value type( string_t )","tags":"","url":"proc/characters_with_character_separator.html"},{"title":"characters_with_comma_separator – Julienne","text":"module procedure characters_with_comma_separator pure module function characters_with_comma_separator(strings) result(csv) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: strings (:) Return Value type( string_t )","tags":"","url":"proc/characters_with_comma_separator.html"},{"title":"characters_with_string_separator – Julienne","text":"module procedure characters_with_string_separator pure module function characters_with_string_separator(strings, separator) result(sv) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: strings (:) type( string_t ), intent(in) :: separator Return Value type( string_t )","tags":"","url":"proc/characters_with_string_separator.html"},{"title":"concatenate_elements – Julienne","text":"module procedure concatenate_elements pure module function concatenate_elements(strings) result(concatenated_strings) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) Return Value type( string_t ) Calls proc~~concatenate_elements~~CallsGraph proc~concatenate_elements concatenate_elements none~string string_t%string proc~concatenate_elements->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/concatenate_elements.html"},{"title":"file_extension – Julienne","text":"module procedure file_extension elemental module function file_extension(self) result(extension) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) Calls proc~~file_extension~~CallsGraph proc~file_extension file_extension none~string string_t%string proc~file_extension->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/file_extension.html"},{"title":"from_characters – Julienne","text":"module procedure from_characters elemental module function from_characters(string) result(new_string) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string Return Value type( string_t )","tags":"","url":"proc/from_characters.html"},{"title":"from_default_complex – Julienne","text":"module procedure from_default_complex elemental module function from_default_complex(z) result(string) Arguments Type Intent Optional Attributes Name complex, intent(in) :: z Return Value type( string_t )","tags":"","url":"proc/from_default_complex.html"},{"title":"from_default_integer – Julienne","text":"module procedure from_default_integer elemental module function from_default_integer(i) result(string) Arguments Type Intent Optional Attributes Name integer, intent(in) :: i Return Value type( string_t )","tags":"","url":"proc/from_default_integer.html"},{"title":"from_default_logical – Julienne","text":"module procedure from_default_logical elemental module function from_default_logical(b) result(string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: b Return Value type( string_t )","tags":"","url":"proc/from_default_logical.html"},{"title":"from_default_real – Julienne","text":"module procedure from_default_real elemental module function from_default_real(x) result(string) Arguments Type Intent Optional Attributes Name real, intent(in) :: x Return Value type( string_t )","tags":"","url":"proc/from_default_real.html"},{"title":"from_double_precision – Julienne","text":"module procedure from_double_precision elemental module function from_double_precision(x) result(string) Arguments Type Intent Optional Attributes Name double precision, intent(in) :: x Return Value type( string_t )","tags":"","url":"proc/from_double_precision.html"},{"title":"from_double_precision_complex – Julienne","text":"module procedure from_double_precision_complex elemental module function from_double_precision_complex(z) result(string) Arguments Type Intent Optional Attributes Name complex(kind=kind(1D0)), intent(in) :: z Return Value type( string_t )","tags":"","url":"proc/from_double_precision_complex.html"},{"title":"from_logical_c_bool – Julienne","text":"module procedure from_logical_c_bool elemental module function from_logical_c_bool(b) result(string) Arguments Type Intent Optional Attributes Name logical(kind=c_bool), intent(in) :: b Return Value type( string_t )","tags":"","url":"proc/from_logical_c_bool.html"},{"title":"get_character – Julienne","text":"module procedure get_character pure module function get_character(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key character(len=*), intent(in) :: mold Return Value character(len=:), allocatable Calls proc~~get_character~~CallsGraph proc~get_character get_character interface~get_string string_t%get_string proc~get_character->interface~get_string string string proc~get_character->string Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_character.html"},{"title":"get_character_with_character_key – Julienne","text":"module procedure get_character_with_character_key pure module function get_character_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key character(len=*), intent(in) :: mold Return Value character(len=:), allocatable Calls proc~~get_character_with_character_key~~CallsGraph proc~get_character_with_character_key get_character_with_character_key interface~get_string string_t%get_string proc~get_character_with_character_key->interface~get_string string string proc~get_character_with_character_key->string Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_character_with_character_key.html"},{"title":"get_double_precision – Julienne","text":"module procedure get_double_precision pure module function get_double_precision(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key double precision, intent(in) :: mold Return Value double precision Calls proc~~get_double_precision~~CallsGraph proc~get_double_precision get_double_precision call_assert_diagnose call_assert_diagnose proc~get_double_precision->call_assert_diagnose interface~get_json_key string_t%get_json_key proc~get_double_precision->interface~get_json_key none~string string_t%string proc~get_double_precision->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_double_precision.html"},{"title":"get_double_precision_array – Julienne","text":"module procedure get_double_precision_array pure module function get_double_precision_array(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key double precision, intent(in) :: mold (:) Return Value double precision, allocatable, (:) Calls proc~~get_double_precision_array~~CallsGraph proc~get_double_precision_array get_double_precision_array call_assert_diagnose call_assert_diagnose proc~get_double_precision_array->call_assert_diagnose interface~get_json_key string_t%get_json_key proc~get_double_precision_array->interface~get_json_key none~string string_t%string proc~get_double_precision_array->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_double_precision_array.html"},{"title":"get_double_precision_array_with_character_key – Julienne","text":"module procedure get_double_precision_array_with_character_key pure module function get_double_precision_array_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key double precision, intent(in) :: mold (:) Return Value double precision, allocatable, (:) Calls proc~~get_double_precision_array_with_character_key~~CallsGraph proc~get_double_precision_array_with_character_key get_double_precision_array_with_character_key interface~get_double_precision_array string_t%get_double_precision_array proc~get_double_precision_array_with_character_key->interface~get_double_precision_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_double_precision_array_with_character_key.html"},{"title":"get_double_precision_with_character_key – Julienne","text":"module procedure get_double_precision_with_character_key pure module function get_double_precision_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key double precision, intent(in) :: mold Return Value double precision Calls proc~~get_double_precision_with_character_key~~CallsGraph proc~get_double_precision_with_character_key get_double_precision_with_character_key interface~get_double_precision string_t%get_double_precision proc~get_double_precision_with_character_key->interface~get_double_precision Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_double_precision_with_character_key.html"},{"title":"get_integer – Julienne","text":"module procedure get_integer pure module function get_integer(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold Return Value integer Calls proc~~get_integer~~CallsGraph proc~get_integer get_integer call_assert_diagnose call_assert_diagnose proc~get_integer->call_assert_diagnose interface~get_json_key string_t%get_json_key proc~get_integer->interface~get_json_key none~string string_t%string proc~get_integer->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_integer.html"},{"title":"get_integer_array – Julienne","text":"module procedure get_integer_array pure module function get_integer_array(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold (:) Return Value integer, allocatable, (:) Calls proc~~get_integer_array~~CallsGraph proc~get_integer_array get_integer_array interface~get_real_array string_t%get_real_array proc~get_integer_array->interface~get_real_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_integer_array.html"},{"title":"get_integer_array_with_character_key – Julienne","text":"module procedure get_integer_array_with_character_key pure module function get_integer_array_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key integer, intent(in) :: mold (:) Return Value integer, allocatable, (:) Calls proc~~get_integer_array_with_character_key~~CallsGraph proc~get_integer_array_with_character_key get_integer_array_with_character_key interface~get_integer_array string_t%get_integer_array proc~get_integer_array_with_character_key->interface~get_integer_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_integer_array_with_character_key.html"},{"title":"get_integer_with_character_key – Julienne","text":"module procedure get_integer_with_character_key pure module function get_integer_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key integer, intent(in) :: mold Return Value integer Calls proc~~get_integer_with_character_key~~CallsGraph proc~get_integer_with_character_key get_integer_with_character_key interface~get_integer string_t%get_integer proc~get_integer_with_character_key->interface~get_integer Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_integer_with_character_key.html"},{"title":"get_json_key – Julienne","text":"module procedure get_json_key elemental module function get_json_key(self) result(unquoted_key) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) Calls proc~~get_json_key~~CallsGraph proc~get_json_key get_json_key none~string string_t%string proc~get_json_key->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_json_key.html"},{"title":"get_logical – Julienne","text":"module procedure get_logical elemental module function get_logical(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key logical, intent(in) :: mold Return Value logical Calls proc~~get_logical~~CallsGraph proc~get_logical get_logical call_assert_diagnose call_assert_diagnose proc~get_logical->call_assert_diagnose interface~get_json_key string_t%get_json_key proc~get_logical->interface~get_json_key none~string string_t%string proc~get_logical->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_logical.html"},{"title":"get_logical_with_character_key – Julienne","text":"module procedure get_logical_with_character_key pure module function get_logical_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key logical, intent(in) :: mold Return Value logical Calls proc~~get_logical_with_character_key~~CallsGraph proc~get_logical_with_character_key get_logical_with_character_key interface~get_logical string_t%get_logical proc~get_logical_with_character_key->interface~get_logical Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_logical_with_character_key.html"},{"title":"get_real – Julienne","text":"module procedure get_real pure module function get_real(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold Return Value real Calls proc~~get_real~~CallsGraph proc~get_real get_real call_assert_diagnose call_assert_diagnose proc~get_real->call_assert_diagnose interface~get_json_key string_t%get_json_key proc~get_real->interface~get_json_key none~string string_t%string proc~get_real->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_real.html"},{"title":"get_real_array – Julienne","text":"module procedure get_real_array pure module function get_real_array(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold (:) Return Value real, allocatable, (:) Calls proc~~get_real_array~~CallsGraph proc~get_real_array get_real_array call_assert_diagnose call_assert_diagnose proc~get_real_array->call_assert_diagnose interface~get_json_key string_t%get_json_key proc~get_real_array->interface~get_json_key none~string string_t%string proc~get_real_array->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_real_array.html"},{"title":"get_real_array_with_character_key – Julienne","text":"module procedure get_real_array_with_character_key pure module function get_real_array_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key real, intent(in) :: mold (:) Return Value real, allocatable, (:) Calls proc~~get_real_array_with_character_key~~CallsGraph proc~get_real_array_with_character_key get_real_array_with_character_key interface~get_real_array string_t%get_real_array proc~get_real_array_with_character_key->interface~get_real_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_real_array_with_character_key.html"},{"title":"get_real_with_character_key – Julienne","text":"module procedure get_real_with_character_key pure module function get_real_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key real, intent(in) :: mold Return Value real Calls proc~~get_real_with_character_key~~CallsGraph proc~get_real_with_character_key get_real_with_character_key interface~get_real string_t%get_real proc~get_real_with_character_key->interface~get_real Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_real_with_character_key.html"},{"title":"get_string – Julienne","text":"module procedure get_string elemental module function get_string(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key class( string_t ), intent(in) :: mold Return Value type( string_t ) Calls proc~~get_string~~CallsGraph proc~get_string get_string call_assert_diagnose call_assert_diagnose proc~get_string->call_assert_diagnose interface~get_json_key string_t%get_json_key proc~get_string->interface~get_json_key none~string string_t%string proc~get_string->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_string.html"},{"title":"get_string_t_array_with_character_key – Julienne","text":"module procedure get_string_t_array_with_character_key pure module function get_string_t_array_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key type( string_t ), intent(in) :: mold (:) Return Value type( string_t ), allocatable, (:) Calls proc~~get_string_t_array_with_character_key~~CallsGraph proc~get_string_t_array_with_character_key get_string_t_array_with_character_key call_assert_diagnose call_assert_diagnose proc~get_string_t_array_with_character_key->call_assert_diagnose interface~get_json_key string_t%get_json_key proc~get_string_t_array_with_character_key->interface~get_json_key none~string string_t%string proc~get_string_t_array_with_character_key->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_string_t_array_with_character_key.html"},{"title":"get_string_t_array_with_string_t_key – Julienne","text":"module procedure get_string_t_array_with_string_t_key pure module function get_string_t_array_with_string_t_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self type( string_t ), intent(in) :: key type( string_t ), intent(in) :: mold (:) Return Value type( string_t ), allocatable, (:) Calls proc~~get_string_t_array_with_string_t_key~~CallsGraph proc~get_string_t_array_with_string_t_key get_string_t_array_with_string_t_key interface~get_string_t_array_with_character_key string_t%get_string_t_array_with_character_key proc~get_string_t_array_with_string_t_key->interface~get_string_t_array_with_character_key none~string string_t%string proc~get_string_t_array_with_string_t_key->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/get_string_t_array_with_string_t_key.html"},{"title":"is_allocated – Julienne","text":"module procedure is_allocated elemental module function is_allocated(self) result(string_allocated) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value logical","tags":"","url":"proc/is_allocated.html"},{"title":"string_t_cat_character – Julienne","text":"module procedure string_t_cat_character pure module function string_t_cat_character(lhs, rhs) result(lhs_cat_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( string_t )","tags":"","url":"proc/string_t_cat_character.html"},{"title":"string_t_cat_string_t – Julienne","text":"module procedure string_t_cat_string_t pure module function string_t_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t )","tags":"","url":"proc/string_t_cat_string_t.html"},{"title":"string_t_eq_character – Julienne","text":"module procedure string_t_eq_character elemental module function string_t_eq_character(lhs, rhs) result(lhs_eq_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical Calls proc~~string_t_eq_character~~CallsGraph proc~string_t_eq_character string_t_eq_character none~string string_t%string proc~string_t_eq_character->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/string_t_eq_character.html"},{"title":"string_t_eq_string_t – Julienne","text":"module procedure string_t_eq_string_t elemental module function string_t_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical Calls proc~~string_t_eq_string_t~~CallsGraph proc~string_t_eq_string_t string_t_eq_string_t none~string string_t%string proc~string_t_eq_string_t->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/string_t_eq_string_t.html"},{"title":"string_t_ne_character – Julienne","text":"module procedure string_t_ne_character elemental module function string_t_ne_character(lhs, rhs) result(lhs_ne_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical Calls proc~~string_t_ne_character~~CallsGraph proc~string_t_ne_character string_t_ne_character none~string string_t%string proc~string_t_ne_character->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/string_t_ne_character.html"},{"title":"string_t_ne_string_t – Julienne","text":"module procedure string_t_ne_string_t elemental module function string_t_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical Calls proc~~string_t_ne_string_t~~CallsGraph proc~string_t_ne_string_t string_t_ne_string_t none~string string_t%string proc~string_t_ne_string_t->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/string_t_ne_string_t.html"},{"title":"strings_with_character_separator – Julienne","text":"module procedure strings_with_character_separator pure module function strings_with_character_separator(strings, separator) result(sv) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) character(len=*), intent(in) :: separator Return Value type( string_t )","tags":"","url":"proc/strings_with_character_separator.html"},{"title":"strings_with_comma_separator – Julienne","text":"module procedure strings_with_comma_separator pure module function strings_with_comma_separator(strings) result(csv) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) Return Value type( string_t )","tags":"","url":"proc/strings_with_comma_separator.html"},{"title":"strings_with_string_t_separator – Julienne","text":"module procedure strings_with_string_t_separator pure module function strings_with_string_t_separator(strings, separator) result(sv) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) type( string_t ), intent(in) :: separator Return Value type( string_t )","tags":"","url":"proc/strings_with_string_t_separator.html"},{"title":"from_file_with_character_name – Julienne","text":"module procedure from_file_with_character_name module function from_file_with_character_name(file_name) result(file_object) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: file_name Return Value type( file_t )","tags":"","url":"proc/from_file_with_character_name.html"},{"title":"from_file_with_string_name – Julienne","text":"module procedure from_file_with_string_name module function from_file_with_string_name(file_name) result(file_object) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: file_name Return Value type( file_t ) Calls proc~~from_file_with_string_name~~CallsGraph proc~from_file_with_string_name from_file_with_string_name call_assert_diagnose call_assert_diagnose proc~from_file_with_string_name->call_assert_diagnose none~string string_t%string proc~from_file_with_string_name->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/from_file_with_string_name.html"},{"title":"from_lines – Julienne","text":"module procedure from_lines module function from_lines(lines) result(file_object) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lines (:) Return Value type( file_t )","tags":"","url":"proc/from_lines.html"},{"title":"lines – Julienne","text":"module procedure lines pure module function lines(self) result(my_lines) Interface → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self Return Value type( string_t ), allocatable, (:)","tags":"","url":"proc/lines.html"},{"title":"write_to_character_file_name – Julienne","text":"module procedure write_to_character_file_name impure elemental module subroutine write_to_character_file_name(self, file_name) Interface → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self character(len=*), intent(in) :: file_name Calls proc~~write_to_character_file_name~~CallsGraph proc~write_to_character_file_name write_to_character_file_name call_assert call_assert proc~write_to_character_file_name->call_assert none~string string_t%string proc~write_to_character_file_name->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/write_to_character_file_name.html"},{"title":"write_to_output_unit – Julienne","text":"module procedure write_to_output_unit module subroutine write_to_output_unit(self) Interface → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self Calls proc~~write_to_output_unit~~CallsGraph proc~write_to_output_unit write_to_output_unit call_assert call_assert proc~write_to_output_unit->call_assert none~string string_t%string proc~write_to_output_unit->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/write_to_output_unit.html"},{"title":"write_to_string_file_name – Julienne","text":"module procedure write_to_string_file_name impure elemental module subroutine write_to_string_file_name(self, file_name) Interface → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self type( string_t ), intent(in) :: file_name Calls proc~~write_to_string_file_name~~CallsGraph proc~write_to_string_file_name write_to_string_file_name interface~write_to_character_file_name file_t%write_to_character_file_name proc~write_to_string_file_name->interface~write_to_character_file_name none~string string_t%string proc~write_to_string_file_name->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/write_to_string_file_name.html"},{"title":"characterize – Julienne","text":"module procedure characterize pure module function characterize(self) result(characterization) Interface → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value character(len=:), allocatable Calls proc~~characterize~~CallsGraph proc~characterize characterize interface~diagnostics_string test_diagnosis_t%diagnostics_string proc~characterize->interface~diagnostics_string interface~test_passed test_diagnosis_t%test_passed proc~characterize->interface~test_passed none~string string_t%string proc~characterize->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/characterize.html"},{"title":"construct_from_character – Julienne","text":"module procedure construct_from_character elemental module function construct_from_character(description, diagnosis) result(test_result) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description type( test_diagnosis_t ), intent(in), optional :: diagnosis Return Value type( test_result_t )","tags":"","url":"proc/construct_from_character.html"},{"title":"construct_from_string – Julienne","text":"module procedure construct_from_string elemental module function construct_from_string(description, diagnosis) result(test_result) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description type( test_diagnosis_t ), intent(in), optional :: diagnosis Return Value type( test_result_t )","tags":"","url":"proc/construct_from_string~2.html"},{"title":"description_contains_characters – Julienne","text":"module procedure description_contains_characters elemental module function description_contains_characters(self, substring) result(substring_found) Interface → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical Calls proc~~description_contains_characters~~CallsGraph proc~description_contains_characters description_contains_characters none~string string_t%string proc~description_contains_characters->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/description_contains_characters.html"},{"title":"description_contains_string – Julienne","text":"module procedure description_contains_string elemental module function description_contains_string(self, substring) result(substring_found) Interface → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical Calls proc~~description_contains_string~~CallsGraph proc~description_contains_string description_contains_string interface~description_contains_characters test_result_t%description_contains_characters proc~description_contains_string->interface~description_contains_characters none~string string_t%string proc~description_contains_string->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/description_contains_string.html"},{"title":"passed – Julienne","text":"module procedure passed impure elemental module function passed(self) result(test_passed) Interface → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value logical Calls proc~~passed~~CallsGraph proc~passed passed interface~co_all co_all proc~passed->interface~co_all interface~test_passed test_diagnosis_t%test_passed proc~passed->interface~test_passed Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/passed.html"},{"title":"skipped – Julienne","text":"module procedure skipped impure elemental module function skipped(self) result(test_skipped) Interface → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value logical Calls proc~~skipped~~CallsGraph proc~skipped skipped interface~co_all co_all proc~skipped->interface~co_all Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/skipped.html"},{"title":"GitHub_CI – Julienne","text":"module procedure GitHub_CI module function GitHub_CI() Interface → Arguments None Return Value logical","tags":"","url":"proc/github_ci.html"},{"title":"aggregate_diagnosis – Julienne","text":"module procedure aggregate_diagnosis pure module function aggregate_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (..) Return Value type( test_diagnosis_t ) Calls proc~~aggregate_diagnosis~~CallsGraph proc~aggregate_diagnosis aggregate_diagnosis none~string string_t%string proc~aggregate_diagnosis->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/aggregate_diagnosis.html"},{"title":"and – Julienne","text":"module procedure and elemental module function and(lhs, rhs) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: lhs type( test_diagnosis_t ), intent(in) :: rhs Return Value type( test_diagnosis_t )","tags":"","url":"proc/and.html"},{"title":"approximates_double_precision – Julienne","text":"module procedure approximates_double_precision elemental module function approximates_double_precision(actual, expected) result(operands) Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected Return Value type( operands_t (double_precision))","tags":"","url":"proc/approximates_double_precision.html"},{"title":"approximates_real – Julienne","text":"module procedure approximates_real elemental module function approximates_real(actual, expected) result(operands) Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected Return Value type( operands_t )","tags":"","url":"proc/approximates_real.html"},{"title":"construct_from_character – Julienne","text":"module procedure construct_from_character elemental module function construct_from_character(test_passed, diagnostics_string) result(test_diagnosis) Arguments Type Intent Optional Attributes Name logical, intent(in) :: test_passed character(len=*), intent(in) :: diagnostics_string Return Value type( test_diagnosis_t )","tags":"","url":"proc/construct_from_character~2.html"},{"title":"construct_from_string_t – Julienne","text":"module procedure construct_from_string_t elemental module function construct_from_string_t(test_passed, diagnostics_string) result(test_diagnosis) Arguments Type Intent Optional Attributes Name logical, intent(in) :: test_passed type( string_t ), intent(in) :: diagnostics_string Return Value type( test_diagnosis_t )","tags":"","url":"proc/construct_from_string_t.html"},{"title":"diagnostics_string – Julienne","text":"module procedure diagnostics_string elemental module function diagnostics_string(self) result(string_) Interface → Arguments Type Intent Optional Attributes Name class( test_diagnosis_t ), intent(in) :: self Return Value type( string_t ) Calls proc~~diagnostics_string~~CallsGraph proc~diagnostics_string diagnostics_string call_assert call_assert proc~diagnostics_string->call_assert Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/diagnostics_string.html"},{"title":"equals_expected_integer – Julienne","text":"module procedure equals_expected_integer elemental module function equals_expected_integer(actual, expected) result(test_diagnosis) Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected Return Value type( test_diagnosis_t )","tags":"","url":"proc/equals_expected_integer.html"},{"title":"greater_than_double – Julienne","text":"module procedure greater_than_double elemental module function greater_than_double(actual, expected_floor) result(test_diagnosis) Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected_floor Return Value type( test_diagnosis_t )","tags":"","url":"proc/greater_than_double.html"},{"title":"greater_than_integer – Julienne","text":"module procedure greater_than_integer elemental module function greater_than_integer(actual, expected_floor) result(test_diagnosis) Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_floor Return Value type( test_diagnosis_t )","tags":"","url":"proc/greater_than_integer.html"},{"title":"greater_than_or_equal_to_integer – Julienne","text":"module procedure greater_than_or_equal_to_integer elemental module function greater_than_or_equal_to_integer(actual, expected_min) result(test_diagnosis) Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_min Return Value type( test_diagnosis_t )","tags":"","url":"proc/greater_than_or_equal_to_integer.html"},{"title":"greater_than_real – Julienne","text":"module procedure greater_than_real elemental module function greater_than_real(actual, expected_floor) result(test_diagnosis) Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected_floor Return Value type( test_diagnosis_t )","tags":"","url":"proc/greater_than_real.html"},{"title":"less_than_double – Julienne","text":"module procedure less_than_double elemental module function less_than_double(actual, expected_ceiling) result(test_diagnosis) Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected_ceiling Return Value type( test_diagnosis_t )","tags":"","url":"proc/less_than_double.html"},{"title":"less_than_integer – Julienne","text":"module procedure less_than_integer elemental module function less_than_integer(actual, expected_ceiling) result(test_diagnosis) Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_ceiling Return Value type( test_diagnosis_t )","tags":"","url":"proc/less_than_integer.html"},{"title":"less_than_or_equal_to_integer – Julienne","text":"module procedure less_than_or_equal_to_integer elemental module function less_than_or_equal_to_integer(actual, expected_max) result(test_diagnosis) Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_max Return Value type( test_diagnosis_t )","tags":"","url":"proc/less_than_or_equal_to_integer.html"},{"title":"less_than_real – Julienne","text":"module procedure less_than_real elemental module function less_than_real(actual, expected_ceiling) result(test_diagnosis) Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected_ceiling Return Value type( test_diagnosis_t )","tags":"","url":"proc/less_than_real.html"},{"title":"test_passed – Julienne","text":"module procedure test_passed elemental module function test_passed(self) result(passed) Interface → Arguments Type Intent Optional Attributes Name class( test_diagnosis_t ), intent(in) :: self Return Value logical","tags":"","url":"proc/test_passed.html"},{"title":"within_double_precision – Julienne","text":"module procedure within_double_precision elemental module function within_double_precision(operands, tolerance) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( operands_t (double_precision)), intent(in) :: operands double precision, intent(in) :: tolerance Return Value type( test_diagnosis_t )","tags":"","url":"proc/within_double_precision.html"},{"title":"within_double_precision_fraction – Julienne","text":"module procedure within_double_precision_fraction elemental module function within_double_precision_fraction(operands, fractional_tolerance) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( operands_t (double_precision)), intent(in) :: operands double precision, intent(in) :: fractional_tolerance Return Value type( test_diagnosis_t )","tags":"","url":"proc/within_double_precision_fraction.html"},{"title":"within_double_precision_percentage – Julienne","text":"module procedure within_double_precision_percentage elemental module function within_double_precision_percentage(operands, percentage_tolerance) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( operands_t (double_precision)), intent(in) :: operands double precision, intent(in) :: percentage_tolerance Return Value type( test_diagnosis_t )","tags":"","url":"proc/within_double_precision_percentage.html"},{"title":"within_real – Julienne","text":"module procedure within_real elemental module function within_real(operands, tolerance) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( operands_t ), intent(in) :: operands real, intent(in) :: tolerance Return Value type( test_diagnosis_t )","tags":"","url":"proc/within_real.html"},{"title":"within_real_fraction – Julienne","text":"module procedure within_real_fraction elemental module function within_real_fraction(operands, fractional_tolerance) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( operands_t ), intent(in) :: operands real, intent(in) :: fractional_tolerance Return Value type( test_diagnosis_t )","tags":"","url":"proc/within_real_fraction.html"},{"title":"within_real_percentage – Julienne","text":"module procedure within_real_percentage elemental module function within_real_percentage(operands, percentage_tolerance) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( operands_t ), intent(in) :: operands real, intent(in) :: percentage_tolerance Return Value type( test_diagnosis_t )","tags":"","url":"proc/within_real_percentage.html"},{"title":"report – Julienne","text":"module procedure report module subroutine report(test, passes, tests, skips) Interface → Arguments Type Intent Optional Attributes Name class( test_t ), intent(in) :: test integer, intent(inout) :: passes integer, intent(inout) :: tests integer, intent(inout) :: skips Calls proc~~report~~CallsGraph proc~report report characterize characterize proc~report->characterize flag_value flag_value proc~report->flag_value interface~co_all co_all proc~report->interface~co_all passed passed proc~report->passed passing_tests passing_tests proc~report->passing_tests results results proc~report->results skipped skipped proc~report->skipped skipped_tests skipped_tests proc~report->skipped_tests subject subject proc~report->subject test_results test_results proc~report->test_results Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"proc/report.html"},{"title":"julienne_test_diagnosis_m – Julienne","text":"Define an abstraction for describing test outcomes and diagnostic information Uses julienne_string_m module~~julienne_test_diagnosis_m~~UsesGraph module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_string_m julienne_string_m module~julienne_test_diagnosis_m->module~julienne_string_m assert_m assert_m module~julienne_string_m->assert_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by Descendants: julienne_test_diagnosis_s module~~julienne_test_diagnosis_m~~UsedByGraph module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_m julienne_m module~julienne_m->module~julienne_test_diagnosis_m module~julienne_test_description_m julienne_test_description_m module~julienne_m->module~julienne_test_description_m module~julienne_test_result_m julienne_test_result_m module~julienne_m->module~julienne_test_result_m module~julienne_vector_test_description_m julienne_vector_test_description_m module~julienne_m->module~julienne_vector_test_description_m module~julienne_test_m julienne_test_m module~julienne_m->module~julienne_test_m module~julienne_test_description_m->module~julienne_test_diagnosis_m module~julienne_test_description_m->module~julienne_test_result_m module~julienne_test_diagnosis_s julienne_test_diagnosis_s module~julienne_test_diagnosis_s->module~julienne_test_diagnosis_m module~julienne_test_result_m->module~julienne_test_diagnosis_m module~julienne_vector_test_description_m->module~julienne_test_diagnosis_m module~julienne_vector_test_description_m->module~julienne_test_result_m module~julienne_test_description_s julienne_test_description_s module~julienne_test_description_s->module~julienne_test_description_m module~julienne_test_m->module~julienne_test_result_m module~julienne_test_result_s julienne_test_result_s module~julienne_test_result_s->module~julienne_test_result_m module~julienne_vector_test_description_s julienne_vector_test_description_s module~julienne_vector_test_description_s->module~julienne_vector_test_description_m program~check_for_command_line_argument check_for_command_line_argument program~check_for_command_line_argument->module~julienne_m program~get_command_line_flag_value get_command_line_flag_value program~get_command_line_flag_value->module~julienne_m module~julienne_test_s julienne_test_s module~julienne_test_s->module~julienne_test_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer, private, parameter :: default_real = kind(1.) integer, private, parameter :: double_precision = kind(1D0) Interfaces public        interface operator(.all.) private pure module function aggregate_diagnosis(diagnoses) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (..) Return Value type( test_diagnosis_t ) public        interface operator(.and.) private elemental module function and(lhs, rhs) result(diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: lhs type( test_diagnosis_t ), intent(in) :: rhs Return Value type( test_diagnosis_t ) public        interface operator(.approximates.) private elemental module function approximates_double_precision(actual, expected) result(operands) Implementation → Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected Return Value type( operands_t (double_precision)) private elemental module function approximates_real(actual, expected) result(operands) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected Return Value type( operands_t ) public        interface operator(.equalsExpected.) private elemental module function equals_expected_integer(actual, expected) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected Return Value type( test_diagnosis_t ) public        interface operator(.greaterThan.) private elemental module function greater_than_double(actual, expected_floor) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected_floor Return Value type( test_diagnosis_t ) private elemental module function greater_than_integer(actual, expected_floor) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_floor Return Value type( test_diagnosis_t ) private elemental module function greater_than_real(actual, expected_floor) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected_floor Return Value type( test_diagnosis_t ) public        interface operator(.greaterThanOrEqualTo.) private elemental module function greater_than_or_equal_to_integer(actual, expected_min) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_min Return Value type( test_diagnosis_t ) public        interface operator(.lessThan.) private elemental module function less_than_double(actual, expected_ceiling) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected_ceiling Return Value type( test_diagnosis_t ) private elemental module function less_than_integer(actual, expected_ceiling) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_ceiling Return Value type( test_diagnosis_t ) private elemental module function less_than_real(actual, expected_ceiling) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected_ceiling Return Value type( test_diagnosis_t ) public        interface operator(.lessThanOrEqualTo.) private elemental module function less_than_or_equal_to_integer(actual, expected_max) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_max Return Value type( test_diagnosis_t ) public        interface operator(.within.) private elemental module function within_double_precision(operands, tolerance) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( operands_t (double_precision)), intent(in) :: operands double precision, intent(in) :: tolerance Return Value type( test_diagnosis_t ) private elemental module function within_real(operands, tolerance) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( operands_t ), intent(in) :: operands real, intent(in) :: tolerance Return Value type( test_diagnosis_t ) public        interface operator(.withinFraction.) private elemental module function within_double_precision_fraction(operands, fractional_tolerance) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( operands_t (double_precision)), intent(in) :: operands double precision, intent(in) :: fractional_tolerance Return Value type( test_diagnosis_t ) private elemental module function within_real_fraction(operands, fractional_tolerance) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( operands_t ), intent(in) :: operands real, intent(in) :: fractional_tolerance Return Value type( test_diagnosis_t ) public        interface operator(.withinPercentage.) private elemental module function within_double_precision_percentage(operands, percentage_tolerance) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( operands_t (double_precision)), intent(in) :: operands double precision, intent(in) :: percentage_tolerance Return Value type( test_diagnosis_t ) private elemental module function within_real_percentage(operands, percentage_tolerance) result(test_diagnosis) Implementation → Arguments Type Intent Optional Attributes Name type( operands_t ), intent(in) :: operands real, intent(in) :: percentage_tolerance Return Value type( test_diagnosis_t ) public        interface test_diagnosis_t private elemental module function construct_from_character(test_passed, diagnostics_string) result(test_diagnosis) Implementation → The result is a test_diagnosis_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name logical, intent(in) :: test_passed character(len=*), intent(in) :: diagnostics_string Return Value type( test_diagnosis_t ) private elemental module function construct_from_string_t(test_passed, diagnostics_string) result(test_diagnosis) Implementation → The result is a test_diagnosis_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name logical, intent(in) :: test_passed type( string_t ), intent(in) :: diagnostics_string Return Value type( test_diagnosis_t ) interface private elemental module function diagnostics_string(self) result(string_) Implementation → The result is a string describing the condition(s) that caused a test failure Arguments Type Intent Optional Attributes Name class( test_diagnosis_t ), intent(in) :: self Return Value type( string_t ) interface private elemental module function test_passed(self) result(passed) Implementation → The result is .true. if the test passed and false otherwise Arguments Type Intent Optional Attributes Name class( test_diagnosis_t ), intent(in) :: self Return Value logical Derived Types type, public :: test_diagnosis_t Encapsulate test outcome and diagnostic information Components Type Visibility Attributes Name Initial character(len=:), private, allocatable :: diagnostics_string_ logical, private :: test_passed_ Constructor private\n\n                    elemental, module\n                    function construct_from_character (test_passed, diagnostics_string) The result is a test_diagnosis_t object with the components defined by the dummy arguments private\n\n                    elemental, module\n                    function construct_from_string_t (test_passed, diagnostics_string) The result is a test_diagnosis_t object with the components defined by the dummy arguments Type-Bound Procedures procedure, public :: diagnostics_string procedure, public :: test_passed type, private :: double_precision_operands_t Components Type Visibility Attributes Name Initial double precision, public :: actual double precision, public :: expected type, private :: operands_t Components Type Visibility Attributes Name Initial real(kind=k), public :: actual real(kind=k), public :: expected integer, public, kind :: k = default_real type, private :: operands_t Components Type Visibility Attributes Name Initial real, public :: actual real, public :: expected","tags":"","url":"module/julienne_test_diagnosis_m.html"},{"title":"julienne_m – Julienne","text":"Global aggregation of all public entities Uses julienne_formats_m julienne_test_description_m julienne_vector_test_description_m julienne_bin_m julienne_test_m julienne_test_result_m julienne_github_ci_m julienne_test_diagnosis_m julienne_command_line_m julienne_file_m julienne_string_m module~~julienne_m~~UsesGraph module~julienne_m julienne_m module~julienne_bin_m julienne_bin_m module~julienne_m->module~julienne_bin_m module~julienne_command_line_m julienne_command_line_m module~julienne_m->module~julienne_command_line_m module~julienne_file_m julienne_file_m module~julienne_m->module~julienne_file_m module~julienne_formats_m julienne_formats_m module~julienne_m->module~julienne_formats_m module~julienne_github_ci_m julienne_github_ci_m module~julienne_m->module~julienne_github_ci_m module~julienne_string_m julienne_string_m module~julienne_m->module~julienne_string_m module~julienne_test_description_m julienne_test_description_m module~julienne_m->module~julienne_test_description_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_m->module~julienne_test_diagnosis_m module~julienne_test_m julienne_test_m module~julienne_m->module~julienne_test_m module~julienne_test_result_m julienne_test_result_m module~julienne_m->module~julienne_test_result_m module~julienne_vector_test_description_m julienne_vector_test_description_m module~julienne_m->module~julienne_vector_test_description_m module~julienne_file_m->module~julienne_string_m assert_m assert_m module~julienne_string_m->assert_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding module~julienne_test_description_m->module~julienne_string_m module~julienne_test_description_m->module~julienne_test_diagnosis_m module~julienne_test_description_m->module~julienne_test_result_m module~julienne_test_diagnosis_m->module~julienne_string_m module~julienne_test_m->module~julienne_command_line_m module~julienne_test_m->module~julienne_test_result_m module~julienne_user_defined_collectives_m julienne_user_defined_collectives_m module~julienne_test_m->module~julienne_user_defined_collectives_m module~julienne_test_result_m->module~julienne_string_m module~julienne_test_result_m->module~julienne_test_diagnosis_m module~julienne_vector_test_description_m->module~julienne_string_m module~julienne_vector_test_description_m->module~julienne_test_diagnosis_m module~julienne_vector_test_description_m->module~julienne_test_result_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~julienne_m~~UsedByGraph module~julienne_m julienne_m program~check_for_command_line_argument check_for_command_line_argument program~check_for_command_line_argument->module~julienne_m program~get_command_line_flag_value get_command_line_flag_value program~get_command_line_flag_value->module~julienne_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"module/julienne_m.html"},{"title":"julienne_test_result_m – Julienne","text":"Define an abstraction for describing test intentions and results Uses julienne_test_diagnosis_m julienne_string_m module~~julienne_test_result_m~~UsesGraph module~julienne_test_result_m julienne_test_result_m module~julienne_string_m julienne_string_m module~julienne_test_result_m->module~julienne_string_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_test_result_m->module~julienne_test_diagnosis_m assert_m assert_m module~julienne_string_m->assert_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding module~julienne_test_diagnosis_m->module~julienne_string_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by Descendants: julienne_test_result_s module~~julienne_test_result_m~~UsedByGraph module~julienne_test_result_m julienne_test_result_m module~julienne_m julienne_m module~julienne_m->module~julienne_test_result_m module~julienne_test_description_m julienne_test_description_m module~julienne_m->module~julienne_test_description_m module~julienne_test_m julienne_test_m module~julienne_m->module~julienne_test_m module~julienne_vector_test_description_m julienne_vector_test_description_m module~julienne_m->module~julienne_vector_test_description_m module~julienne_test_description_m->module~julienne_test_result_m module~julienne_test_m->module~julienne_test_result_m module~julienne_test_result_s julienne_test_result_s module~julienne_test_result_s->module~julienne_test_result_m module~julienne_vector_test_description_m->module~julienne_test_result_m module~julienne_test_description_s julienne_test_description_s module~julienne_test_description_s->module~julienne_test_description_m module~julienne_test_s julienne_test_s module~julienne_test_s->module~julienne_test_m module~julienne_vector_test_description_s julienne_vector_test_description_s module~julienne_vector_test_description_s->module~julienne_vector_test_description_m program~check_for_command_line_argument check_for_command_line_argument program~check_for_command_line_argument->module~julienne_m program~get_command_line_flag_value get_command_line_flag_value program~get_command_line_flag_value->module~julienne_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces public        interface test_result_t private elemental module function construct_from_character(description, diagnosis) result(test_result) Implementation → The result is a test_result_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description type( test_diagnosis_t ), intent(in), optional :: diagnosis Return Value type( test_result_t ) private elemental module function construct_from_string(description, diagnosis) result(test_result) Implementation → The result is a test_result_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description type( test_diagnosis_t ), intent(in), optional :: diagnosis Return Value type( test_result_t ) interface private pure module function characterize(self) result(characterization) Implementation → The result is a character description of the test and its outcome Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value character(len=:), allocatable interface private elemental module function description_contains_characters(self, substring) result(substring_found) Implementation → The result is true if and only if the test description contains the substring Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical interface private elemental module function description_contains_string(self, substring) result(substring_found) Implementation → The result is true if and only if the test description contains the substring Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical interface private impure elemental module function passed(self) result(test_passed) Implementation → The result is true if and only if the test passed on all images Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value logical interface private impure elemental module function skipped(self) result(test_skipped) Implementation → The result is true if and only if the test result contains no diagnosis on any image Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value logical Derived Types type, public :: test_result_t Encapsulate test descriptions and outcomes Components Type Visibility Attributes Name Initial type( string_t ), private :: description_ type( test_diagnosis_t ), private, allocatable :: diagnosis_ Constructor private\n\n                    elemental, module\n                    function construct_from_character (description, diagnosis) The result is a test_result_t object with the components defined by the dummy arguments private\n\n                    elemental, module\n                    function construct_from_string (description, diagnosis) The result is a test_result_t object with the components defined by the dummy arguments Type-Bound Procedures procedure, public :: characterize generic, public :: description_contains => description_contains_string , description_contains_characters procedure, public :: passed procedure, public :: skipped procedure, private :: description_contains_characters procedure, private :: description_contains_string","tags":"","url":"module/julienne_test_result_m.html"},{"title":"julienne_command_line_m – Julienne","text":"return command line argument information Used by Descendants: julienne_command_line_s module~~julienne_command_line_m~~UsedByGraph module~julienne_command_line_m julienne_command_line_m module~julienne_command_line_s julienne_command_line_s module~julienne_command_line_s->module~julienne_command_line_m module~julienne_m julienne_m module~julienne_m->module~julienne_command_line_m module~julienne_test_m julienne_test_m module~julienne_m->module~julienne_test_m module~julienne_test_m->module~julienne_command_line_m module~julienne_test_s julienne_test_s module~julienne_test_s->module~julienne_test_m program~check_for_command_line_argument check_for_command_line_argument program~check_for_command_line_argument->module~julienne_m program~get_command_line_flag_value get_command_line_flag_value program~get_command_line_flag_value->module~julienne_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces interface private module function argument_present(acceptable_argument) result(found) Implementation → result is .true. only if a command-line argument matches an element of this function's argument Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: acceptable_argument (:) sample list: [character(len=len( )):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"]\nwhere dashes support Linux/macOS, slashes support Windows, and must be replaced\nby the longest list element (\"--benchmark\" above) Return Value logical interface private module function flag_value(flag) Implementation → result = { the value passed immediately after a command-line flag if the flag is present or\n         { an empty string otherwise. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: flag Return Value character(len=:), allocatable Derived Types type, public :: command_line_t Type-Bound Procedures procedure, public, nopass :: argument_present procedure, public, nopass :: flag_value","tags":"","url":"module/julienne_command_line_m.html"},{"title":"julienne_string_m – Julienne","text":"Uses iso_c_binding assert_m module~~julienne_string_m~~UsesGraph module~julienne_string_m julienne_string_m assert_m assert_m module~julienne_string_m->assert_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by Descendants: julienne_string_s module~~julienne_string_m~~UsedByGraph module~julienne_string_m julienne_string_m module~julienne_file_m julienne_file_m module~julienne_file_m->module~julienne_string_m module~julienne_m julienne_m module~julienne_m->module~julienne_string_m module~julienne_m->module~julienne_file_m module~julienne_test_description_m julienne_test_description_m module~julienne_m->module~julienne_test_description_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_m->module~julienne_test_diagnosis_m module~julienne_test_result_m julienne_test_result_m module~julienne_m->module~julienne_test_result_m module~julienne_vector_test_description_m julienne_vector_test_description_m module~julienne_m->module~julienne_vector_test_description_m module~julienne_test_m julienne_test_m module~julienne_m->module~julienne_test_m module~julienne_string_s julienne_string_s module~julienne_string_s->module~julienne_string_m module~julienne_test_description_m->module~julienne_string_m module~julienne_test_description_m->module~julienne_test_diagnosis_m module~julienne_test_description_m->module~julienne_test_result_m module~julienne_test_diagnosis_m->module~julienne_string_m module~julienne_test_diagnosis_s julienne_test_diagnosis_s module~julienne_test_diagnosis_s->module~julienne_string_m module~julienne_test_diagnosis_s->module~julienne_test_diagnosis_m module~julienne_test_result_m->module~julienne_string_m module~julienne_test_result_m->module~julienne_test_diagnosis_m module~julienne_vector_test_description_m->module~julienne_string_m module~julienne_vector_test_description_m->module~julienne_test_diagnosis_m module~julienne_vector_test_description_m->module~julienne_test_result_m program~create_markdown_table create_markdown_table program~create_markdown_table->module~julienne_string_m module~julienne_file_s julienne_file_s module~julienne_file_s->module~julienne_file_m module~julienne_test_description_s julienne_test_description_s module~julienne_test_description_s->module~julienne_test_description_m module~julienne_test_m->module~julienne_test_result_m module~julienne_test_result_s julienne_test_result_s module~julienne_test_result_s->module~julienne_test_result_m module~julienne_vector_test_description_s julienne_vector_test_description_s module~julienne_vector_test_description_s->module~julienne_vector_test_description_m program~check_for_command_line_argument check_for_command_line_argument program~check_for_command_line_argument->module~julienne_m program~get_command_line_flag_value get_command_line_flag_value program~get_command_line_flag_value->module~julienne_m module~julienne_test_s julienne_test_s module~julienne_test_s->module~julienne_test_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces interface public pure module function array_of_strings(delimited_strings, delimiter) result(strings_array) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: delimited_strings character(len=*), intent(in) :: delimiter Return Value type( string_t ), allocatable, (:) public        interface operator(.cat.) private pure module function concatenate_elements(strings) result(concatenated_strings) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) Return Value type( string_t ) public        interface operator(.csv.) private pure module function characters_with_comma_separator(strings) result(csv) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: strings (:) Return Value type( string_t ) private pure module function strings_with_comma_separator(strings) result(csv) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) Return Value type( string_t ) public        interface operator(.sv.) private pure module function characters_with_character_separator(strings, separator) result(sv) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: strings (:) character(len=*), intent(in) :: separator Return Value type( string_t ) private pure module function characters_with_string_separator(strings, separator) result(sv) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: strings (:) type( string_t ), intent(in) :: separator Return Value type( string_t ) private pure module function strings_with_character_separator(strings, separator) result(sv) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) character(len=*), intent(in) :: separator Return Value type( string_t ) private pure module function strings_with_string_t_separator(strings, separator) result(sv) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) type( string_t ), intent(in) :: separator Return Value type( string_t ) public        interface string_t private elemental module function from_characters(string) result(new_string) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string Return Value type( string_t ) private elemental module function from_default_complex(z) result(string) Implementation → Arguments Type Intent Optional Attributes Name complex, intent(in) :: z Return Value type( string_t ) private elemental module function from_default_integer(i) result(string) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: i Return Value type( string_t ) private elemental module function from_default_logical(b) result(string) Implementation → Arguments Type Intent Optional Attributes Name logical, intent(in) :: b Return Value type( string_t ) private elemental module function from_default_real(x) result(string) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: x Return Value type( string_t ) private elemental module function from_double_precision(x) result(string) Implementation → Arguments Type Intent Optional Attributes Name double precision, intent(in) :: x Return Value type( string_t ) private elemental module function from_double_precision_complex(z) result(string) Implementation → Arguments Type Intent Optional Attributes Name complex(kind=kind(1D0)), intent(in) :: z Return Value type( string_t ) private elemental module function from_logical_c_bool(b) result(string) Implementation → Arguments Type Intent Optional Attributes Name logical(kind=c_bool), intent(in) :: b Return Value type( string_t ) interface private pure module function as_character(self) result(raw_string) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value character(len=:), allocatable interface private elemental module subroutine assign_character_to_string_t(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(inout) :: lhs character(len=*), intent(in) :: rhs interface private pure module subroutine assign_string_t_to_character(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=:), intent(out), allocatable :: lhs class( string_t ), intent(in) :: rhs interface private pure module function base_name(self) result(base) Implementation → result contains all characters in file_name before the last dot (.) Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) interface private elemental module function bracket(self, opening, closing) result(bracketed_self) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in), optional :: opening character(len=*), intent(in), optional :: closing Return Value type( string_t ) interface private pure module function character_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t ) interface private elemental module function character_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical interface private elemental module function character_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical interface private elemental module function file_extension(self) result(extension) Implementation → result contains all characters in file_name after the last dot (.) Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) interface private pure module function get_character(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key character(len=*), intent(in) :: mold Return Value character(len=:), allocatable interface private pure module function get_character_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key character(len=*), intent(in) :: mold Return Value character(len=:), allocatable interface private pure module function get_double_precision(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key double precision, intent(in) :: mold Return Value double precision interface private pure module function get_double_precision_array(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key double precision, intent(in) :: mold (:) Return Value double precision, allocatable, (:) interface private pure module function get_double_precision_array_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key double precision, intent(in) :: mold (:) Return Value double precision, allocatable, (:) interface private pure module function get_double_precision_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key double precision, intent(in) :: mold Return Value double precision interface private pure module function get_integer(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold Return Value integer interface private pure module function get_integer_array(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold (:) Return Value integer, allocatable, (:) interface private pure module function get_integer_array_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key integer, intent(in) :: mold (:) Return Value integer, allocatable, (:) interface private pure module function get_integer_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key integer, intent(in) :: mold Return Value integer interface private elemental module function get_json_key(self) result(unquoted_key) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) interface private elemental module function get_logical(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key logical, intent(in) :: mold Return Value logical interface private pure module function get_logical_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key logical, intent(in) :: mold Return Value logical interface private pure module function get_real(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold Return Value real interface private pure module function get_real_array(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold (:) Return Value real, allocatable, (:) interface private pure module function get_real_array_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key real, intent(in) :: mold (:) Return Value real, allocatable, (:) interface private pure module function get_real_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key real, intent(in) :: mold Return Value real interface private elemental module function get_string(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key class( string_t ), intent(in) :: mold Return Value type( string_t ) interface private pure module function get_string_t_array_with_character_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key type( string_t ), intent(in) :: mold (:) Return Value type( string_t ), allocatable, (:) interface private pure module function get_string_t_array_with_string_t_key(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self type( string_t ), intent(in) :: key type( string_t ), intent(in) :: mold (:) Return Value type( string_t ), allocatable, (:) interface private elemental module function is_allocated(self) result(string_allocated) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value logical interface private pure module function string_t_cat_character(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( string_t ) interface private pure module function string_t_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t ) interface private elemental module function string_t_eq_character(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical interface private elemental module function string_t_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical interface private elemental module function string_t_ne_character(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical interface private elemental module function string_t_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical Derived Types type, public, extends(characterizable_t) :: string_t Components Type Visibility Attributes Name Initial character(len=:), private, allocatable :: string_ Constructor private\n\n                    elemental, module\n                    function from_characters (string) private\n\n                    elemental, module\n                    function from_default_complex (z) private\n\n                    elemental, module\n                    function from_default_integer (i) private\n\n                    elemental, module\n                    function from_default_logical (b) private\n\n                    elemental, module\n                    function from_default_real (x) private\n\n                    elemental, module\n                    function from_double_precision (x) private\n\n                    elemental, module\n                    function from_double_precision_complex (z) private\n\n                    elemental, module\n                    function from_logical_c_bool (b) Type-Bound Procedures procedure, public :: as_character generic, public :: assignment(= ) => assign_string_t_to_character , assign_character_to_string_t procedure, public :: base_name procedure, public :: bracket procedure, public :: file_extension procedure, public :: get_json_key generic, public :: get_json_value => get_string , get_string_t_array_with_character_key , get_string_t_array_with_string_t_key , get_real , get_real_with_character_key , get_character , get_character_with_character_key , get_logical , get_logical_with_character_key , get_real_array , get_real_array_with_character_key , get_integer_array , get_integer_array_with_character_key , get_integer , get_integer_with_character_key , get_double_precision , get_double_precision_with_character_key , get_double_precision_array , get_double_precision_array_with_character_key procedure, public :: is_allocated generic, public :: operator(//) => string_t_cat_string_t , string_t_cat_character , character_cat_string_t generic, public :: operator(/=) => string_t_ne_string_t , string_t_ne_character , character_ne_string_t generic, public :: operator(==) => string_t_eq_string_t , string_t_eq_character , character_eq_string_t generic, public :: string => as_character procedure, private :: assign_character_to_string_t procedure, private, pass(rhs) :: assign_string_t_to_character procedure, private, pass(rhs) :: character_cat_string_t procedure, private, pass(rhs) :: character_eq_string_t procedure, private, pass(rhs) :: character_ne_string_t procedure, private :: get_character procedure, private :: get_character_with_character_key procedure, private :: get_double_precision procedure, private :: get_double_precision_array procedure, private :: get_double_precision_array_with_character_key procedure, private :: get_double_precision_with_character_key procedure, private :: get_integer procedure, private :: get_integer_array procedure, private :: get_integer_array_with_character_key procedure, private :: get_integer_with_character_key procedure, private :: get_logical procedure, private :: get_logical_with_character_key procedure, private :: get_real procedure, private :: get_real_array procedure, private :: get_real_array_with_character_key procedure, private :: get_real_with_character_key procedure, private :: get_string procedure, private :: get_string_t_array_with_character_key procedure, private :: get_string_t_array_with_string_t_key procedure, private :: string_t_cat_character procedure, private :: string_t_cat_string_t procedure, private :: string_t_eq_character procedure, private :: string_t_eq_string_t procedure, private :: string_t_ne_character procedure, private :: string_t_ne_string_t","tags":"","url":"module/julienne_string_m.html"},{"title":"julienne_file_m – Julienne","text":"A representation of a file as an object Uses julienne_string_m module~~julienne_file_m~~UsesGraph module~julienne_file_m julienne_file_m module~julienne_string_m julienne_string_m module~julienne_file_m->module~julienne_string_m assert_m assert_m module~julienne_string_m->assert_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by Descendants: julienne_file_s module~~julienne_file_m~~UsedByGraph module~julienne_file_m julienne_file_m module~julienne_file_s julienne_file_s module~julienne_file_s->module~julienne_file_m module~julienne_m julienne_m module~julienne_m->module~julienne_file_m program~check_for_command_line_argument check_for_command_line_argument program~check_for_command_line_argument->module~julienne_m program~get_command_line_flag_value get_command_line_flag_value program~get_command_line_flag_value->module~julienne_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces public        interface file_t private module function from_file_with_character_name(file_name) result(file_object) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: file_name Return Value type( file_t ) private module function from_file_with_string_name(file_name) result(file_object) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: file_name Return Value type( file_t ) private module function from_lines(lines) result(file_object) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lines (:) Return Value type( file_t ) interface private pure module function lines(self) result(my_lines) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self Return Value type( string_t ), allocatable, (:) interface private impure elemental module subroutine write_to_character_file_name(self, file_name) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self character(len=*), intent(in) :: file_name interface private module subroutine write_to_output_unit(self) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self interface private impure elemental module subroutine write_to_string_file_name(self, file_name) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self type( string_t ), intent(in) :: file_name Derived Types type, public :: file_t Components Type Visibility Attributes Name Initial type( string_t ), private, allocatable :: lines_ (:) Constructor private\n\n                    module\n                    function from_file_with_character_name (file_name) private\n\n                    module\n                    function from_file_with_string_name (file_name) private\n\n                    module\n                    function from_lines (lines) Type-Bound Procedures procedure, public :: lines generic, public :: write_lines => write_to_output_unit , write_to_character_file_name , write_to_string_file_name procedure, private :: write_to_character_file_name procedure, private :: write_to_output_unit procedure, private :: write_to_string_file_name","tags":"","url":"module/julienne_file_m.html"},{"title":"julienne_user_defined_collectives_m – Julienne","text":"User-defined collective subroutines. Used by Descendants: julienne_user_defined_collectives_s module~~julienne_user_defined_collectives_m~~UsedByGraph module~julienne_user_defined_collectives_m julienne_user_defined_collectives_m module~julienne_test_m julienne_test_m module~julienne_test_m->module~julienne_user_defined_collectives_m module~julienne_test_result_s julienne_test_result_s module~julienne_test_result_s->module~julienne_user_defined_collectives_m module~julienne_user_defined_collectives_s julienne_user_defined_collectives_s module~julienne_user_defined_collectives_s->module~julienne_user_defined_collectives_m module~julienne_m julienne_m module~julienne_m->module~julienne_test_m module~julienne_test_s julienne_test_s module~julienne_test_s->module~julienne_test_m program~check_for_command_line_argument check_for_command_line_argument program~check_for_command_line_argument->module~julienne_m program~get_command_line_flag_value get_command_line_flag_value program~get_command_line_flag_value->module~julienne_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces interface public impure elemental module subroutine co_all(boolean) Implementation → If any image in a team calls this subroutine, then every image in the \nthe same team must call this subroutine.  This subroutine sets the\n\"boolean\" argument .true. if it is true in all participating images\nupon entry and .false. otherwise. Arguments Type Intent Optional Attributes Name logical, intent(inout) :: boolean","tags":"","url":"module/julienne_user_defined_collectives_m.html"},{"title":"julienne_test_description_m – Julienne","text":"Define an abstraction for describing test intentions and test functions Uses julienne_test_result_m julienne_test_diagnosis_m julienne_string_m module~~julienne_test_description_m~~UsesGraph module~julienne_test_description_m julienne_test_description_m module~julienne_string_m julienne_string_m module~julienne_test_description_m->module~julienne_string_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_test_description_m->module~julienne_test_diagnosis_m module~julienne_test_result_m julienne_test_result_m module~julienne_test_description_m->module~julienne_test_result_m assert_m assert_m module~julienne_string_m->assert_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding module~julienne_test_diagnosis_m->module~julienne_string_m module~julienne_test_result_m->module~julienne_string_m module~julienne_test_result_m->module~julienne_test_diagnosis_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by Descendants: julienne_test_description_s module~~julienne_test_description_m~~UsedByGraph module~julienne_test_description_m julienne_test_description_m module~julienne_m julienne_m module~julienne_m->module~julienne_test_description_m module~julienne_test_description_s julienne_test_description_s module~julienne_test_description_s->module~julienne_test_description_m program~check_for_command_line_argument check_for_command_line_argument program~check_for_command_line_argument->module~julienne_m program~get_command_line_flag_value get_command_line_flag_value program~get_command_line_flag_value->module~julienne_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces public        interface test_description_t private module function construct_from_characters(description, diagnosis_function) result(test_description) Implementation → The result is a test_description_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description procedure( diagnosis_function_i ), intent(in), optional, pointer :: diagnosis_function Return Value type( test_description_t ) private module function construct_from_string(description, diagnosis_function) result(test_description) Implementation → The result is a test_description_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description procedure( diagnosis_function_i ), intent(in), optional, pointer :: diagnosis_function Return Value type( test_description_t ) interface private elemental module function contains_characters(self, substring) result(match) Implementation → The result is .true. if the test description includes the value of substring Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical interface private elemental module function contains_string_t(self, substring) result(match) Implementation → The result is .true. if the test description includes the value of substring Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical interface private elemental module function equals(lhs, rhs) result(lhs_eq_rhs) Implementation → The result is .true. if the components of the lhs & rhs are equal Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: lhs class( test_description_t ), intent(in) :: rhs Return Value logical interface private impure elemental module function run(self) result(test_result) Implementation → The result encapsulates the test description and test outcome Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self Return Value type( test_result_t ) Abstract Interfaces abstract interface public  function diagnosis_function_i() result(test_diagnosis) Arguments None Return Value type( test_diagnosis_t ) Derived Types type, public :: test_description_t Encapsulate test descriptions and test-functions Components Type Visibility Attributes Name Initial character(len=:), private, allocatable :: description_ procedure( diagnosis_function_i ), private, pointer, nopass :: diagnosis_function_ => null() Constructor private\n\n                    module\n                    function construct_from_characters (description, diagnosis_function) The result is a test_description_t object with the components defined by the dummy arguments private\n\n                    module\n                    function construct_from_string (description, diagnosis_function) The result is a test_description_t object with the components defined by the dummy arguments Type-Bound Procedures generic, public :: contains_text => contains_string_t , contains_characters generic, public :: operator(==) => equals procedure, public :: run procedure, private :: contains_characters procedure, private :: contains_string_t procedure, private :: equals","tags":"","url":"module/julienne_test_description_m.html"},{"title":"julienne_github_ci_m – Julienne","text":"Detect whether a program is running in GitHub Continuous Integration (CI) Used by Descendants: julienne_github_ci_s module~~julienne_github_ci_m~~UsedByGraph module~julienne_github_ci_m julienne_github_ci_m module~julienne_github_ci_s julienne_github_ci_s module~julienne_github_ci_s->module~julienne_github_ci_m module~julienne_m julienne_m module~julienne_m->module~julienne_github_ci_m program~check_for_command_line_argument check_for_command_line_argument program~check_for_command_line_argument->module~julienne_m program~get_command_line_flag_value get_command_line_flag_value program~get_command_line_flag_value->module~julienne_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces interface public module function GitHub_CI() Implementation → The result is true if the environment variable named \"CI\" is set to the string \"true\" Arguments None Return Value logical","tags":"","url":"module/julienne_github_ci_m.html"},{"title":"julienne_formats_m – Julienne","text":"Useful strings for formatting print and write statements Used by Descendants: julienne_formats_s module~~julienne_formats_m~~UsedByGraph module~julienne_formats_m julienne_formats_m module~julienne_formats_s julienne_formats_s module~julienne_formats_s->module~julienne_formats_m module~julienne_m julienne_m module~julienne_m->module~julienne_formats_m program~check_for_command_line_argument check_for_command_line_argument program~check_for_command_line_argument->module~julienne_m program~get_command_line_flag_value get_command_line_flag_value program~get_command_line_flag_value->module~julienne_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial character(len=*), public, parameter :: cscv = \"(*('(',G0,',',G0,')',:,',')))\" comma-separated complex values character(len=*), public, parameter :: csv = \"(*(G0,:,','))\" comma-separated values Interfaces interface public pure module function separated_values(separator, mold) result(format_string) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: separator class(*), intent(in) :: mold (..) Return Value character(len=:), allocatable","tags":"","url":"module/julienne_formats_m.html"},{"title":"julienne_bin_m – Julienne","text":"distribute item numbers across bins such that the number of items differs by at most 1 between any two bins Used by Descendants: julienne_bin_s module~~julienne_bin_m~~UsedByGraph module~julienne_bin_m julienne_bin_m module~julienne_bin_s julienne_bin_s module~julienne_bin_s->module~julienne_bin_m module~julienne_m julienne_m module~julienne_m->module~julienne_bin_m program~check_for_command_line_argument check_for_command_line_argument program~check_for_command_line_argument->module~julienne_m program~get_command_line_flag_value get_command_line_flag_value program~get_command_line_flag_value->module~julienne_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces public        interface bin_t private elemental module function construct(num_items, num_bins, bin_number) result(bin) Implementation → the result is a bin associated with a range of item numbers Arguments Type Intent Optional Attributes Name integer, intent(in) :: num_items integer, intent(in) :: num_bins integer, intent(in) :: bin_number Return Value type( bin_t ) interface private elemental module function first(self) result(first_item_number) Implementation → the result is the first item number associated with the given bin Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer interface private elemental module function last(self) result(last_item_number) Implementation → the result is the last item number associated with the given bin Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer Derived Types type, public :: bin_t encapsulate a range of item numbers associated with a bin Components Type Visibility Attributes Name Initial integer, private :: first_ integer, private :: last_ Constructor private\n\n                    elemental, module\n                    function construct (num_items, num_bins, bin_number) the result is a bin associated with a range of item numbers Type-Bound Procedures procedure, public :: first procedure, public :: last","tags":"","url":"module/julienne_bin_m.html"},{"title":"julienne_test_m – Julienne","text":"Define an abstract test_t type with deferred bindings (\"subject\" and \"results\")\nused by a type-bound procedure (\"report\") for reporting test results.  The \"report\"\nprocedure thus represents an implementation of the Template Method pattern. Uses julienne_user_defined_collectives_m julienne_command_line_m julienne_test_result_m module~~julienne_test_m~~UsesGraph module~julienne_test_m julienne_test_m module~julienne_command_line_m julienne_command_line_m module~julienne_test_m->module~julienne_command_line_m module~julienne_test_result_m julienne_test_result_m module~julienne_test_m->module~julienne_test_result_m module~julienne_user_defined_collectives_m julienne_user_defined_collectives_m module~julienne_test_m->module~julienne_user_defined_collectives_m module~julienne_string_m julienne_string_m module~julienne_test_result_m->module~julienne_string_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_test_result_m->module~julienne_test_diagnosis_m assert_m assert_m module~julienne_string_m->assert_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding module~julienne_test_diagnosis_m->module~julienne_string_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by Descendants: julienne_test_s module~~julienne_test_m~~UsedByGraph module~julienne_test_m julienne_test_m module~julienne_m julienne_m module~julienne_m->module~julienne_test_m module~julienne_test_s julienne_test_s module~julienne_test_s->module~julienne_test_m program~check_for_command_line_argument check_for_command_line_argument program~check_for_command_line_argument->module~julienne_m program~get_command_line_flag_value get_command_line_flag_value program~get_command_line_flag_value->module~julienne_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial character(len=:), public, allocatable :: test_description_substring Interfaces interface private module subroutine report(test, passes, tests, skips) Implementation → Print the test results and increment the tallies of passing tests, total tests, and skipped tests. Arguments Type Intent Optional Attributes Name class( test_t ), intent(in) :: test integer, intent(inout) :: passes integer, intent(inout) :: tests integer, intent(inout) :: skips Abstract Interfaces abstract interface private  function results_interface() result(test_results) The result is an array of test results for subsequent reporting in the \"report\" type-bound procedure Arguments None Return Value type( test_result_t ), allocatable, (:) abstract interface private pure function subject_interface() result(specimen_description) The result is the name of the test specimen (the subject of testing) Arguments None Return Value character(len=:), allocatable Derived Types type, public, abstract :: test_t Facilitate testing and test reporting Type-Bound Procedures procedure, public :: report procedure( results_interface ), public, deferred, nopass :: results procedure( subject_interface ), public, deferred, nopass :: subject","tags":"","url":"module/julienne_test_m.html"},{"title":"julienne_vector_test_description_m – Julienne","text":"Define an abstraction for describing test intentions and array-valued test functions Uses julienne_test_result_m julienne_test_diagnosis_m julienne_string_m module~~julienne_vector_test_description_m~~UsesGraph module~julienne_vector_test_description_m julienne_vector_test_description_m module~julienne_string_m julienne_string_m module~julienne_vector_test_description_m->module~julienne_string_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_vector_test_description_m->module~julienne_test_diagnosis_m module~julienne_test_result_m julienne_test_result_m module~julienne_vector_test_description_m->module~julienne_test_result_m assert_m assert_m module~julienne_string_m->assert_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding module~julienne_test_diagnosis_m->module~julienne_string_m module~julienne_test_result_m->module~julienne_string_m module~julienne_test_result_m->module~julienne_test_diagnosis_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by Descendants: julienne_vector_test_description_s module~~julienne_vector_test_description_m~~UsedByGraph module~julienne_vector_test_description_m julienne_vector_test_description_m module~julienne_m julienne_m module~julienne_m->module~julienne_vector_test_description_m module~julienne_vector_test_description_s julienne_vector_test_description_s module~julienne_vector_test_description_s->module~julienne_vector_test_description_m program~check_for_command_line_argument check_for_command_line_argument program~check_for_command_line_argument->module~julienne_m program~get_command_line_flag_value get_command_line_flag_value program~get_command_line_flag_value->module~julienne_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces interface public impure module function run(self) result(test_results) Implementation → The result encapsulates the test description and test outcome Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self Return Value type( test_result_t ), allocatable, (:) public        interface vector_test_description_t private module function construct_from_strings(descriptions, vector_diagnosis_function) result(vector_test_description) Implementation → The result is a vector_test_description_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: descriptions (:) procedure( vector_diagnosis_function_i ), intent(in), optional, pointer :: vector_diagnosis_function Return Value type( vector_test_description_t ) interface private module function contains_characters(self, substring) result(match_vector) Implementation → The result is .true. if the test description includes the value of substring Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical, allocatable, (:) interface private module function contains_string_t(self, substring) result(match_vector) Implementation → The result is .true. if the test description includes the value of substring%string() Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical, allocatable, (:) Abstract Interfaces abstract interface public  function vector_diagnosis_function_i() result(diagnoses) Arguments None Return Value type( test_diagnosis_t ), allocatable, (:) Derived Types type, public :: vector_test_description_t Components Type Visibility Attributes Name Initial type( string_t ), private, allocatable :: descriptions_ (:) procedure( vector_diagnosis_function_i ), private, pointer, nopass :: vector_diagnosis_function_ => null() Constructor private\n\n                    module\n                    function construct_from_strings (descriptions, vector_diagnosis_function) The result is a vector_test_description_t object with the components defined by the dummy arguments Type-Bound Procedures generic, public :: contains_text => contains_string_t , contains_characters procedure, public :: run procedure, private :: contains_characters procedure, private :: contains_string_t","tags":"","url":"module/julienne_vector_test_description_m.html"},{"title":"julienne_test_description_s – Julienne","text":"Uses assert_m Ancestors: julienne_test_description_m module~~julienne_test_description_s~~UsesGraph module~julienne_test_description_s julienne_test_description_s assert_m assert_m module~julienne_test_description_s->assert_m module~julienne_test_description_m julienne_test_description_m module~julienne_test_description_s->module~julienne_test_description_m module~julienne_string_m julienne_string_m module~julienne_test_description_m->module~julienne_string_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_test_description_m->module~julienne_test_diagnosis_m module~julienne_test_result_m julienne_test_result_m module~julienne_test_description_m->module~julienne_test_result_m module~julienne_string_m->assert_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding module~julienne_test_diagnosis_m->module~julienne_string_m module~julienne_test_result_m->module~julienne_string_m module~julienne_test_result_m->module~julienne_test_diagnosis_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_description_s.html construct_from_characters module function construct_from_characters(description, diagnosis_function) result(test_description) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description procedure( diagnosis_function_i ), intent(in), optional, pointer :: diagnosis_function Return Value type( test_description_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_description_s.html construct_from_string module function construct_from_string(description, diagnosis_function) result(test_description) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description procedure( diagnosis_function_i ), intent(in), optional, pointer :: diagnosis_function Return Value type( test_description_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_description_s.html contains_characters elemental module function contains_characters(self, substring) result(match) Interface → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_description_s.html contains_string_t elemental module function contains_string_t(self, substring) result(match) Interface → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_description_s.html equals elemental module function equals(lhs, rhs) result(lhs_eq_rhs) Interface → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: lhs class( test_description_t ), intent(in) :: rhs Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_description_s.html run impure elemental module function run(self) result(test_result) Interface → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self Return Value type( test_result_t )","tags":"","url":"module/julienne_test_description_s.html"},{"title":"julienne_user_defined_collectives_s – Julienne","text":"Uses Ancestors: julienne_user_defined_collectives_m module~~julienne_user_defined_collectives_s~~UsesGraph module~julienne_user_defined_collectives_s julienne_user_defined_collectives_s module~julienne_user_defined_collectives_m julienne_user_defined_collectives_m module~julienne_user_defined_collectives_s->module~julienne_user_defined_collectives_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_user_defined_collectives_s.html co_all impure elemental module subroutine co_all(boolean) Interface → Arguments Type Intent Optional Attributes Name logical, intent(inout) :: boolean","tags":"","url":"module/julienne_user_defined_collectives_s.html"},{"title":"julienne_command_line_s – Julienne","text":"Uses Ancestors: julienne_command_line_m module~~julienne_command_line_s~~UsesGraph module~julienne_command_line_s julienne_command_line_s module~julienne_command_line_m julienne_command_line_m module~julienne_command_line_s->module~julienne_command_line_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_command_line_s.html argument_present module function argument_present(acceptable_argument) result(found) Interface → list of acceptable arguments\nsample list: [character(len=len(longest_argument)):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"]\nwhere dashes support Linux/macOS and slashes support Windows Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: acceptable_argument (:) sample list: [character(len=len( )):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"]\nwhere dashes support Linux/macOS, slashes support Windows, and must be replaced\nby the longest list element (\"--benchmark\" above) Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_command_line_s.html flag_value module function flag_value(flag) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: flag Return Value character(len=:), allocatable","tags":"","url":"module/julienne_command_line_s.html"},{"title":"julienne_bin_s – Julienne","text":"Uses assert_m Ancestors: julienne_bin_m module~~julienne_bin_s~~UsesGraph module~julienne_bin_s julienne_bin_s assert_m assert_m module~julienne_bin_s->assert_m module~julienne_bin_m julienne_bin_m module~julienne_bin_s->module~julienne_bin_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_bin_s.html construct elemental module function construct(num_items, num_bins, bin_number) result(bin) Arguments Type Intent Optional Attributes Name integer, intent(in) :: num_items integer, intent(in) :: num_bins integer, intent(in) :: bin_number Return Value type( bin_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_bin_s.html first elemental module function first(self) result(first_item_number) Interface → Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_bin_s.html last elemental module function last(self) result(last_item_number) Interface → Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer","tags":"","url":"module/julienne_bin_s.html"},{"title":"julienne_vector_test_description_s – Julienne","text":"Uses assert_m Ancestors: julienne_vector_test_description_m module~~julienne_vector_test_description_s~~UsesGraph module~julienne_vector_test_description_s julienne_vector_test_description_s assert_m assert_m module~julienne_vector_test_description_s->assert_m module~julienne_vector_test_description_m julienne_vector_test_description_m module~julienne_vector_test_description_s->module~julienne_vector_test_description_m module~julienne_string_m julienne_string_m module~julienne_vector_test_description_m->module~julienne_string_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_vector_test_description_m->module~julienne_test_diagnosis_m module~julienne_test_result_m julienne_test_result_m module~julienne_vector_test_description_m->module~julienne_test_result_m module~julienne_string_m->assert_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding module~julienne_test_diagnosis_m->module~julienne_string_m module~julienne_test_result_m->module~julienne_string_m module~julienne_test_result_m->module~julienne_test_diagnosis_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Functions module function construct_from_strings (descriptions, vector_diagnosis_function) result(vector_test_description) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: descriptions (:) procedure( vector_diagnosis_function_i ), intent(in), optional, pointer :: vector_diagnosis_function Return Value type( vector_test_description_t ) Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_vector_test_description_s.html construct_from_strings module function construct_from_strings(descriptions, vector_diagnosis_function) result(vector_test_description) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: descriptions (:) procedure( vector_diagnosis_function_i ), intent(in), optional, pointer :: vector_diagnosis_function Return Value type( vector_test_description_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_vector_test_description_s.html contains_characters module function contains_characters(self, substring) result(match_vector) Interface → Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical, allocatable, (:) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_vector_test_description_s.html contains_string_t module function contains_string_t(self, substring) result(match_vector) Interface → Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical, allocatable, (:) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_vector_test_description_s.html run impure module function run(self) result(test_results) Interface → Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self Return Value type( test_result_t ), allocatable, (:)","tags":"","url":"module/julienne_vector_test_description_s.html"},{"title":"julienne_formats_s – Julienne","text":"Construct separated-value formats Uses Ancestors: julienne_formats_m module~~julienne_formats_s~~UsesGraph module~julienne_formats_s julienne_formats_s module~julienne_formats_m julienne_formats_m module~julienne_formats_s->module~julienne_formats_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_formats_s.html separated_values pure module function separated_values(separator, mold) result(format_string) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: separator class(*), intent(in) :: mold (..) Return Value character(len=:), allocatable","tags":"","url":"module/julienne_formats_s.html"},{"title":"julienne_string_s – Julienne","text":"Uses assert_m Ancestors: julienne_string_m module~~julienne_string_s~~UsesGraph module~julienne_string_s julienne_string_s assert_m assert_m module~julienne_string_s->assert_m module~julienne_string_m julienne_string_m module~julienne_string_s->module~julienne_string_m module~julienne_string_m->assert_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer, private, parameter :: comma_width = 1 integer, private, parameter :: default_real_width_supremum = 20 integer, private, parameter :: double_precision_width_supremum = 25 integer, private, parameter :: integer_width_supremum = 11 integer, private, parameter :: logical_width = 2 integer, private, parameter :: parenthesis_width = 1 integer, private, parameter :: space = 1 Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html array_of_strings pure module function array_of_strings(delimited_strings, delimiter) result(strings_array) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: delimited_strings character(len=*), intent(in) :: delimiter Return Value type( string_t ), allocatable, (:) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html as_character pure module function as_character(self) result(raw_string) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value character(len=:), allocatable module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html assign_character_to_string_t elemental module subroutine assign_character_to_string_t(lhs, rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(inout) :: lhs character(len=*), intent(in) :: rhs module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html assign_string_t_to_character pure module subroutine assign_string_t_to_character(lhs, rhs) Interface → Arguments Type Intent Optional Attributes Name character(len=:), intent(out), allocatable :: lhs class( string_t ), intent(in) :: rhs module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html base_name pure module function base_name(self) result(base) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html bracket elemental module function bracket(self, opening, closing) result(bracketed_self) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in), optional :: opening character(len=*), intent(in), optional :: closing Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html character_cat_string_t pure module function character_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html character_eq_string_t elemental module function character_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html character_ne_string_t elemental module function character_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html characters_with_character_separator pure module function characters_with_character_separator(strings, separator) result(sv) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: strings (:) character(len=*), intent(in) :: separator Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html characters_with_comma_separator pure module function characters_with_comma_separator(strings) result(csv) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: strings (:) Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html characters_with_string_separator pure module function characters_with_string_separator(strings, separator) result(sv) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: strings (:) type( string_t ), intent(in) :: separator Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html concatenate_elements pure module function concatenate_elements(strings) result(concatenated_strings) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html file_extension elemental module function file_extension(self) result(extension) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html from_characters elemental module function from_characters(string) result(new_string) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html from_default_complex elemental module function from_default_complex(z) result(string) Arguments Type Intent Optional Attributes Name complex, intent(in) :: z Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html from_default_integer elemental module function from_default_integer(i) result(string) Arguments Type Intent Optional Attributes Name integer, intent(in) :: i Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html from_default_logical elemental module function from_default_logical(b) result(string) Arguments Type Intent Optional Attributes Name logical, intent(in) :: b Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html from_default_real elemental module function from_default_real(x) result(string) Arguments Type Intent Optional Attributes Name real, intent(in) :: x Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html from_double_precision elemental module function from_double_precision(x) result(string) Arguments Type Intent Optional Attributes Name double precision, intent(in) :: x Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html from_double_precision_complex elemental module function from_double_precision_complex(z) result(string) Arguments Type Intent Optional Attributes Name complex(kind=kind(1D0)), intent(in) :: z Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html from_logical_c_bool elemental module function from_logical_c_bool(b) result(string) Arguments Type Intent Optional Attributes Name logical(kind=c_bool), intent(in) :: b Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_character pure module function get_character(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key character(len=*), intent(in) :: mold Return Value character(len=:), allocatable module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_character_with_character_key pure module function get_character_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key character(len=*), intent(in) :: mold Return Value character(len=:), allocatable module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_double_precision pure module function get_double_precision(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key double precision, intent(in) :: mold Return Value double precision module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_double_precision_array pure module function get_double_precision_array(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key double precision, intent(in) :: mold (:) Return Value double precision, allocatable, (:) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_double_precision_array_with_character_key pure module function get_double_precision_array_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key double precision, intent(in) :: mold (:) Return Value double precision, allocatable, (:) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_double_precision_with_character_key pure module function get_double_precision_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key double precision, intent(in) :: mold Return Value double precision module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_integer pure module function get_integer(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold Return Value integer module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_integer_array pure module function get_integer_array(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold (:) Return Value integer, allocatable, (:) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_integer_array_with_character_key pure module function get_integer_array_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key integer, intent(in) :: mold (:) Return Value integer, allocatable, (:) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_integer_with_character_key pure module function get_integer_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key integer, intent(in) :: mold Return Value integer module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_json_key elemental module function get_json_key(self) result(unquoted_key) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_logical elemental module function get_logical(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key logical, intent(in) :: mold Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_logical_with_character_key pure module function get_logical_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key logical, intent(in) :: mold Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_real pure module function get_real(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold Return Value real module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_real_array pure module function get_real_array(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold (:) Return Value real, allocatable, (:) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_real_array_with_character_key pure module function get_real_array_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key real, intent(in) :: mold (:) Return Value real, allocatable, (:) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_real_with_character_key pure module function get_real_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key real, intent(in) :: mold Return Value real module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_string elemental module function get_string(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key class( string_t ), intent(in) :: mold Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_string_t_array_with_character_key pure module function get_string_t_array_with_character_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self character(len=*), intent(in) :: key type( string_t ), intent(in) :: mold (:) Return Value type( string_t ), allocatable, (:) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html get_string_t_array_with_string_t_key pure module function get_string_t_array_with_string_t_key(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self type( string_t ), intent(in) :: key type( string_t ), intent(in) :: mold (:) Return Value type( string_t ), allocatable, (:) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html is_allocated elemental module function is_allocated(self) result(string_allocated) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html string_t_cat_character pure module function string_t_cat_character(lhs, rhs) result(lhs_cat_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html string_t_cat_string_t pure module function string_t_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html string_t_eq_character elemental module function string_t_eq_character(lhs, rhs) result(lhs_eq_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html string_t_eq_string_t elemental module function string_t_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html string_t_ne_character elemental module function string_t_ne_character(lhs, rhs) result(lhs_ne_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html string_t_ne_string_t elemental module function string_t_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html strings_with_character_separator pure module function strings_with_character_separator(strings, separator) result(sv) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) character(len=*), intent(in) :: separator Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html strings_with_comma_separator pure module function strings_with_comma_separator(strings) result(csv) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_string_s.html strings_with_string_t_separator pure module function strings_with_string_t_separator(strings, separator) result(sv) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) type( string_t ), intent(in) :: separator Return Value type( string_t )","tags":"","url":"module/julienne_string_s.html"},{"title":"julienne_file_s – Julienne","text":"Uses assert_m iso_fortran_env Ancestors: julienne_file_m module~~julienne_file_s~~UsesGraph module~julienne_file_s julienne_file_s assert_m assert_m module~julienne_file_s->assert_m iso_fortran_env iso_fortran_env module~julienne_file_s->iso_fortran_env module~julienne_file_m julienne_file_m module~julienne_file_s->module~julienne_file_m module~julienne_string_m julienne_string_m module~julienne_file_m->module~julienne_string_m module~julienne_string_m->assert_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_file_s.html from_file_with_character_name module function from_file_with_character_name(file_name) result(file_object) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: file_name Return Value type( file_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_file_s.html from_file_with_string_name module function from_file_with_string_name(file_name) result(file_object) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: file_name Return Value type( file_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_file_s.html from_lines module function from_lines(lines) result(file_object) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lines (:) Return Value type( file_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_file_s.html lines pure module function lines(self) result(my_lines) Interface → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self Return Value type( string_t ), allocatable, (:) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_file_s.html write_to_character_file_name impure elemental module subroutine write_to_character_file_name(self, file_name) Interface → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self character(len=*), intent(in) :: file_name module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_file_s.html write_to_output_unit module subroutine write_to_output_unit(self) Interface → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_file_s.html write_to_string_file_name impure elemental module subroutine write_to_string_file_name(self, file_name) Interface → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self type( string_t ), intent(in) :: file_name","tags":"","url":"module/julienne_file_s.html"},{"title":"julienne_test_result_s – Julienne","text":"Uses julienne_user_defined_collectives_m Ancestors: julienne_test_result_m module~~julienne_test_result_s~~UsesGraph module~julienne_test_result_s julienne_test_result_s module~julienne_test_result_m julienne_test_result_m module~julienne_test_result_s->module~julienne_test_result_m module~julienne_user_defined_collectives_m julienne_user_defined_collectives_m module~julienne_test_result_s->module~julienne_user_defined_collectives_m module~julienne_string_m julienne_string_m module~julienne_test_result_m->module~julienne_string_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_test_result_m->module~julienne_test_diagnosis_m assert_m assert_m module~julienne_string_m->assert_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding module~julienne_test_diagnosis_m->module~julienne_string_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_result_s.html characterize pure module function characterize(self) result(characterization) Interface → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value character(len=:), allocatable module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_result_s.html construct_from_character elemental module function construct_from_character(description, diagnosis) result(test_result) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description type( test_diagnosis_t ), intent(in), optional :: diagnosis Return Value type( test_result_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_result_s.html construct_from_string elemental module function construct_from_string(description, diagnosis) result(test_result) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description type( test_diagnosis_t ), intent(in), optional :: diagnosis Return Value type( test_result_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_result_s.html description_contains_characters elemental module function description_contains_characters(self, substring) result(substring_found) Interface → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_result_s.html description_contains_string elemental module function description_contains_string(self, substring) result(substring_found) Interface → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_result_s.html passed impure elemental module function passed(self) result(test_passed) Interface → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_result_s.html skipped impure elemental module function skipped(self) result(test_skipped) Interface → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value logical","tags":"","url":"module/julienne_test_result_s.html"},{"title":"julienne_github_ci_s – Julienne","text":"Uses Ancestors: julienne_github_ci_m module~~julienne_github_ci_s~~UsesGraph module~julienne_github_ci_s julienne_github_ci_s module~julienne_github_ci_m julienne_github_ci_m module~julienne_github_ci_s->module~julienne_github_ci_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_github_ci_s.html GitHub_CI module function GitHub_CI() Interface → Arguments None Return Value logical","tags":"","url":"module/julienne_github_ci_s.html"},{"title":"julienne_test_diagnosis_s – Julienne","text":"Uses julienne_string_m assert_m Ancestors: julienne_test_diagnosis_m module~~julienne_test_diagnosis_s~~UsesGraph module~julienne_test_diagnosis_s julienne_test_diagnosis_s assert_m assert_m module~julienne_test_diagnosis_s->assert_m module~julienne_string_m julienne_string_m module~julienne_test_diagnosis_s->module~julienne_string_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_test_diagnosis_s->module~julienne_test_diagnosis_m module~julienne_string_m->assert_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding module~julienne_test_diagnosis_m->module~julienne_string_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html aggregate_diagnosis pure module function aggregate_diagnosis(diagnoses) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: diagnoses (..) Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html and elemental module function and(lhs, rhs) result(diagnosis) Arguments Type Intent Optional Attributes Name type( test_diagnosis_t ), intent(in) :: lhs type( test_diagnosis_t ), intent(in) :: rhs Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html approximates_double_precision elemental module function approximates_double_precision(actual, expected) result(operands) Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected Return Value type( operands_t (double_precision)) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html approximates_real elemental module function approximates_real(actual, expected) result(operands) Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected Return Value type( operands_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html construct_from_character elemental module function construct_from_character(test_passed, diagnostics_string) result(test_diagnosis) Arguments Type Intent Optional Attributes Name logical, intent(in) :: test_passed character(len=*), intent(in) :: diagnostics_string Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html construct_from_string_t elemental module function construct_from_string_t(test_passed, diagnostics_string) result(test_diagnosis) Arguments Type Intent Optional Attributes Name logical, intent(in) :: test_passed type( string_t ), intent(in) :: diagnostics_string Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html diagnostics_string elemental module function diagnostics_string(self) result(string_) Interface → Arguments Type Intent Optional Attributes Name class( test_diagnosis_t ), intent(in) :: self Return Value type( string_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html equals_expected_integer elemental module function equals_expected_integer(actual, expected) result(test_diagnosis) Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html greater_than_double elemental module function greater_than_double(actual, expected_floor) result(test_diagnosis) Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected_floor Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html greater_than_integer elemental module function greater_than_integer(actual, expected_floor) result(test_diagnosis) Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_floor Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html greater_than_or_equal_to_integer elemental module function greater_than_or_equal_to_integer(actual, expected_min) result(test_diagnosis) Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_min Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html greater_than_real elemental module function greater_than_real(actual, expected_floor) result(test_diagnosis) Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected_floor Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html less_than_double elemental module function less_than_double(actual, expected_ceiling) result(test_diagnosis) Arguments Type Intent Optional Attributes Name double precision, intent(in) :: actual double precision, intent(in) :: expected_ceiling Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html less_than_integer elemental module function less_than_integer(actual, expected_ceiling) result(test_diagnosis) Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_ceiling Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html less_than_or_equal_to_integer elemental module function less_than_or_equal_to_integer(actual, expected_max) result(test_diagnosis) Arguments Type Intent Optional Attributes Name integer, intent(in) :: actual integer, intent(in) :: expected_max Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html less_than_real elemental module function less_than_real(actual, expected_ceiling) result(test_diagnosis) Arguments Type Intent Optional Attributes Name real, intent(in) :: actual real, intent(in) :: expected_ceiling Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html test_passed elemental module function test_passed(self) result(passed) Interface → Arguments Type Intent Optional Attributes Name class( test_diagnosis_t ), intent(in) :: self Return Value logical module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html within_double_precision elemental module function within_double_precision(operands, tolerance) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( operands_t (double_precision)), intent(in) :: operands double precision, intent(in) :: tolerance Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html within_double_precision_fraction elemental module function within_double_precision_fraction(operands, fractional_tolerance) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( operands_t (double_precision)), intent(in) :: operands double precision, intent(in) :: fractional_tolerance Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html within_double_precision_percentage elemental module function within_double_precision_percentage(operands, percentage_tolerance) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( operands_t (double_precision)), intent(in) :: operands double precision, intent(in) :: percentage_tolerance Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html within_real elemental module function within_real(operands, tolerance) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( operands_t ), intent(in) :: operands real, intent(in) :: tolerance Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html within_real_fraction elemental module function within_real_fraction(operands, fractional_tolerance) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( operands_t ), intent(in) :: operands real, intent(in) :: fractional_tolerance Return Value type( test_diagnosis_t ) module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_diagnosis_s.html within_real_percentage elemental module function within_real_percentage(operands, percentage_tolerance) result(test_diagnosis) Arguments Type Intent Optional Attributes Name type( operands_t ), intent(in) :: operands real, intent(in) :: percentage_tolerance Return Value type( test_diagnosis_t )","tags":"","url":"module/julienne_test_diagnosis_s.html"},{"title":"julienne_test_s – Julienne","text":"Uses Ancestors: julienne_test_m module~~julienne_test_s~~UsesGraph module~julienne_test_s julienne_test_s module~julienne_test_m julienne_test_m module~julienne_test_s->module~julienne_test_m module~julienne_command_line_m julienne_command_line_m module~julienne_test_m->module~julienne_command_line_m module~julienne_test_result_m julienne_test_result_m module~julienne_test_m->module~julienne_test_result_m module~julienne_user_defined_collectives_m julienne_user_defined_collectives_m module~julienne_test_m->module~julienne_user_defined_collectives_m module~julienne_string_m julienne_string_m module~julienne_test_result_m->module~julienne_string_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_test_result_m->module~julienne_test_diagnosis_m assert_m assert_m module~julienne_string_m->assert_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding module~julienne_test_diagnosis_m->module~julienne_string_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/julienne/julienne/doc/html/module/julienne_test_s.html report module subroutine report(test, passes, tests, skips) Interface → Arguments Type Intent Optional Attributes Name class( test_t ), intent(in) :: test integer, intent(inout) :: passes integer, intent(inout) :: tests integer, intent(inout) :: skips","tags":"","url":"module/julienne_test_s.html"},{"title":"create_markdown_table – Julienne","text":"Uses iso_c_binding julienne_string_m iso_fortran_env program~~create_markdown_table~~UsesGraph program~create_markdown_table create_markdown_table iso_c_binding iso_c_binding program~create_markdown_table->iso_c_binding iso_fortran_env iso_fortran_env program~create_markdown_table->iso_fortran_env module~julienne_string_m julienne_string_m program~create_markdown_table->module~julienne_string_m module~julienne_string_m->iso_c_binding assert_m assert_m module~julienne_string_m->assert_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. This program demonstrates \n1. The use of the string_t constructor function to encapsulate a ragged-edged array of character values.\n2. The use of the separated-values operator(.sv.) to form one string by concatenating the elements of a\n  string_t array and adding user-designated separators between each resulting substring.\n3. The use of the elemental type-bound procedure \"bracket\" to add preceding and trailing delimiters to all\n   elements of a string_t array.\nRunning the program with a command of the form \"fpm run --example create-markdown-table\" without quotes\nshould produce a table similar to the following with \"flang\" replaced by the name of the compiler if a\ndifferent compiler is used:\n|compiler \\ kind|default|c_size_t|c_int64_t|c_intptr_t|\n|-|-|-|-|-|\n|flang|4|8|8|8| Calls program~~create_markdown_table~~CallsGraph program~create_markdown_table create_markdown_table body body program~create_markdown_table->body header header program~create_markdown_table->header proc~compiler compiler program~create_markdown_table->proc~compiler proc~markdown_table markdown_table program~create_markdown_table->proc~markdown_table string string program~create_markdown_table->string table_lines table_lines program~create_markdown_table->table_lines interface~bracket string_t%bracket proc~markdown_table->interface~bracket Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Functions pure function compiler () Arguments None Return Value type( string_t ) pure function markdown_table (row_header, column_header, body_cells, side_borders) result(lines) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: row_header (first_body_row:) type( string_t ), intent(in) :: column_header (:) type( string_t ), intent(in) :: body_cells (first_body_row:,:) logical, intent(in) :: side_borders Return Value type( string_t ), (size(body_cells,1)+rank(column_header)+num_rule_lines)","tags":"","url":"program/create_markdown_table.html"},{"title":"get_command_line_flag_value – Julienne","text":"Uses julienne_m program~~get_command_line_flag_value~~UsesGraph program~get_command_line_flag_value get_command_line_flag_value module~julienne_m julienne_m program~get_command_line_flag_value->module~julienne_m module~julienne_bin_m julienne_bin_m module~julienne_m->module~julienne_bin_m module~julienne_command_line_m julienne_command_line_m module~julienne_m->module~julienne_command_line_m module~julienne_file_m julienne_file_m module~julienne_m->module~julienne_file_m module~julienne_formats_m julienne_formats_m module~julienne_m->module~julienne_formats_m module~julienne_github_ci_m julienne_github_ci_m module~julienne_m->module~julienne_github_ci_m module~julienne_string_m julienne_string_m module~julienne_m->module~julienne_string_m module~julienne_test_description_m julienne_test_description_m module~julienne_m->module~julienne_test_description_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_m->module~julienne_test_diagnosis_m module~julienne_test_m julienne_test_m module~julienne_m->module~julienne_test_m module~julienne_test_result_m julienne_test_result_m module~julienne_m->module~julienne_test_result_m module~julienne_vector_test_description_m julienne_vector_test_description_m module~julienne_m->module~julienne_vector_test_description_m module~julienne_file_m->module~julienne_string_m assert_m assert_m module~julienne_string_m->assert_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding module~julienne_test_description_m->module~julienne_string_m module~julienne_test_description_m->module~julienne_test_diagnosis_m module~julienne_test_description_m->module~julienne_test_result_m module~julienne_test_diagnosis_m->module~julienne_string_m module~julienne_test_m->module~julienne_command_line_m module~julienne_test_m->module~julienne_test_result_m module~julienne_user_defined_collectives_m julienne_user_defined_collectives_m module~julienne_test_m->module~julienne_user_defined_collectives_m module~julienne_test_result_m->module~julienne_string_m module~julienne_test_result_m->module~julienne_test_diagnosis_m module~julienne_vector_test_description_m->module~julienne_string_m module~julienne_vector_test_description_m->module~julienne_test_diagnosis_m module~julienne_vector_test_description_m->module~julienne_test_result_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. This program demonstrates how to find the value of a command-line flag.  Running this program\nas follows should print 'foo=bar' without quotes: fpm run --example get-command-line-flag-value -- --foo bar Running the above command either without bar or without \"--foo bar\" should print an indication the message \"flag '--foo' not present or present with no value\".\nwas provided. Calls program~~get_command_line_flag_value~~CallsGraph program~get_command_line_flag_value get_command_line_flag_value interface~flag_value command_line_t%flag_value program~get_command_line_flag_value->interface~flag_value Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( command_line_t ) :: command_line character(len=:), allocatable :: foo_value","tags":"","url":"program/get_command_line_flag_value.html"},{"title":"check_for_command_line_argument – Julienne","text":"Uses julienne_m program~~check_for_command_line_argument~~UsesGraph program~check_for_command_line_argument check_for_command_line_argument module~julienne_m julienne_m program~check_for_command_line_argument->module~julienne_m module~julienne_bin_m julienne_bin_m module~julienne_m->module~julienne_bin_m module~julienne_command_line_m julienne_command_line_m module~julienne_m->module~julienne_command_line_m module~julienne_file_m julienne_file_m module~julienne_m->module~julienne_file_m module~julienne_formats_m julienne_formats_m module~julienne_m->module~julienne_formats_m module~julienne_github_ci_m julienne_github_ci_m module~julienne_m->module~julienne_github_ci_m module~julienne_string_m julienne_string_m module~julienne_m->module~julienne_string_m module~julienne_test_description_m julienne_test_description_m module~julienne_m->module~julienne_test_description_m module~julienne_test_diagnosis_m julienne_test_diagnosis_m module~julienne_m->module~julienne_test_diagnosis_m module~julienne_test_m julienne_test_m module~julienne_m->module~julienne_test_m module~julienne_test_result_m julienne_test_result_m module~julienne_m->module~julienne_test_result_m module~julienne_vector_test_description_m julienne_vector_test_description_m module~julienne_m->module~julienne_vector_test_description_m module~julienne_file_m->module~julienne_string_m assert_m assert_m module~julienne_string_m->assert_m iso_c_binding iso_c_binding module~julienne_string_m->iso_c_binding module~julienne_test_description_m->module~julienne_string_m module~julienne_test_description_m->module~julienne_test_diagnosis_m module~julienne_test_description_m->module~julienne_test_result_m module~julienne_test_diagnosis_m->module~julienne_string_m module~julienne_test_m->module~julienne_command_line_m module~julienne_test_m->module~julienne_test_result_m module~julienne_user_defined_collectives_m julienne_user_defined_collectives_m module~julienne_test_m->module~julienne_user_defined_collectives_m module~julienne_test_result_m->module~julienne_string_m module~julienne_test_result_m->module~julienne_test_diagnosis_m module~julienne_vector_test_description_m->module~julienne_string_m module~julienne_vector_test_description_m->module~julienne_test_diagnosis_m module~julienne_vector_test_description_m->module~julienne_test_result_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. This program shows how to use the command_line_t derived type to check whether a \ncommand-line argument is present.  Running this program as follows with the command\nshould print an indication that the command-line argument is present: fpm run --example check-for-command-line-argument -- --some-argument Running the program without the argument or with the argument spelled differently\nshould print an indication that the argument is not present: fpm run --example check-for-command-line-argument Calls program~~check_for_command_line_argument~~CallsGraph program~check_for_command_line_argument check_for_command_line_argument interface~argument_present command_line_t%argument_present program~check_for_command_line_argument->interface~argument_present Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( command_line_t ) :: command_line","tags":"","url":"program/check_for_command_line_argument.html"},{"title":"julienne_test_diagnosis_m.F90 – Julienne","text":"This file depends on sourcefile~~julienne_test_diagnosis_m.f90~~EfferentGraph sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_string_m.f90 julienne_string_m.f90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~julienne_test_diagnosis_m.f90~~AfferentGraph sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_vector_test_description_m.f90 julienne_vector_test_description_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_vector_test_description_m.f90 sourcefile~julienne_test_m.f90 julienne_test_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_diagnosis_s.f90 julienne_test_diagnosis_s.F90 sourcefile~julienne_test_diagnosis_s.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~check-for-command-line-argument.f90 check-for-command-line-argument.f90 sourcefile~check-for-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-command-line-flag-value.f90 get-command-line-flag-value.f90 sourcefile~get-command-line-flag-value.f90->sourcefile~julienne_m.f90 sourcefile~julienne_test_description_s.f90 julienne_test_description_s.F90 sourcefile~julienne_test_description_s.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_result_s.f90 julienne_test_result_s.f90 sourcefile~julienne_test_result_s.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_vector_test_description_s.f90 julienne_vector_test_description_s.F90 sourcefile~julienne_vector_test_description_s.f90->sourcefile~julienne_vector_test_description_m.f90 sourcefile~julienne_test_s.f90 julienne_test_s.F90 sourcefile~julienne_test_s.f90->sourcefile~julienne_test_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt #include \"language-support.F90\" module julienne_test_diagnosis_m !! Define an abstraction for describing test outcomes and diagnostic information use julienne_string_m , only : string_t implicit none private public :: test_diagnosis_t public :: operator (. all .) public :: operator (. and .) public :: operator (. approximates .) public :: operator (. within .) public :: operator (. withinFraction .) public :: operator (. withinPercentage .) public :: operator (. equalsExpected .) public :: operator (. lessThan .) public :: operator (. lessThanOrEqualTo .) public :: operator (. greaterThan .) public :: operator (. greaterThanOrEqualTo .) type test_diagnosis_t !! Encapsulate test outcome and diagnostic information private logical test_passed_ character ( len = :), allocatable :: diagnostics_string_ contains procedure test_passed procedure diagnostics_string end type integer , parameter :: default_real = kind ( 1. ), double_precision = kind ( 1 D0 ) #if HAVE_DERIVED_TYPE_KIND_PARAMETERS type operands_t ( k ) integer , kind :: k = default_real real ( k ) actual , expected end type #else type operands_t real actual , expected end type type double_precision_operands_t double precision actual , expected end type #endif interface operator (. all .) pure module function aggregate_diagnosis ( diagnoses ) result ( diagnosis ) implicit none type ( test_diagnosis_t ), intent ( in ) :: diagnoses (..) type ( test_diagnosis_t ) diagnosis end function end interface interface operator (. and .) elemental module function and ( lhs , rhs ) result ( diagnosis ) implicit none type ( test_diagnosis_t ), intent ( in ) :: lhs , rhs type ( test_diagnosis_t ) diagnosis end function end interface interface operator (. approximates .) elemental module function approximates_real ( actual , expected ) result ( operands ) implicit none real , intent ( in ) :: actual , expected type ( operands_t ) operands end function elemental module function approximates_double_precision ( actual , expected ) result ( operands ) implicit none double precision , intent ( in ) :: actual , expected #if HAVE_DERIVED_TYPE_KIND_PARAMETERS type ( operands_t ( double_precision )) operands #else type ( double_precision_operands_t ) operands #endif end function end interface interface operator (. equalsExpected .) elemental module function equals_expected_integer ( actual , expected ) result ( test_diagnosis ) implicit none integer , intent ( in ) :: actual , expected type ( test_diagnosis_t ) test_diagnosis end function end interface interface operator (. lessThan .) elemental module function less_than_real ( actual , expected_ceiling ) result ( test_diagnosis ) implicit none real , intent ( in ) :: actual , expected_ceiling type ( test_diagnosis_t ) test_diagnosis end function elemental module function less_than_double ( actual , expected_ceiling ) result ( test_diagnosis ) implicit none double precision , intent ( in ) :: actual , expected_ceiling type ( test_diagnosis_t ) test_diagnosis end function elemental module function less_than_integer ( actual , expected_ceiling ) result ( test_diagnosis ) implicit none integer , intent ( in ) :: actual , expected_ceiling type ( test_diagnosis_t ) test_diagnosis end function end interface interface operator (. lessThanOrEqualTo .) elemental module function less_than_or_equal_to_integer ( actual , expected_max ) result ( test_diagnosis ) implicit none integer , intent ( in ) :: actual , expected_max type ( test_diagnosis_t ) test_diagnosis end function end interface interface operator (. greaterThanOrEqualTo .) elemental module function greater_than_or_equal_to_integer ( actual , expected_min ) result ( test_diagnosis ) implicit none integer , intent ( in ) :: actual , expected_min type ( test_diagnosis_t ) test_diagnosis end function end interface interface operator (. greaterThan .) elemental module function greater_than_real ( actual , expected_floor ) result ( test_diagnosis ) implicit none real , intent ( in ) :: actual , expected_floor type ( test_diagnosis_t ) test_diagnosis end function elemental module function greater_than_double ( actual , expected_floor ) result ( test_diagnosis ) implicit none double precision , intent ( in ) :: actual , expected_floor type ( test_diagnosis_t ) test_diagnosis end function elemental module function greater_than_integer ( actual , expected_floor ) result ( test_diagnosis ) implicit none integer , intent ( in ) :: actual , expected_floor type ( test_diagnosis_t ) test_diagnosis end function end interface interface operator (. within .) elemental module function within_real ( operands , tolerance ) result ( test_diagnosis ) implicit none type ( operands_t ), intent ( in ) :: operands real , intent ( in ) :: tolerance type ( test_diagnosis_t ) test_diagnosis end function elemental module function within_double_precision ( operands , tolerance ) result ( test_diagnosis ) implicit none #if HAVE_DERIVED_TYPE_KIND_PARAMETERS type ( operands_t ( double_precision )), intent ( in ) :: operands #else type ( double_precision_operands_t ), intent ( in ) :: operands #endif double precision , intent ( in ) :: tolerance type ( test_diagnosis_t ) test_diagnosis end function end interface interface operator (. withinFraction .) elemental module function within_real_fraction ( operands , fractional_tolerance ) result ( test_diagnosis ) implicit none type ( operands_t ), intent ( in ) :: operands real , intent ( in ) :: fractional_tolerance type ( test_diagnosis_t ) test_diagnosis end function elemental module function within_double_precision_fraction ( operands , fractional_tolerance ) result ( test_diagnosis ) implicit none #if HAVE_DERIVED_TYPE_KIND_PARAMETERS type ( operands_t ( double_precision )), intent ( in ) :: operands #else type ( double_precision_operands_t ), intent ( in ) :: operands #endif double precision , intent ( in ) :: fractional_tolerance type ( test_diagnosis_t ) test_diagnosis end function end interface interface operator (. withinPercentage .) elemental module function within_real_percentage ( operands , percentage_tolerance ) result ( test_diagnosis ) implicit none type ( operands_t ), intent ( in ) :: operands real , intent ( in ) :: percentage_tolerance type ( test_diagnosis_t ) test_diagnosis end function elemental module function within_double_precision_percentage ( operands , percentage_tolerance ) result ( test_diagnosis ) implicit none #if HAVE_DERIVED_TYPE_KIND_PARAMETERS type ( operands_t ( double_precision )), intent ( in ) :: operands #else type ( double_precision_operands_t ), intent ( in ) :: operands #endif double precision , intent ( in ) :: percentage_tolerance type ( test_diagnosis_t ) test_diagnosis end function end interface interface test_diagnosis_t elemental module function construct_from_string_t ( test_passed , diagnostics_string ) result ( test_diagnosis ) !! The result is a test_diagnosis_t object with the components defined by the dummy arguments implicit none logical , intent ( in ) :: test_passed type ( string_t ), intent ( in ) :: diagnostics_string type ( test_diagnosis_t ) test_diagnosis end function elemental module function construct_from_character ( test_passed , diagnostics_string ) result ( test_diagnosis ) !! The result is a test_diagnosis_t object with the components defined by the dummy arguments implicit none logical , intent ( in ) :: test_passed character ( len =* ), intent ( in ) :: diagnostics_string type ( test_diagnosis_t ) test_diagnosis end function end interface interface elemental module function test_passed ( self ) result ( passed ) !! The result is .true. if the test passed and false otherwise implicit none class ( test_diagnosis_t ), intent ( in ) :: self logical passed end function elemental module function diagnostics_string ( self ) result ( string_ ) !! The result is a string describing the condition(s) that caused a test failure implicit none class ( test_diagnosis_t ), intent ( in ) :: self type ( string_t ) string_ end function end interface end module julienne_test_diagnosis_m","tags":"","url":"sourcefile/julienne_test_diagnosis_m.f90.html"},{"title":"julienne_m.f90 – Julienne","text":"This file depends on sourcefile~~julienne_m.f90~~EfferentGraph sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_bin_m.f90 julienne_bin_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_bin_m.f90 sourcefile~julienne_command_line_m.f90 julienne_command_line_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_file_m.f90 julienne_file_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_file_m.f90 sourcefile~julienne_formats_m.f90 julienne_formats_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_formats_m.f90 sourcefile~julienne_github_ci_m.f90 julienne_github_ci_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_github_ci_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_m.f90 julienne_test_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_vector_test_description_m.f90 julienne_vector_test_description_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_vector_test_description_m.f90 sourcefile~julienne_file_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_user_defined_collectives_m.f90 julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_test_result_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~julienne_m.f90~~AfferentGraph sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~check-for-command-line-argument.f90 check-for-command-line-argument.f90 sourcefile~check-for-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-command-line-flag-value.f90 get-command-line-flag-value.f90 sourcefile~get-command-line-flag-value.f90->sourcefile~julienne_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt module julienne_m !! Global aggregation of all public entities use julienne_bin_m , only : bin_t use julienne_command_line_m , only : command_line_t use julienne_file_m , only : file_t use julienne_github_ci_m , only : github_ci use julienne_formats_m , only : separated_values , csv use julienne_string_m , only : string_t , operator (. cat .), operator (. csv .), operator (. sv .), array_of_strings use julienne_test_m , only : test_t , test_description_substring use julienne_test_description_m , only : test_description_t , diagnosis_function_i use julienne_test_diagnosis_m , only : & test_diagnosis_t & , operator (. all .) & , operator (. and .) & , operator (. approximates .) & , operator (. within .) & , operator (. equalsExpected .) & , operator (. lessThan .) & , operator (. lessThanOrEqualTo .) & , operator (. greaterThan .) & , operator (. greaterThanOrEqualTo .) & , operator (. withinFraction .) & , operator (. withinPercentage .) use julienne_test_result_m , only : test_result_t use julienne_vector_test_description_m , only : vector_test_description_t , vector_diagnosis_function_i implicit none end module julienne_m","tags":"","url":"sourcefile/julienne_m.f90.html"},{"title":"julienne_test_description_s.F90 – Julienne","text":"This file depends on sourcefile~~julienne_test_description_s.f90~~EfferentGraph sourcefile~julienne_test_description_s.f90 julienne_test_description_s.F90 sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_test_description_s.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_test_diagnosis_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 20242-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt #include \"assert_macros.h\" submodule ( julienne_test_description_m ) julienne_test_description_s use assert_m implicit none contains module procedure construct_from_characters test_description % description_ = description if ( present ( diagnosis_function )) test_description % diagnosis_function_ => diagnosis_function call_assert ( allocated ( test_description % description_ )) end procedure module procedure construct_from_string test_description % description_ = description if ( present ( diagnosis_function )) test_description % diagnosis_function_ => diagnosis_function call_assert ( allocated ( test_description % description_ )) end procedure module procedure run call_assert ( allocated ( self % description_ )) if ( associated ( self % diagnosis_function_ )) then test_result = test_result_t ( self % description_ , self % diagnosis_function_ ()) else test_result = test_result_t ( self % description_ ) end if end procedure module procedure contains_string_t call_assert ( allocated ( self % description_ )) match = index ( self % description_ , substring % string ()) /= 0 end procedure module procedure contains_characters call_assert ( allocated ( self % description_ )) match = index ( self % description_ , substring ) /= 0 end procedure module procedure equals call_assert ( allocated ( lhs % description_ ) . and . allocated ( rhs % description_ )) lhs_eq_rhs = ( lhs % description_ == rhs % description_ ) if ( associated ( lhs % diagnosis_function_ ) . and . associated ( rhs % diagnosis_function_ )) & lhs_eq_rhs = lhs_eq_rhs . and . associated ( lhs % diagnosis_function_ , rhs % diagnosis_function_ ) end procedure end submodule julienne_test_description_s","tags":"","url":"sourcefile/julienne_test_description_s.f90.html"},{"title":"julienne_test_result_m.f90 – Julienne","text":"This file depends on sourcefile~~julienne_test_result_m.f90~~EfferentGraph sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~julienne_test_result_m.f90~~AfferentGraph sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_m.f90 julienne_test_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_vector_test_description_m.f90 julienne_vector_test_description_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_vector_test_description_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_result_s.f90 julienne_test_result_s.f90 sourcefile~julienne_test_result_s.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~check-for-command-line-argument.f90 check-for-command-line-argument.f90 sourcefile~check-for-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-command-line-flag-value.f90 get-command-line-flag-value.f90 sourcefile~get-command-line-flag-value.f90->sourcefile~julienne_m.f90 sourcefile~julienne_test_description_s.f90 julienne_test_description_s.F90 sourcefile~julienne_test_description_s.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_s.f90 julienne_test_s.F90 sourcefile~julienne_test_s.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_vector_test_description_s.f90 julienne_vector_test_description_s.F90 sourcefile~julienne_vector_test_description_s.f90->sourcefile~julienne_vector_test_description_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt module julienne_test_result_m !! Define an abstraction for describing test intentions and results use julienne_string_m , only : string_t use julienne_test_diagnosis_m , only : test_diagnosis_t implicit none private public :: test_result_t type test_result_t !! Encapsulate test descriptions and outcomes private type ( string_t ) :: description_ type ( test_diagnosis_t ), allocatable :: diagnosis_ contains procedure :: characterize procedure :: passed procedure :: skipped generic :: description_contains => description_contains_string , description_contains_characters procedure , private :: description_contains_string , description_contains_characters end type interface test_result_t elemental module function construct_from_string ( description , diagnosis ) result ( test_result ) !! The result is a test_result_t object with the components defined by the dummy arguments implicit none type ( string_t ), intent ( in ) :: description type ( test_diagnosis_t ), intent ( in ), optional :: diagnosis type ( test_result_t ) test_result end function elemental module function construct_from_character ( description , diagnosis ) result ( test_result ) !! The result is a test_result_t object with the components defined by the dummy arguments implicit none character ( len =* ), intent ( in ) :: description type ( test_diagnosis_t ), intent ( in ), optional :: diagnosis type ( test_result_t ) test_result end function end interface interface pure module function characterize ( self ) result ( characterization ) !! The result is a character description of the test and its outcome implicit none class ( test_result_t ), intent ( in ) :: self character ( len = :), allocatable :: characterization end function impure elemental module function passed ( self ) result ( test_passed ) !! The result is true if and only if the test passed on all images implicit none class ( test_result_t ), intent ( in ) :: self logical test_passed end function impure elemental module function skipped ( self ) result ( test_skipped ) !! The result is true if and only if the test result contains no diagnosis on any image implicit none class ( test_result_t ), intent ( in ) :: self logical test_skipped end function elemental module function description_contains_string ( self , substring ) result ( substring_found ) !! The result is true if and only if the test description contains the substring implicit none class ( test_result_t ), intent ( in ) :: self type ( string_t ), intent ( in ) :: substring logical substring_found end function elemental module function description_contains_characters ( self , substring ) result ( substring_found ) !! The result is true if and only if the test description contains the substring implicit none class ( test_result_t ), intent ( in ) :: self character ( len =* ), intent ( in ) :: substring logical substring_found end function end interface end module julienne_test_result_m","tags":"","url":"sourcefile/julienne_test_result_m.f90.html"},{"title":"julienne_command_line_m.f90 – Julienne","text":"Files dependent on this one sourcefile~~julienne_command_line_m.f90~~AfferentGraph sourcefile~julienne_command_line_m.f90 julienne_command_line_m.f90 sourcefile~julienne_command_line_s.f90 julienne_command_line_s.f90 sourcefile~julienne_command_line_s.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_test_m.f90 julienne_test_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~check-for-command-line-argument.f90 check-for-command-line-argument.f90 sourcefile~check-for-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-command-line-flag-value.f90 get-command-line-flag-value.f90 sourcefile~get-command-line-flag-value.f90->sourcefile~julienne_m.f90 sourcefile~julienne_test_s.f90 julienne_test_s.F90 sourcefile~julienne_test_s.f90->sourcefile~julienne_test_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt module julienne_command_line_m !! return command line argument information implicit none private public :: command_line_t type command_line_t contains procedure , nopass :: argument_present procedure , nopass :: flag_value end type interface module function argument_present ( acceptable_argument ) result ( found ) implicit none !! result is .true. only if a command-line argument matches an element of this function's argument character ( len =* ), intent ( in ) :: acceptable_argument (:) !! sample list: [character(len=len(<longest_argument>)):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"] !! where dashes support Linux/macOS, slashes support Windows, and <longest_argument> must be replaced !! by the longest list element (\"--benchmark\" above) logical found end function module function flag_value ( flag ) !! result = { the value passed immediately after a command-line flag if the flag is present or !!          { an empty string otherwise. implicit none character ( len =* ), intent ( in ) :: flag character ( len = :), allocatable :: flag_value end function end interface end module","tags":"","url":"sourcefile/julienne_command_line_m.f90.html"},{"title":"create-markdown-table.f90 – Julienne","text":"This file depends on sourcefile~~create-markdown-table.f90~~EfferentGraph sourcefile~create-markdown-table.f90 create-markdown-table.f90 sourcefile~julienne_string_m.f90 julienne_string_m.f90 sourcefile~create-markdown-table.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program create_markdown_table !! This program demonstrates !! 1. The use of the string_t constructor function to encapsulate a ragged-edged array of character values. !! 2. The use of the separated-values operator(.sv.) to form one string by concatenating the elements of a !!   string_t array and adding user-designated separators between each resulting substring. !! 3. The use of the elemental type-bound procedure \"bracket\" to add preceding and trailing delimiters to all !!    elements of a string_t array. !! Running the program with a command of the form \"fpm run --example create-markdown-table\" without quotes !! should produce a table similar to the following with \"flang\" replaced by the name of the compiler if a !! different compiler is used: !! |compiler \\ kind|default|c_size_t|c_int64_t|c_intptr_t| !! |-|-|-|-|-| !! |flang|4|8|8|8| use iso_fortran_env , only : compiler_version use iso_c_binding , only : c_size_t , c_int64_t , c_intptr_t use julienne_string_m , only : string_t , operator (. sv .) implicit none block integer row integer , parameter :: default_integer_kind = kind ( 0 ) integer , parameter :: body ( * , * ) = reshape ([ default_integer_kind , c_size_t , c_int64_t , c_intptr_t ], [ 1 , 4 ]) type ( string_t ), allocatable :: table_lines (:), header (:) header = & [ string_t ( \"compiler \\ kind\" ), string_t ( \"default\" ), string_t ( \"c_size_t\" ), string_t ( \"c_int64_t\" ), string_t ( \"c_intptr_t\" )] table_lines = markdown_table ( row_header = [ compiler ()], column_header = header , body_cells = string_t ( body ), side_borders = . true .) do row = 1 , size ( table_lines ) print '(a)' , table_lines ( row )% string () end do end block contains pure function markdown_table ( row_header , column_header , body_cells , side_borders ) result ( lines ) integer , parameter :: first_body_row = 3 type ( string_t ), intent ( in ) :: row_header ( first_body_row :), column_header (:), body_cells ( first_body_row :,:) logical , intent ( in ) :: side_borders character ( len = 1 ), parameter :: column_separator = \"|\" integer , parameter :: num_rule_lines = 1 type ( string_t ) lines ( size ( body_cells , 1 ) + rank ( column_header ) + num_rule_lines ) integer row , col if ( size ( column_header ) /= rank ( row_header ) + size ( body_cells , 2 )) error stop \"column size mismatch\" if ( size ( row_header ) /= size ( body_cells , 1 )) error stop \"row size mismatch\" lines ( 1 ) = column_header . sv . column_separator lines ( 2 ) = [( \"-\" , col = 1 , size ( column_header ))] . sv . column_separator do row = 3 , size ( lines ) lines ( row ) = [ row_header ( row ), body_cells ( row ,:)] . sv . column_separator end do if ( side_borders ) lines = lines % bracket ( column_separator ) end function pure function compiler () type ( string_t ) compiler associate ( compiler_identity => compiler_version ()) if ( index ( compiler_identity , \"GCC\" ) /= 0 ) then compiler = string_t ( \"gfortran\" ) else if ( index ( compiler_identity , \"NAG\" ) /= 0 ) then compiler = string_t ( \"nagfor\" ) else if ( index ( compiler_identity , \"flang\" ) /= 0 ) then compiler = string_t ( \"flang\" ) else if ( index ( compiler_identity , \"Intel\" ) /= 0 ) then compiler = string_t ( \"ifx\" ) else error stop \"unreconized compiler: \" // compiler_identity end if end associate end function end program","tags":"","url":"sourcefile/create-markdown-table.f90.html"},{"title":"julienne_user_defined_collectives_s.F90 – Julienne","text":"This file depends on sourcefile~~julienne_user_defined_collectives_s.f90~~EfferentGraph sourcefile~julienne_user_defined_collectives_s.f90 julienne_user_defined_collectives_s.F90 sourcefile~julienne_user_defined_collectives_m.f90 julienne_user_defined_collectives_m.f90 sourcefile~julienne_user_defined_collectives_s.f90->sourcefile~julienne_user_defined_collectives_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! !     (c) 2019-2020 Guide Star Engineering, LLC !     This Software was developed for the US Nuclear Regulatory Commission (US NRC) under contract !     \"Multi-Dimensional Physics Implementation into Fuel Analysis under Steady-state and Transients (FAST)\", !     contract # NRC-HQ-60-17-C-0007 ! submodule ( julienne_user_defined_collectives_m ) julienne_user_defined_collectives_s implicit none contains module procedure co_all #if HAVE_MULTI_IMAGE_SUPPORT call co_reduce ( boolean , both ) #endif contains pure function both ( lhs , rhs ) result ( lhs_and_rhs ) logical , intent ( in ) :: lhs , rhs logical lhs_and_rhs lhs_and_rhs = lhs . and . rhs end function end procedure end submodule julienne_user_defined_collectives_s","tags":"","url":"sourcefile/julienne_user_defined_collectives_s.f90.html"},{"title":"julienne_string_m.f90 – Julienne","text":"Files dependent on this one sourcefile~~julienne_string_m.f90~~AfferentGraph sourcefile~julienne_string_m.f90 julienne_string_m.f90 sourcefile~create-markdown-table.f90 create-markdown-table.f90 sourcefile~create-markdown-table.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_file_m.f90 julienne_file_m.f90 sourcefile~julienne_file_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_file_m.f90 sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_vector_test_description_m.f90 julienne_vector_test_description_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_vector_test_description_m.f90 sourcefile~julienne_test_m.f90 julienne_test_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_string_s.f90 julienne_string_s.F90 sourcefile~julienne_string_s.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_diagnosis_s.f90 julienne_test_diagnosis_s.F90 sourcefile~julienne_test_diagnosis_s.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_diagnosis_s.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~check-for-command-line-argument.f90 check-for-command-line-argument.f90 sourcefile~check-for-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-command-line-flag-value.f90 get-command-line-flag-value.f90 sourcefile~get-command-line-flag-value.f90->sourcefile~julienne_m.f90 sourcefile~julienne_file_s.f90 julienne_file_s.F90 sourcefile~julienne_file_s.f90->sourcefile~julienne_file_m.f90 sourcefile~julienne_test_description_s.f90 julienne_test_description_s.F90 sourcefile~julienne_test_description_s.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_result_s.f90 julienne_test_result_s.f90 sourcefile~julienne_test_result_s.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_vector_test_description_s.f90 julienne_vector_test_description_s.F90 sourcefile~julienne_vector_test_description_s.f90->sourcefile~julienne_vector_test_description_m.f90 sourcefile~julienne_test_s.f90 julienne_test_s.F90 sourcefile~julienne_test_s.f90->sourcefile~julienne_test_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt module julienne_string_m use assert_m , only : characterizable_t use iso_c_binding , only : c_bool implicit none private public :: string_t public :: array_of_strings ! construct 1D string_t array from a string containing delimited substrings public :: operator (. cat .) ! element-wise concatenation unary operator public :: operator (. csv .) ! comma-separated values unary operator public :: operator (. sv .) ! separated-values binary operator type , extends ( characterizable_t ) :: string_t private character ( len = :), allocatable :: string_ contains procedure :: as_character generic :: string => as_character procedure :: is_allocated procedure :: get_json_key procedure :: file_extension procedure :: base_name procedure :: bracket generic :: operator ( // ) => string_t_cat_string_t , string_t_cat_character , character_cat_string_t generic :: operator ( /= ) => string_t_ne_string_t , string_t_ne_character , character_ne_string_t generic :: operator ( == ) => string_t_eq_string_t , string_t_eq_character , character_eq_string_t generic :: assignment ( = ) => assign_string_t_to_character , assign_character_to_string_t generic :: get_json_value => get_string , get_string_t_array_with_character_key , get_string_t_array_with_string_t_key & , get_real , get_real_with_character_key & , get_character , get_character_with_character_key & , get_logical , get_logical_with_character_key & , get_real_array , get_real_array_with_character_key & , get_integer_array , get_integer_array_with_character_key & , get_integer , get_integer_with_character_key & , get_double_precision , get_double_precision_with_character_key & , get_double_precision_array , get_double_precision_array_with_character_key procedure , private :: get_real , get_real_with_character_key procedure , private :: get_string , get_string_t_array_with_character_key , get_string_t_array_with_string_t_key procedure , private :: get_logical , get_logical_with_character_key procedure , private :: get_integer , get_integer_with_character_key procedure , private :: get_real_array , get_real_array_with_character_key procedure , private :: get_integer_array , get_integer_array_with_character_key procedure , private :: get_character , get_character_with_character_key procedure , private :: get_double_precision , get_double_precision_with_character_key procedure , private :: get_double_precision_array , get_double_precision_array_with_character_key procedure , private :: string_t_ne_string_t , string_t_ne_character procedure , private :: string_t_eq_string_t , string_t_eq_character procedure , private :: assign_character_to_string_t procedure , private :: string_t_cat_string_t , string_t_cat_character procedure , private , pass ( rhs ) :: character_cat_string_t procedure , private , pass ( rhs ) :: character_ne_string_t procedure , private , pass ( rhs ) :: character_eq_string_t procedure , private , pass ( rhs ) :: assign_string_t_to_character end type interface string_t elemental module function from_characters ( string ) result ( new_string ) implicit none character ( len =* ), intent ( in ) :: string type ( string_t ) new_string end function elemental module function from_default_integer ( i ) result ( string ) implicit none integer , intent ( in ) :: i type ( string_t ) string end function elemental module function from_default_real ( x ) result ( string ) implicit none real , intent ( in ) :: x type ( string_t ) string end function elemental module function from_double_precision ( x ) result ( string ) implicit none double precision , intent ( in ) :: x type ( string_t ) string end function elemental module function from_default_logical ( b ) result ( string ) implicit none logical , intent ( in ) :: b type ( string_t ) string end function elemental module function from_logical_c_bool ( b ) result ( string ) implicit none logical ( c_bool ), intent ( in ) :: b type ( string_t ) string end function elemental module function from_default_complex ( z ) result ( string ) implicit none complex , intent ( in ) :: z type ( string_t ) string end function elemental module function from_double_precision_complex ( z ) result ( string ) implicit none complex ( kind = kind ( 1 D0 )), intent ( in ) :: z type ( string_t ) string end function end interface interface operator (. cat .) pure  module function concatenate_elements ( strings ) result ( concatenated_strings ) implicit none type ( string_t ), intent ( in ) :: strings (:) type ( string_t ) concatenated_strings end function end interface interface operator (. csv .) pure module function strings_with_comma_separator ( strings ) result ( csv ) implicit none type ( string_t ), intent ( in ) :: strings (:) type ( string_t ) csv end function pure module function characters_with_comma_separator ( strings ) result ( csv ) implicit none character ( len =* ), intent ( in ) :: strings (:) type ( string_t ) csv end function end interface interface operator (. sv .) pure module function strings_with_character_separator ( strings , separator ) result ( sv ) implicit none type ( string_t ) , intent ( in ) :: strings (:) character ( len =* ), intent ( in ) :: separator type ( string_t ) sv end function pure module function characters_with_character_separator ( strings , separator ) result ( sv ) implicit none character ( len =* ), intent ( in ) :: strings (:), separator type ( string_t ) sv end function pure module function characters_with_string_separator ( strings , separator ) result ( sv ) implicit none character ( len =* ), intent ( in ) :: strings (:) type ( string_t ) , intent ( in ) :: separator type ( string_t ) sv end function pure module function strings_with_string_t_separator ( strings , separator ) result ( sv ) implicit none type ( string_t ), intent ( in ) :: strings (:), separator type ( string_t ) sv end function end interface interface pure module function as_character ( self ) result ( raw_string ) implicit none class ( string_t ), intent ( in ) :: self character ( len = :), allocatable :: raw_string end function pure module function array_of_strings ( delimited_strings , delimiter ) result ( strings_array ) implicit none character ( len =* ), intent ( in ) :: delimited_strings , delimiter type ( string_t ), allocatable :: strings_array (:) end function elemental module function is_allocated ( self ) result ( string_allocated ) implicit none class ( string_t ), intent ( in ) :: self logical string_allocated end function elemental module function get_json_key ( self ) result ( unquoted_key ) implicit none class ( string_t ), intent ( in ) :: self type ( string_t ) unquoted_key end function elemental module function file_extension ( self ) result ( extension ) !! result contains all characters in file_name after the last dot (.) class ( string_t ), intent ( in ) :: self type ( string_t ) extension end function pure module function base_name ( self ) result ( base ) !! result contains all characters in file_name before the last dot (.) class ( string_t ), intent ( in ) :: self type ( string_t ) base end function pure module function get_real ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self , key real , intent ( in ) :: mold real value_ end function pure module function get_real_with_character_key ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self character ( len =* ), intent ( in ) :: key real , intent ( in ) :: mold real value_ end function pure module function get_double_precision ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self , key double precision , intent ( in ) :: mold double precision value_ end function pure module function get_double_precision_with_character_key ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self character ( len =* ), intent ( in ) :: key double precision , intent ( in ) :: mold double precision value_ end function pure module function get_double_precision_array ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self , key double precision , intent ( in ) :: mold (:) double precision , allocatable :: value_ (:) end function pure module function get_double_precision_array_with_character_key ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self character ( len =* ), intent ( in ) :: key double precision , intent ( in ) :: mold (:) double precision , allocatable :: value_ (:) end function pure module function get_character ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self , key character ( len =* ), intent ( in ) :: mold character ( len = :), allocatable :: value_ end function pure module function get_character_with_character_key ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self character ( len =* ), intent ( in ) :: key , mold character ( len = :), allocatable :: value_ end function elemental module function get_string ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self , key , mold type ( string_t ) :: value_ end function pure module function get_string_t_array_with_string_t_key ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self type ( string_t ), intent ( in ) :: key , mold (:) type ( string_t ), allocatable :: value_ (:) end function pure module function get_string_t_array_with_character_key ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self character ( len =* ), intent ( in ) :: key type ( string_t ), intent ( in ) :: mold (:) type ( string_t ), allocatable :: value_ (:) end function pure module function get_integer_with_character_key ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self character ( len =* ), intent ( in ) :: key integer , intent ( in ) :: mold integer value_ end function pure module function get_integer ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self , key integer , intent ( in ) :: mold integer value_ end function pure module function get_logical_with_character_key ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self character ( len =* ), intent ( in ) :: key logical , intent ( in ) :: mold logical value_ end function elemental module function get_logical ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self , key logical , intent ( in ) :: mold logical value_ end function pure module function get_integer_array_with_character_key ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self character ( len =* ), intent ( in ) :: key integer , intent ( in ) :: mold (:) integer , allocatable :: value_ (:) end function pure module function get_integer_array ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self , key integer , intent ( in ) :: mold (:) integer , allocatable :: value_ (:) end function pure module function get_real_array_with_character_key ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self character ( len =* ), intent ( in ) :: key real , intent ( in ) :: mold (:) real , allocatable :: value_ (:) end function pure module function get_real_array ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self , key real , intent ( in ) :: mold (:) real , allocatable :: value_ (:) end function elemental module function string_t_eq_string_t ( lhs , rhs ) result ( lhs_eq_rhs ) implicit none class ( string_t ), intent ( in ) :: lhs , rhs logical lhs_eq_rhs end function elemental module function string_t_eq_character ( lhs , rhs ) result ( lhs_eq_rhs ) implicit none class ( string_t ), intent ( in ) :: lhs character ( len =* ), intent ( in ) :: rhs logical lhs_eq_rhs end function elemental module function character_eq_string_t ( lhs , rhs ) result ( lhs_eq_rhs ) implicit none class ( string_t ), intent ( in ) :: rhs character ( len =* ), intent ( in ) :: lhs logical lhs_eq_rhs end function elemental module function string_t_ne_string_t ( lhs , rhs ) result ( lhs_ne_rhs ) implicit none class ( string_t ), intent ( in ) :: lhs , rhs logical lhs_ne_rhs end function elemental module function string_t_ne_character ( lhs , rhs ) result ( lhs_ne_rhs ) implicit none class ( string_t ), intent ( in ) :: lhs character ( len =* ), intent ( in ) :: rhs logical lhs_ne_rhs end function elemental module function character_ne_string_t ( lhs , rhs ) result ( lhs_ne_rhs ) implicit none class ( string_t ), intent ( in ) :: rhs character ( len =* ), intent ( in ) :: lhs logical lhs_ne_rhs end function pure module function string_t_cat_string_t ( lhs , rhs ) result ( lhs_cat_rhs ) implicit none class ( string_t ), intent ( in ) :: lhs , rhs type ( string_t ) lhs_cat_rhs end function pure module function string_t_cat_character ( lhs , rhs ) result ( lhs_cat_rhs ) implicit none class ( string_t ), intent ( in ) :: lhs character ( len =* ), intent ( in ) :: rhs type ( string_t ) lhs_cat_rhs end function pure module function character_cat_string_t ( lhs , rhs ) result ( lhs_cat_rhs ) implicit none character ( len =* ), intent ( in ) :: lhs class ( string_t ), intent ( in ) :: rhs type ( string_t ) lhs_cat_rhs end function elemental module subroutine assign_character_to_string_t ( lhs , rhs ) implicit none class ( string_t ), intent ( inout ) :: lhs character ( len =* ), intent ( in ) :: rhs end subroutine pure module subroutine assign_string_t_to_character ( lhs , rhs ) implicit none class ( string_t ), intent ( in ) :: rhs character ( len = :), intent ( out ), allocatable :: lhs end subroutine elemental module function bracket ( self , opening , closing ) result ( bracketed_self ) implicit none class ( string_t ), intent ( in ) :: self character ( len =* ), intent ( in ), optional :: opening , closing type ( string_t ) bracketed_self end function end interface end module julienne_string_m","tags":"","url":"sourcefile/julienne_string_m.f90.html"},{"title":"julienne_command_line_s.f90 – Julienne","text":"This file depends on sourcefile~~julienne_command_line_s.f90~~EfferentGraph sourcefile~julienne_command_line_s.f90 julienne_command_line_s.f90 sourcefile~julienne_command_line_m.f90 julienne_command_line_m.f90 sourcefile~julienne_command_line_s.f90->sourcefile~julienne_command_line_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt submodule ( julienne_command_line_m ) julienne_command_line_s implicit none contains module procedure argument_present !! list of acceptable arguments !! sample list: [character(len=len(longest_argument)):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"] !! where dashes support Linux/macOS and slashes support Windows integer :: i , argnum , arglen !! loop counter, argument position, argument length character ( len = 32 ) arg !! argument position !! acceptable argument lengths (used to preclude extraneous trailing characters) associate ( acceptable_length => [( len ( trim ( acceptable_argument ( i ))), i = 1 , size ( acceptable_argument ))]) do argnum = 1 , command_argument_count () call get_command_argument ( argnum , arg , arglen ) if ( any ( & [( arg == acceptable_argument ( i ) . and . arglen == acceptable_length ( i ), i = 1 , size ( acceptable_argument ))] & )) then found = . true . return end if end do found = . false . end associate end procedure module procedure flag_value integer argnum , arglen , flag_value_length character ( len = :), allocatable :: arg do argnum = 1 , command_argument_count () - 1 call get_command_argument ( argnum , length = arglen ) allocate ( character ( len = arglen ) :: arg ) call get_command_argument ( argnum , arg ) if ( arg == flag ) then call get_command_argument ( argnum + 1 , length = flag_value_length ) allocate ( character ( len = flag_value_length ) :: flag_value ) call get_command_argument ( argnum + 1 , flag_value ) return end if deallocate ( arg ) end do flag_value = \"\" end procedure end submodule","tags":"","url":"sourcefile/julienne_command_line_s.f90.html"},{"title":"julienne_file_m.f90 – Julienne","text":"This file depends on sourcefile~~julienne_file_m.f90~~EfferentGraph sourcefile~julienne_file_m.f90 julienne_file_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.f90 sourcefile~julienne_file_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~julienne_file_m.f90~~AfferentGraph sourcefile~julienne_file_m.f90 julienne_file_m.f90 sourcefile~julienne_file_s.f90 julienne_file_s.F90 sourcefile~julienne_file_s.f90->sourcefile~julienne_file_m.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_file_m.f90 sourcefile~check-for-command-line-argument.f90 check-for-command-line-argument.f90 sourcefile~check-for-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-command-line-flag-value.f90 get-command-line-flag-value.f90 sourcefile~get-command-line-flag-value.f90->sourcefile~julienne_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt module julienne_file_m !! A representation of a file as an object use julienne_string_m , only : string_t private public :: file_t type file_t private type ( string_t ), allocatable :: lines_ (:) contains procedure :: lines generic :: write_lines => write_to_output_unit , write_to_character_file_name , write_to_string_file_name procedure , private :: write_to_output_unit , write_to_character_file_name , write_to_string_file_name end type interface file_t module function from_file_with_string_name ( file_name ) result ( file_object ) implicit none type ( string_t ), intent ( in ) :: file_name type ( file_t ) file_object end function module function from_file_with_character_name ( file_name ) result ( file_object ) implicit none character ( len =* ), intent ( in ) :: file_name type ( file_t ) file_object end function module function from_lines ( lines ) result ( file_object ) implicit none type ( string_t ), intent ( in ) :: lines (:) type ( file_t ) file_object end function end interface interface pure module function lines ( self ) result ( my_lines ) implicit none class ( file_t ), intent ( in ) :: self type ( string_t ), allocatable :: my_lines (:) end function module subroutine write_to_output_unit ( self ) implicit none class ( file_t ), intent ( in ) :: self end subroutine impure elemental module subroutine write_to_string_file_name ( self , file_name ) implicit none class ( file_t ), intent ( in ) :: self type ( string_t ), intent ( in ) :: file_name end subroutine impure elemental module subroutine write_to_character_file_name ( self , file_name ) implicit none class ( file_t ), intent ( in ) :: self character ( len =* ), intent ( in ) :: file_name end subroutine end interface end module julienne_file_m","tags":"","url":"sourcefile/julienne_file_m.f90.html"},{"title":"julienne_user_defined_collectives_m.f90 – Julienne","text":"Files dependent on this one sourcefile~~julienne_user_defined_collectives_m.f90~~AfferentGraph sourcefile~julienne_user_defined_collectives_m.f90 julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_m.f90 julienne_test_m.F90 sourcefile~julienne_test_m.f90->sourcefile~julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_result_s.f90 julienne_test_result_s.f90 sourcefile~julienne_test_result_s.f90->sourcefile~julienne_user_defined_collectives_m.f90 sourcefile~julienne_user_defined_collectives_s.f90 julienne_user_defined_collectives_s.F90 sourcefile~julienne_user_defined_collectives_s.f90->sourcefile~julienne_user_defined_collectives_m.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_s.f90 julienne_test_s.F90 sourcefile~julienne_test_s.f90->sourcefile~julienne_test_m.f90 sourcefile~check-for-command-line-argument.f90 check-for-command-line-argument.f90 sourcefile~check-for-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-command-line-flag-value.f90 get-command-line-flag-value.f90 sourcefile~get-command-line-flag-value.f90->sourcefile~julienne_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! !     (c) 2019-2020 Guide Star Engineering, LLC !     This Software was developed for the US Nuclear Regulatory Commission (US NRC) under contract !     \"Multi-Dimensional Physics Implementation into Fuel Analysis under Steady-state and Transients (FAST)\", !     contract # NRC-HQ-60-17-C-0007 ! module julienne_user_defined_collectives_m !! User-defined collective subroutines. implicit none interface impure elemental module subroutine co_all ( boolean ) !! If any image in a team calls this subroutine, then every image in the !! the same team must call this subroutine.  This subroutine sets the !! \"boolean\" argument .true. if it is true in all participating images !! upon entry and .false. otherwise. implicit none logical , intent ( inout ) :: boolean end subroutine end interface end module julienne_user_defined_collectives_m","tags":"","url":"sourcefile/julienne_user_defined_collectives_m.f90.html"},{"title":"julienne_bin_s.F90 – Julienne","text":"This file depends on sourcefile~~julienne_bin_s.f90~~EfferentGraph sourcefile~julienne_bin_s.f90 julienne_bin_s.F90 sourcefile~julienne_bin_m.f90 julienne_bin_m.f90 sourcefile~julienne_bin_s.f90->sourcefile~julienne_bin_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt #include \"assert_macros.h\" submodule ( julienne_bin_m ) julienne_bin_s use assert_m implicit none contains module procedure construct call_assert_diagnose ( num_items >= num_bins , \"bin_s(construct): num_items>=num_bins\" , intrinsic_array_t ([ num_items , num_bins ])) associate ( remainder => mod ( num_items , num_bins ), items_per_bin => num_items / num_bins ) if ( bin_number <= remainder ) then bin % first_ = 1 + ( bin_number - 1 ) * ( items_per_bin + 1 ) bin % last_ = bin_number * ( items_per_bin + 1 ) else bin % first_ = 1 + ( remainder - 1 ) * ( items_per_bin + 1 ) + 1 + ( bin_number - remainder ) * items_per_bin bin % last_ = remainder * ( items_per_bin + 1 ) + ( bin_number - remainder ) * items_per_bin end if end associate end procedure module procedure first first_item_number = self % first_ end procedure module procedure last last_item_number = self % last_ end procedure end submodule julienne_bin_s","tags":"","url":"sourcefile/julienne_bin_s.f90.html"},{"title":"julienne_vector_test_description_s.F90 – Julienne","text":"This file depends on sourcefile~~julienne_vector_test_description_s.f90~~EfferentGraph sourcefile~julienne_vector_test_description_s.f90 julienne_vector_test_description_s.F90 sourcefile~julienne_vector_test_description_m.f90 julienne_vector_test_description_m.F90 sourcefile~julienne_vector_test_description_s.f90->sourcefile~julienne_vector_test_description_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.f90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_test_diagnosis_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt #include \"assert_macros.h\" submodule ( julienne_vector_test_description_m ) julienne_vector_test_description_s use assert_m implicit none contains module procedure contains_characters integer i call_assert ( allocated ( self % descriptions_ )) match_vector = [( index ( self % descriptions_ ( i )% string (), substring ) /= 0 , i = 1 , size ( self % descriptions_ ))] end procedure module procedure contains_string_t match_vector = self % contains_characters ( substring % string ()) end procedure #ifndef __GFORTRAN__ module procedure construct_from_strings vector_test_description % descriptions_ = descriptions vector_test_description % vector_diagnosis_function_ => vector_diagnosis_function end procedure #else module function construct_from_strings ( descriptions , vector_diagnosis_function ) result ( vector_test_description ) type ( string_t ), intent ( in ) :: descriptions (:) procedure ( vector_diagnosis_function_i ), intent ( in ), pointer , optional :: vector_diagnosis_function type ( vector_test_description_t ) vector_test_description vector_test_description % descriptions_ = descriptions if ( present ( vector_diagnosis_function )) vector_test_description % vector_diagnosis_function_ => vector_diagnosis_function end function #endif module procedure run if (. not . associated ( self % vector_diagnosis_function_ )) then test_results = test_result_t ( self % descriptions_ ) else associate ( diagnoses => self % vector_diagnosis_function_ ()) #if defined(ASSERTIONS) associate ( num_descriptions => size ( self % descriptions_ ), num_results => size ( diagnoses )) call_assert_diagnose ( num_descriptions == num_results , \"description/result size match\" , intrinsic_array_t ([ num_descriptions , num_results ])) end associate #endif test_results = test_result_t ( self % descriptions_ , diagnoses ) end associate end if end procedure end submodule julienne_vector_test_description_s","tags":"","url":"sourcefile/julienne_vector_test_description_s.f90.html"},{"title":"julienne_formats_s.F90 – Julienne","text":"This file depends on sourcefile~~julienne_formats_s.f90~~EfferentGraph sourcefile~julienne_formats_s.f90 julienne_formats_s.F90 sourcefile~julienne_formats_m.f90 julienne_formats_m.F90 sourcefile~julienne_formats_s.f90->sourcefile~julienne_formats_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt submodule ( julienne_formats_m ) julienne_formats_s !! Construct separated-value formats implicit none contains #ifndef _CRAYFTN module procedure separated_values character ( len =* ), parameter :: prefix = \"(*(G0,:,'\" character ( len =* ), parameter :: suffix = \"'))\" character ( len =* ), parameter :: complex_prefix = \"(*('(',G0,',',G0,')',:,'\" select rank ( mold ) rank ( 1 ) select type ( mold ) type is ( complex ) format_string = complex_prefix // separator // suffix type is ( double precision ) format_string = prefix // separator // suffix type is ( real ) format_string = prefix // separator // suffix type is ( integer ) format_string = prefix // separator // suffix type is ( character ( len =* )) format_string = prefix // separator // suffix class default error stop \"format_s separated_values: unsupported type\" end select rank default error stop \"formats_s separated_values: unsupported rank\" end select end procedure #else module procedure separated_values_1D character ( len =* ), parameter :: prefix = \"(*(G0,:,'\" character ( len =* ), parameter :: suffix = \"'))\" character ( len =* ), parameter :: complex_prefix = \"(*('(',G0,',',G0,')',:,'\" select type ( mold ) type is ( complex ) format_string = complex_prefix // separator // suffix type is ( double precision ) format_string = prefix // separator // suffix type is ( real ) format_string = prefix // separator // suffix type is ( integer ) format_string = prefix // separator // suffix type is ( character ( len =* )) format_string = prefix // separator // suffix class default error stop \"format_s separated_values_1D: unsupported type\" end select end procedure #endif end submodule julienne_formats_s","tags":"","url":"sourcefile/julienne_formats_s.f90.html"},{"title":"julienne_test_description_m.f90 – Julienne","text":"This file depends on sourcefile~~julienne_test_description_m.f90~~EfferentGraph sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_test_diagnosis_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~julienne_test_description_m.f90~~AfferentGraph sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_description_s.f90 julienne_test_description_s.F90 sourcefile~julienne_test_description_s.f90->sourcefile~julienne_test_description_m.f90 sourcefile~check-for-command-line-argument.f90 check-for-command-line-argument.f90 sourcefile~check-for-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-command-line-flag-value.f90 get-command-line-flag-value.f90 sourcefile~get-command-line-flag-value.f90->sourcefile~julienne_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt module julienne_test_description_m !! Define an abstraction for describing test intentions and test functions use julienne_string_m , only : string_t use julienne_test_result_m , only : test_result_t use julienne_test_diagnosis_m , only : test_diagnosis_t implicit none private public :: test_description_t public :: diagnosis_function_i abstract interface function diagnosis_function_i () result ( test_diagnosis ) import test_diagnosis_t implicit none type ( test_diagnosis_t ) test_diagnosis end function end interface type test_description_t !! Encapsulate test descriptions and test-functions private character ( len = :), allocatable :: description_ procedure ( diagnosis_function_i ), pointer , nopass :: diagnosis_function_ => null () contains procedure run generic :: contains_text => contains_string_t , contains_characters procedure , private :: contains_string_t , contains_characters generic :: operator ( == ) => equals procedure , private :: equals end type interface test_description_t module function construct_from_string ( description , diagnosis_function ) result ( test_description ) !! The result is a test_description_t object with the components defined by the dummy arguments implicit none type ( string_t ), intent ( in ) :: description procedure ( diagnosis_function_i ), intent ( in ), pointer , optional :: diagnosis_function type ( test_description_t ) test_description end function module function construct_from_characters ( description , diagnosis_function ) result ( test_description ) !! The result is a test_description_t object with the components defined by the dummy arguments implicit none character ( len =* ), intent ( in ) :: description procedure ( diagnosis_function_i ), intent ( in ), pointer , optional :: diagnosis_function type ( test_description_t ) test_description end function end interface interface impure elemental module function run ( self ) result ( test_result ) !! The result encapsulates the test description and test outcome implicit none class ( test_description_t ), intent ( in ) :: self type ( test_result_t ) test_result end function elemental module function contains_string_t ( self , substring ) result ( match ) !! The result is .true. if the test description includes the value of substring implicit none class ( test_description_t ), intent ( in ) :: self type ( string_t ), intent ( in ) :: substring logical match end function elemental module function contains_characters ( self , substring ) result ( match ) !! The result is .true. if the test description includes the value of substring implicit none class ( test_description_t ), intent ( in ) :: self character ( len =* ), intent ( in ) :: substring logical match end function elemental module function equals ( lhs , rhs ) result ( lhs_eq_rhs ) !! The result is .true. if the components of the lhs & rhs are equal implicit none class ( test_description_t ), intent ( in ) :: lhs , rhs logical lhs_eq_rhs end function end interface end module julienne_test_description_m","tags":"","url":"sourcefile/julienne_test_description_m.f90.html"},{"title":"julienne_github_ci_m.f90 – Julienne","text":"Files dependent on this one sourcefile~~julienne_github_ci_m.f90~~AfferentGraph sourcefile~julienne_github_ci_m.f90 julienne_github_ci_m.f90 sourcefile~julienne_github_ci_s.f90 julienne_github_ci_s.f90 sourcefile~julienne_github_ci_s.f90->sourcefile~julienne_github_ci_m.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_github_ci_m.f90 sourcefile~check-for-command-line-argument.f90 check-for-command-line-argument.f90 sourcefile~check-for-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-command-line-flag-value.f90 get-command-line-flag-value.f90 sourcefile~get-command-line-flag-value.f90->sourcefile~julienne_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt module julienne_github_ci_m !! Detect whether a program is running in GitHub Continuous Integration (CI) implicit none interface logical module function GitHub_CI () !! The result is true if the environment variable named \"CI\" is set to the string \"true\" end function end interface end module","tags":"","url":"sourcefile/julienne_github_ci_m.f90.html"},{"title":"julienne_string_s.F90 – Julienne","text":"This file depends on sourcefile~~julienne_string_s.f90~~EfferentGraph sourcefile~julienne_string_s.f90 julienne_string_s.F90 sourcefile~julienne_string_m.f90 julienne_string_m.f90 sourcefile~julienne_string_s.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt #include \"assert_macros.h\" submodule ( julienne_string_m ) julienne_string_s use assert_m implicit none integer , parameter :: integer_width_supremum = 11 , default_real_width_supremum = 20 , double_precision_width_supremum = 25 integer , parameter :: logical_width = 2 , comma_width = 1 , parenthesis_width = 1 , space = 1 contains module procedure as_character raw_string = self % string_ end procedure module procedure is_allocated string_allocated = allocated ( self % string_ ) end procedure module procedure from_characters new_string % string_ = string end procedure module procedure from_default_integer allocate ( character ( len = integer_width_supremum ) :: string % string_ ) write ( string % string_ , '(g0)' ) i string % string_ = trim ( adjustl ( string % string_ )) end procedure module procedure from_default_real allocate ( character ( len = double_precision_width_supremum ) :: string % string_ ) write ( string % string_ , '(g20.13)' ) x string % string_ = trim ( adjustl ( string % string_ )) end procedure module procedure from_double_precision allocate ( character ( len = double_precision_width_supremum ) :: string % string_ ) write ( string % string_ , '(g20.13)' ) x string % string_ = trim ( adjustl ( string % string_ )) end procedure module procedure from_default_logical allocate ( character ( len = logical_width ) :: string % string_ ) write ( string % string_ , '(g0)' ) b string % string_ = trim ( adjustl ( string % string_ )) end procedure module procedure from_logical_c_bool allocate ( character ( len = logical_width ) :: string % string_ ) write ( string % string_ , '(g0)' ) b string % string_ = trim ( adjustl ( string % string_ )) end procedure module procedure from_default_complex allocate ( character ( len = 2 * default_real_width_supremum + 2 * parenthesis_width + comma_width ) :: string % string_ ) write ( string % string_ , '(\"(\",g20.13,\",\",g20.13,\")\")' ) z string % string_ = trim ( adjustl ( string % string_ )) end procedure module procedure from_double_precision_complex allocate ( character ( len = space + 2 * double_precision_width_supremum + 2 * parenthesis_width + comma_width ) :: string % string_ ) write ( string % string_ , '(\"(\",g20.13,\",\",g20.13,\")\")' ) z string % string_ = trim ( adjustl ( string % string_ )) end procedure module procedure concatenate_elements integer s concatenated_strings = \"\" do s = 1 , size ( strings ) concatenated_strings = concatenated_strings // strings ( s )% string () end do end procedure module procedure strings_with_comma_separator csv = strings_with_string_t_separator ( strings , string_t ( \",\" )) end procedure module procedure characters_with_comma_separator csv = strings_with_string_t_separator ( string_t ( strings ), string_t ( \",\" )) end procedure module procedure characters_with_character_separator sv = strings_with_string_t_separator ( string_t ( strings ), string_t ( separator )) end procedure module procedure characters_with_string_separator sv = strings_with_string_t_separator ( string_t ( strings ), separator ) end procedure module procedure strings_with_character_separator sv = strings_with_string_t_separator ( strings , string_t ( separator )) end procedure module procedure strings_with_string_t_separator integer s associate ( num_elements => size ( strings )) sv = \"\" do s = 1 , num_elements - 1 sv = sv // strings ( s ) // separator end do sv = sv // strings ( num_elements ) end associate end procedure module procedure array_of_strings character ( len = :), allocatable :: remainder , next_string integer next_delimiter , string_end remainder = trim ( adjustl ( delimited_strings )) allocate ( strings_array ( 0 )) do next_delimiter = index ( remainder , delimiter ) string_end = merge ( len ( remainder ), next_delimiter - 1 , next_delimiter == 0 ) next_string = trim ( adjustl ( remainder (: string_end ))) if ( len ( next_string ) == 0 ) exit strings_array = [ strings_array , string_t ( next_string )] if ( next_delimiter == 0 ) then remainder = \"\" else remainder = trim ( adjustl ( remainder ( next_delimiter + 1 :))) end if end do end procedure module procedure get_json_key character ( len = :), allocatable :: raw_line raw_line = self % string () associate ( opening_key_quotes => index ( raw_line , '\"' ), separator => index ( raw_line , ':' )) associate ( closing_key_quotes => opening_key_quotes + index ( raw_line ( opening_key_quotes + 1 :), '\"' )) unquoted_key = string_t ( trim ( raw_line ( opening_key_quotes + 1 : closing_key_quotes - 1 ))) end associate end associate end procedure module procedure file_extension character ( len = :), allocatable :: name_ name_ = trim ( adjustl ( self % string ())) associate ( dot_location => index ( name_ , '.' , back = . true .) ) if ( dot_location < len ( name_ )) then extension = trim ( adjustl ( name_ ( dot_location + 1 :))) else extension = \"\" end if end associate end procedure module procedure base_name character ( len = :), allocatable :: name_ name_ = self % string () associate ( dot_location => index ( name_ , '.' , back = . true .) ) if ( dot_location < len ( name_ )) then base = trim ( adjustl ( name_ ( 1 : dot_location - 1 ))) else base = \"\" end if end associate end procedure module procedure get_real_with_character_key value_ = self % get_real ( string_t ( key ), mold ) end procedure module procedure get_double_precision_with_character_key value_ = self % get_double_precision ( string_t ( key ), mold ) end procedure module procedure get_real character ( len = :), allocatable :: raw_line , string_value call_assert_diagnose ( key == self % get_json_key (), \"string_s(get_real): key==self%get_json_key()\" , key ) raw_line = self % string () associate ( text_after_colon => raw_line ( index ( raw_line , ':' ) + 1 :)) associate ( trailing_comma => index ( text_after_colon , ',' )) if ( trailing_comma == 0 ) then string_value = trim ( adjustl (( text_after_colon ))) else string_value = trim ( adjustl (( text_after_colon (: trailing_comma - 1 )))) end if read ( string_value , fmt =* ) value_ end associate end associate end procedure module procedure get_double_precision character ( len = :), allocatable :: raw_line , string_value call_assert_diagnose ( key == self % get_json_key (), \"string_s(get_double_precision): key==self%get_json_key()\" , key ) raw_line = self % string () associate ( text_after_colon => raw_line ( index ( raw_line , ':' ) + 1 :)) associate ( trailing_comma => index ( text_after_colon , ',' )) if ( trailing_comma == 0 ) then string_value = trim ( adjustl (( text_after_colon ))) else string_value = trim ( adjustl (( text_after_colon (: trailing_comma - 1 )))) end if read ( string_value , fmt =* ) value_ end associate end associate end procedure module procedure get_character associate ( string_value => self % get_string ( key , string_t ( mold ))) value_ = string_value % string () end associate end procedure module procedure get_character_with_character_key associate ( string_value => self % get_string ( string_t ( key ), string_t ( mold ))) value_ = string_value % string () end associate end procedure module procedure get_string_t_array_with_string_t_key value_ = self % get_string_t_array_with_character_key ( key % string (), mold ) end procedure module procedure get_string_t_array_with_character_key character ( len = :), allocatable :: raw_line integer i , comma , opening_quotes , closing_quotes call_assert_diagnose ( key == self % get_json_key (), \"key==self%get_string_json()\" , key ) raw_line = self % string () associate ( colon => index ( raw_line , ':' )) associate ( opening_bracket => colon + index ( raw_line ( colon + 1 :), '[' )) associate ( closing_bracket => opening_bracket + index ( raw_line ( opening_bracket + 1 :), ']' )) associate ( commas => count ([( raw_line ( i : i ) == \",\" , i = opening_bracket + 1 , closing_bracket - 1 )])) allocate ( value_ ( commas + 1 )) opening_quotes = opening_bracket + index ( raw_line ( opening_bracket + 1 :), '\"' ) closing_quotes = opening_quotes + index ( raw_line ( opening_quotes + 1 :), '\"' ) value_ ( 1 ) = raw_line ( opening_quotes + 1 : closing_quotes - 1 ) do i = 1 , commas comma = closing_quotes + index ( raw_line ( closing_quotes + 1 :), ',' ) opening_quotes = comma + index ( raw_line ( comma + 1 :), '\"' ) closing_quotes = opening_quotes + index ( raw_line ( opening_quotes + 1 :), '\"' ) value_ ( i + 1 ) = raw_line ( opening_quotes + 1 : closing_quotes - 1 ) end do end associate end associate end associate end associate end procedure module procedure get_string character ( len = :), allocatable :: raw_line call_assert_diagnose ( key == self % get_json_key (), \"key==self%get_string_json()\" , key ) raw_line = self % string () associate ( text_after_colon => raw_line ( index ( raw_line , ':' ) + 1 :)) associate ( opening_value_quotes => index ( text_after_colon , '\"' )) associate ( closing_value_quotes => opening_value_quotes + index ( text_after_colon ( opening_value_quotes + 1 :), '\"' )) if ( any ([ opening_value_quotes , closing_value_quotes ] == 0 )) then value_ = string_t ( trim ( adjustl (( text_after_colon )))) else value_ = string_t ( text_after_colon ( opening_value_quotes + 1 : closing_value_quotes - 1 )) end if end associate end associate end associate end procedure module procedure get_logical_with_character_key value_ = self % get_logical ( string_t ( key ), mold ) end procedure module procedure get_logical character ( len = :), allocatable :: raw_line , string_value call_assert_diagnose ( key == self % get_json_key (), \"string_s(get_logical): key==self%get_json_key()\" , key ) raw_line = self % string () associate ( text_after_colon => raw_line ( index ( raw_line , ':' ) + 1 :)) associate ( trailing_comma => index ( text_after_colon , ',' )) if ( trailing_comma == 0 ) then string_value = trim ( adjustl (( text_after_colon ))) else string_value = trim ( adjustl (( text_after_colon (: trailing_comma - 1 )))) end if call_assert_diagnose ( string_value == \"true\" . or . string_value == \"false\" , 'string_s(get_logical): string_value==\"true\" .or. string_value=\"false\"' , string_value ) value_ = string_value == \"true\" end associate end associate end procedure module procedure get_integer character ( len = :), allocatable :: raw_line , string_value call_assert_diagnose ( key == self % get_json_key (), \"string_s(get_logical): key==self%get_json_key()\" , key ) raw_line = self % string () associate ( text_after_colon => raw_line ( index ( raw_line , ':' ) + 1 :)) associate ( trailing_comma => index ( text_after_colon , ',' )) if ( trailing_comma == 0 ) then string_value = trim ( adjustl (( text_after_colon ))) else string_value = trim ( adjustl (( text_after_colon (: trailing_comma - 1 )))) end if read ( string_value , fmt =* ) value_ end associate end associate end procedure module procedure get_integer_with_character_key value_ = self % get_integer ( string_t ( key ), mold ) end procedure module procedure get_integer_array_with_character_key value_ = int ( self % get_integer_array ( string_t ( key ), mold )) end procedure module procedure get_integer_array value_ = int ( self % get_real_array ( key , mold = [ 0. ])) end procedure module procedure get_real_array_with_character_key value_ = self % get_real_array ( string_t ( key ), mold ) end procedure module procedure get_double_precision_array_with_character_key value_ = self % get_double_precision_array ( string_t ( key ), mold ) end procedure module procedure get_real_array character ( len = :), allocatable :: raw_line real , allocatable :: real_array (:) integer i call_assert_diagnose ( key == self % get_json_key (), \"string_s(get_{real,integer}_array): key==self%get_json_key()\" , key ) raw_line = self % string () associate ( colon => index ( raw_line , \":\" )) associate ( opening_bracket => colon + index ( raw_line ( colon + 1 :), \"[\" )) associate ( closing_bracket => opening_bracket + index ( raw_line ( opening_bracket + 1 :), \"]\" )) associate ( commas => count ( \",\" == [( raw_line ( i : i ), i = opening_bracket + 1 , closing_bracket - 1 )])) associate ( num_inputs => commas + 1 ) allocate ( real_array ( num_inputs )) read ( raw_line ( opening_bracket + 1 : closing_bracket - 1 ), fmt =* ) real_array value_ = real_array end associate end associate end associate end associate end associate end procedure module procedure get_double_precision_array character ( len = :), allocatable :: raw_line double precision , allocatable :: double_precision_array (:) integer i call_assert_diagnose ( key == self % get_json_key (), \"string_s(get_{double precision,integer}_array): key==self%get_json_key()\" , key ) raw_line = self % string () associate ( colon => index ( raw_line , \":\" )) associate ( opening_bracket => colon + index ( raw_line ( colon + 1 :), \"[\" )) associate ( closing_bracket => opening_bracket + index ( raw_line ( opening_bracket + 1 :), \"]\" )) associate ( commas => count ( \",\" == [( raw_line ( i : i ), i = opening_bracket + 1 , closing_bracket - 1 )])) associate ( num_inputs => commas + 1 ) allocate ( double_precision_array ( num_inputs )) read ( raw_line ( opening_bracket + 1 : closing_bracket - 1 ), fmt =* ) double_precision_array value_ = double_precision_array end associate end associate end associate end associate end associate end procedure module procedure string_t_eq_string_t lhs_eq_rhs = lhs % string () == rhs % string () end procedure module procedure string_t_eq_character lhs_eq_rhs = lhs % string () == rhs end procedure module procedure character_eq_string_t lhs_eq_rhs = lhs == rhs % string () end procedure module procedure string_t_ne_string_t lhs_ne_rhs = lhs % string () /= rhs % string () end procedure module procedure string_t_ne_character lhs_ne_rhs = lhs % string () /= rhs end procedure module procedure character_ne_string_t lhs_ne_rhs = lhs /= rhs % string () end procedure module procedure assign_string_t_to_character lhs = rhs % string () end procedure module procedure assign_character_to_string_t lhs % string_ = rhs end procedure module procedure string_t_cat_string_t lhs_cat_rhs = string_t ( lhs % string_ // rhs % string_ ) end procedure module procedure string_t_cat_character lhs_cat_rhs = string_t ( lhs % string_ // rhs ) end procedure module procedure character_cat_string_t lhs_cat_rhs = string_t ( lhs // rhs % string_ ) end procedure module procedure bracket character ( len = :), allocatable :: actual_opening , actual_closing associate ( opening_present => present ( opening )) if ( opening_present ) then actual_opening = opening else actual_opening = \"[\" end if if ( present ( closing )) then actual_closing = closing else if ( opening_present ) then actual_closing = actual_opening else actual_closing = \"]\" end if end associate bracketed_self = string_t ( actual_opening // self % string_ // actual_closing ) end procedure end submodule julienne_string_s","tags":"","url":"sourcefile/julienne_string_s.f90.html"},{"title":"julienne_formats_m.F90 – Julienne","text":"Files dependent on this one sourcefile~~julienne_formats_m.f90~~AfferentGraph sourcefile~julienne_formats_m.f90 julienne_formats_m.F90 sourcefile~julienne_formats_s.f90 julienne_formats_s.F90 sourcefile~julienne_formats_s.f90->sourcefile~julienne_formats_m.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_formats_m.f90 sourcefile~check-for-command-line-argument.f90 check-for-command-line-argument.f90 sourcefile~check-for-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-command-line-flag-value.f90 get-command-line-flag-value.f90 sourcefile~get-command-line-flag-value.f90->sourcefile~julienne_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt module julienne_formats_m !! Useful strings for formatting `print` and `write` statements implicit none character ( len =* ), parameter :: csv = \"(*(G0,:,','))\" !! comma-separated values character ( len =* ), parameter :: cscv = \"(*('(',G0,',',G0,')',:,',')))\" !! comma-separated complex values #ifndef _CRAYFTN interface pure module function separated_values ( separator , mold ) result ( format_string ) character ( len =* ), intent ( in ) :: separator class ( * ), intent ( in ) :: mold (..) character ( len = :), allocatable :: format_string end function end interface #else interface separated_values pure module function separated_values_1D ( separator , mold ) result ( format_string ) character ( len =* ), intent ( in ) :: separator class ( * ), intent ( in ) :: mold (:) character ( len = :), allocatable :: format_string end function end interface #endif end module julienne_formats_m","tags":"","url":"sourcefile/julienne_formats_m.f90.html"},{"title":"julienne_file_s.F90 – Julienne","text":"This file depends on sourcefile~~julienne_file_s.f90~~EfferentGraph sourcefile~julienne_file_s.f90 julienne_file_s.F90 sourcefile~julienne_file_m.f90 julienne_file_m.f90 sourcefile~julienne_file_s.f90->sourcefile~julienne_file_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.f90 sourcefile~julienne_file_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt #include \"assert_macros.h\" submodule ( julienne_file_m ) julienne_file_s use iso_fortran_env , only : iostat_end , iostat_eor , output_unit use assert_m implicit none contains module procedure lines my_lines = self % lines_ end procedure module procedure write_to_output_unit integer l call_assert ( allocated ( self % lines_ )) do l = 1 , size ( self % lines_ ) write ( output_unit , '(a)' ) self % lines_ ( l )% string () end do end procedure module procedure write_to_character_file_name integer file_unit , l call_assert ( allocated ( self % lines_ )) open ( newunit = file_unit , file = file_name , form = 'formatted' , status = 'unknown' , action = 'write' ) do l = 1 , size ( self % lines_ ) write ( file_unit , '(a)' ) self % lines_ ( l )% string () end do end procedure module procedure write_to_string_file_name call self % write_to_character_file_name ( file_name % string ()) end procedure module procedure from_lines file_object % lines_ = lines end procedure module procedure from_file_with_character_name file_object = from_file_with_string_name ( string_t ( file_name )) end procedure module procedure from_file_with_string_name integer io_status , file_unit , line_num character ( len = :), allocatable :: line integer , parameter :: max_message_length = 128 character ( len = max_message_length ) error_message integer , allocatable :: lengths (:) open ( newunit = file_unit , file = file_name % string (), form = 'formatted' , status = 'old' , iostat = io_status , action = 'read' ) call_assert_diagnose ( io_status == 0 , \"from_file_with_string_name: io_status==0 after 'open' statement\" , file_name % string ()) lengths = line_lengths ( file_unit ) associate ( num_lines => size ( lengths )) allocate ( file_object % lines_ ( num_lines )) do line_num = 1 , num_lines allocate ( character ( len = lengths ( line_num )) :: line ) read ( file_unit , '(a)' ) line file_object % lines_ ( line_num ) = string_t ( line ) deallocate ( line ) end do end associate close ( file_unit ) contains function line_count ( file_unit ) result ( num_lines ) integer , intent ( in ) :: file_unit integer num_lines rewind ( file_unit ) num_lines = 0 do read ( file_unit , * , iostat = io_status ) if ( io_status == iostat_end ) exit num_lines = num_lines + 1 end do rewind ( file_unit ) end function function line_lengths ( file_unit ) result ( lengths ) integer , intent ( in ) :: file_unit integer , allocatable :: lengths (:) integer io_status , l character ( len = 1 ) c associate ( num_lines => line_count ( file_unit )) allocate ( lengths ( num_lines ), source = 0 ) rewind ( file_unit ) do l = 1 , num_lines do read ( file_unit , '(a)' , advance = 'no' , iostat = io_status , iomsg = error_message ) c associate ( eliminate_unused_variable_warning => c ) ! eliminate NAG compiler \"variable c set but never referenced\" warning end associate if ( io_status == iostat_eor . or . io_status == iostat_end ) exit lengths ( l ) = lengths ( l ) + 1 end do end do rewind ( file_unit ) end associate end function end procedure end submodule julienne_file_s","tags":"","url":"sourcefile/julienne_file_s.f90.html"},{"title":"julienne_test_result_s.f90 – Julienne","text":"This file depends on sourcefile~~julienne_test_result_s.f90~~EfferentGraph sourcefile~julienne_test_result_s.f90 julienne_test_result_s.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_test_result_s.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_user_defined_collectives_m.f90 julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_result_s.f90->sourcefile~julienne_user_defined_collectives_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt submodule ( julienne_test_result_m ) julienne_test_result_s use julienne_user_defined_collectives_m , only : co_all implicit none contains module procedure construct_from_string test_result % description_ = description if ( present ( diagnosis )) test_result % diagnosis_ = diagnosis end procedure module procedure construct_from_character test_result % description_ = description if ( present ( diagnosis )) test_result % diagnosis_ = diagnosis end procedure module procedure characterize if (. not . allocated ( self % diagnosis_ )) then characterization = \"SKIPS  on \" // trim ( self % description_ % string ()) // \".\" else associate ( test_passed => self % diagnosis_ % test_passed ()) characterization = merge ( \"passes on \" , \"FAILS  on \" , test_passed ) // trim ( self % description_ % string ()) // \".\" if (. not . test_passed ) & characterization = characterization // new_line ( '' ) // \"      diagnostics: \" // self % diagnosis_ % diagnostics_string () end associate end if end procedure module procedure passed if (. not . allocated ( self % diagnosis_ )) then test_passed = . false . else test_passed = self % diagnosis_ % test_passed () end if call co_all ( test_passed ) end procedure module procedure skipped test_skipped = merge (. false ., . true ., allocated ( self % diagnosis_ )) call co_all ( test_skipped ) end procedure module procedure description_contains_string substring_found = self % description_contains_characters ( substring % string ()) end procedure module procedure description_contains_characters substring_found = index ( self % description_ % string (), substring ) /= 0 end procedure end submodule julienne_test_result_s","tags":"","url":"sourcefile/julienne_test_result_s.f90.html"},{"title":"julienne_bin_m.f90 – Julienne","text":"Files dependent on this one sourcefile~~julienne_bin_m.f90~~AfferentGraph sourcefile~julienne_bin_m.f90 julienne_bin_m.f90 sourcefile~julienne_bin_s.f90 julienne_bin_s.F90 sourcefile~julienne_bin_s.f90->sourcefile~julienne_bin_m.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_bin_m.f90 sourcefile~check-for-command-line-argument.f90 check-for-command-line-argument.f90 sourcefile~check-for-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-command-line-flag-value.f90 get-command-line-flag-value.f90 sourcefile~get-command-line-flag-value.f90->sourcefile~julienne_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt module julienne_bin_m !! distribute item numbers across bins such that the number of items differs by at most 1 between any two bins implicit none private public :: bin_t type bin_t !! encapsulate a range of item numbers associated with a bin private integer first_ , last_ contains procedure first procedure last end type interface bin_t elemental module function construct ( num_items , num_bins , bin_number ) result ( bin ) !! the result is a bin associated with a range of item numbers integer , intent ( in ) :: num_items , num_bins , bin_number type ( bin_t ) bin end function end interface interface elemental module function first ( self ) result ( first_item_number ) !! the result is the first item number associated with the given bin implicit none class ( bin_t ), intent ( in ) :: self integer first_item_number end function elemental module function last ( self ) result ( last_item_number ) !! the result is the last item number associated with the given bin implicit none class ( bin_t ), intent ( in ) :: self integer last_item_number end function end interface end module julienne_bin_m","tags":"","url":"sourcefile/julienne_bin_m.f90.html"},{"title":"julienne_github_ci_s.f90 – Julienne","text":"This file depends on sourcefile~~julienne_github_ci_s.f90~~EfferentGraph sourcefile~julienne_github_ci_s.f90 julienne_github_ci_s.f90 sourcefile~julienne_github_ci_m.f90 julienne_github_ci_m.f90 sourcefile~julienne_github_ci_s.f90->sourcefile~julienne_github_ci_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt submodule ( julienne_github_ci_m ) julienne_github_ci_s implicit none contains module procedure GitHub_CI integer name_length character ( len = :), allocatable :: CI call get_environment_variable ( \"CI\" , length = name_length ) if ( name_length == 0 ) then GitHub_CI = . false . else allocate ( character ( len = name_length ) :: CI ) call get_environment_variable ( \"CI\" , value = CI ) GitHub_CI = merge (. true ., . false ., CI == \"true\" ) end if end procedure end submodule","tags":"","url":"sourcefile/julienne_github_ci_s.f90.html"},{"title":"julienne_test_diagnosis_s.F90 – Julienne","text":"This file depends on sourcefile~~julienne_test_diagnosis_s.f90~~EfferentGraph sourcefile~julienne_test_diagnosis_s.f90 julienne_test_diagnosis_s.F90 sourcefile~julienne_string_m.f90 julienne_string_m.f90 sourcefile~julienne_test_diagnosis_s.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_test_diagnosis_s.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt #include \"assert_macros.h\" #include \"language-support.F90\" submodule ( julienne_test_diagnosis_m ) julienne_test_diagnosis_s use assert_m use julienne_string_m , only : operator (. csv .), operator (. cat .) implicit none contains module procedure and diagnosis = . all . ([ lhs , rhs ]) end procedure module procedure aggregate_diagnosis character ( len =* ), parameter :: new_line_indent = new_line ( '' ) // \"        \" integer i type ( string_t ), allocatable :: empty (:) select rank ( diagnoses ) rank ( 0 ) diagnosis = diagnoses rank ( 1 ) diagnosis = test_diagnosis_t ( & test_passed = all ( diagnoses % test_passed_ ) & , diagnostics_string = . cat . pack ( & array = [( string_t ( new_line_indent // diagnoses ( i )% diagnostics_string_ ), i = 1 , size ( diagnoses ))] & , mask = . not . diagnoses % test_passed_ & ) ) rank default associate ( diagnoses_rank => string_t ( rank ( diagnoses ))) error stop \"aggregate_diagnosis (julienne_test_diagnosis_s): rank \" // diagnoses_rank % string () // \" unspported\" end associate end select end procedure module procedure approximates_real operands = operands_t ( actual , expected ) end procedure module procedure approximates_double_precision #if HAVE_DERIVED_TYPE_KIND_PARAMETERS operands = operands_t ( double_precision )( actual , expected ) #else operands = double_precision_operands_t ( actual , expected ) #endif end procedure module procedure equals_expected_integer if ( actual == expected ) then test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"expected \" // string_t ( expected ) // \"; actual value is \" // string_t ( actual ) & ) end if end procedure module procedure less_than_real if ( actual < expected_ceiling ) then test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"The value \" // string_t ( actual ) // \" was expected to be less than \" // string_t ( expected_ceiling ) & ) end if end procedure module procedure less_than_double if ( actual < expected_ceiling ) then test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"The value \" // string_t ( actual ) // \" was expected to be less than \" // string_t ( expected_ceiling ) & ) end if end procedure module procedure less_than_integer if ( actual < expected_ceiling ) then test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"The value \" // string_t ( actual ) // \" was expected to be less than \" // string_t ( expected_ceiling ) & ) end if end procedure module procedure less_than_or_equal_to_integer if ( actual <= expected_max ) then test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"The value \" // string_t ( actual ) // \" was expected to be less than or equal to \" // string_t ( expected_max ) & ) end if end procedure module procedure greater_than_or_equal_to_integer if ( actual >= expected_min ) then test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"The value \" // string_t ( actual ) // \" was expected to be greater than or equal to \" // string_t ( expected_min ) & ) end if end procedure module procedure greater_than_real if ( actual > expected_floor ) then test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"The value \" // string_t ( actual ) // \" was expected to be greater than \" // string_t ( expected_floor ) & ) end if end procedure module procedure greater_than_double if ( actual > expected_floor ) then test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"The value \" // string_t ( actual ) // \" was expected to be greater than \" // string_t ( expected_floor ) & ) end if end procedure module procedure greater_than_integer if ( actual > expected_floor ) then test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"The value \" // string_t ( actual ) // \" was expected to be greater than \" // string_t ( expected_floor ) & ) end if end procedure module procedure within_real if ( abs ( operands % actual - operands % expected ) <= tolerance ) then ! We use <= to allow for tolerance=0, which could never be satisfied if we used < instead: test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"expected \" // string_t ( operands % expected ) & // \" within a tolerance of \" // string_t ( tolerance ) & // \"; actual value is \" // string_t ( operands % actual ) & ) end if end procedure module procedure within_real_fraction if ( abs ( operands % actual - operands % expected ) <= abs ( fractional_tolerance * operands % expected )) then ! We use <= to allow for fractional_tolerance=0, which could never be satisfied if we used < instead: test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"expected \" // string_t ( operands % expected ) & // \" within a fractional tolerance of \" // string_t ( fractional_tolerance ) & // \"; actual value is \" // string_t ( operands % actual ) & ) end if end procedure module procedure within_real_percentage if ( abs ( operands % actual - operands % expected ) <= abs ( operands % expected * percentage_tolerance / 1 D02 )) then ! We use <= to allow for fractional_tolerance=0, which could never be satisfied if we used < instead: test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"expected \" // string_t ( operands % expected ) & // \" within a tolerance of \" // string_t ( percentage_tolerance ) // \" percent;\" & // \" actual value is \" // string_t ( operands % actual ) & ) end if end procedure module procedure within_double_precision if ( abs ( operands % actual - operands % expected ) <= tolerance ) then ! We use <= to allow for tolerance=0, which could never be satisfied if we used < instead: test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"expected \" // string_t ( operands % expected ) & // \" within a tolerance of \" // string_t ( tolerance ) & // \"; actual value is \" // string_t ( operands % actual ) & ) end if end procedure module procedure within_double_precision_fraction if ( abs ( operands % actual - operands % expected ) <= abs ( fractional_tolerance * operands % expected )) then ! We use <= to allow for tolerance=0, which could never be satisfied if we used < instead: test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"expected \" // string_t ( operands % expected ) & // \" within a fractional tolerance of \" // string_t ( fractional_tolerance ) & // \"; actual value is \" // string_t ( operands % actual ) & ) end if end procedure module procedure within_double_precision_percentage if ( abs (( operands % actual - operands % expected )) <= abs ( operands % expected * percentage_tolerance / 1 D02 )) then ! We use <= to allow for tolerance=0, which could never be satisfied if we used < instead: test_diagnosis = test_diagnosis_t ( test_passed = . true ., diagnostics_string = \"\" ) else test_diagnosis = test_diagnosis_t ( test_passed = . false . & , diagnostics_string = \"expected \" // string_t ( operands % expected ) & // \" within a tolerance of \" // string_t ( percentage_tolerance ) // \" percent;\" & // \" actual value is \" // string_t ( operands % actual ) & ) end if end procedure module procedure construct_from_string_t test_diagnosis % test_passed_ = test_passed test_diagnosis % diagnostics_string_ = diagnostics_string end procedure module procedure construct_from_character test_diagnosis % test_passed_ = test_passed test_diagnosis % diagnostics_string_ = diagnostics_string end procedure module procedure test_passed passed = self % test_passed_ end procedure module procedure diagnostics_string call_assert ( allocated ( self % diagnostics_string_ )) string_ = string_t ( self % diagnostics_string_ ) end procedure end submodule julienne_test_diagnosis_s","tags":"","url":"sourcefile/julienne_test_diagnosis_s.f90.html"},{"title":"julienne_test_s.F90 – Julienne","text":"This file depends on sourcefile~~julienne_test_s.f90~~EfferentGraph sourcefile~julienne_test_s.f90 julienne_test_s.F90 sourcefile~julienne_test_m.f90 julienne_test_m.F90 sourcefile~julienne_test_s.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_command_line_m.f90 julienne_command_line_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_user_defined_collectives_m.f90 julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_user_defined_collectives_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt #include \"language-support.F90\" submodule ( julienne_test_m ) julienne_test_s implicit none contains module procedure report #if HAVE_MULTI_IMAGE_SUPPORT associate ( me => this_image ()) #else integer me me = 1 #endif if ( me == 1 ) then first_report : & if (. not . allocated ( test_description_substring )) then block type ( command_line_t ) command_line test_description_substring = command_line % flag_value ( \"--contains\" ) end block print * if ( len ( test_description_substring ) == 0 ) then print '(a)' , \"Running all tests.\" print '(a)' , \"(Add '-- --contains <string>' to run only tests with subjects or descriptions containing the specified string.)\" else print '(*(a))' , \"Running only tests with subjects or descriptions containing '\" , test_description_substring , \"'.\" end if end if first_report print '(*(a))' , new_line ( 'a' ), test % subject () end if #if HAVE_MULTI_IMAGE_SUPPORT call co_broadcast ( test_description_substring , source_image = 1 ) #endif #ifndef _CRAYFTN associate ( test_results => test % results ()) associate ( num_tests => size ( test_results )) tests = tests + num_tests if ( me == 1 ) then block integer i do i = 1 , num_tests if ( me == 1 ) print '(3x,a)' , test_results ( i )% characterize () end do end block end if block logical , allocatable :: passing_tests (:), skipped_tests (:) passing_tests = test_results % passed () skipped_tests = test_results % skipped () call co_all ( passing_tests ) call co_all ( skipped_tests ) associate ( num_passes => count ( passing_tests ), num_skipped => count ( skipped_tests )) if ( me == 1 ) print '(a,3(i0,a))' , \" \" , num_passes , \" of \" , num_tests , \" tests pass.  \" , num_skipped , \" tests were skipped.\" passes = passes + num_passes skips = skips + num_skipped end associate end block end associate #if HAVE_MULTI_IMAGE_SUPPORT end associate #endif #else block logical , allocatable :: passing_tests (:) type ( test_result_t ), allocatable :: test_results (:) integer i test_results = test % results () associate ( num_tests => size ( test_results )) tests = tests + num_tests if ( me == 1 ) then do i = 1 , num_tests if ( me == 1 ) print '(3x,a)' , test_results ( i )% characterize () end do end if passing_tests = test_results % passed () call co_all ( passing_tests ) associate ( num_passes => count ( passing_tests )) if ( me == 1 ) print '(a,2(i0,a))' , \" \" , num_passes , \" of \" , num_tests , \" tests pass.\" passes = passes + num_passes end associate end associate end block #endif end associate end procedure end submodule julienne_test_s","tags":"","url":"sourcefile/julienne_test_s.f90.html"},{"title":"julienne_test_m.F90 – Julienne","text":"This file depends on sourcefile~~julienne_test_m.f90~~EfferentGraph sourcefile~julienne_test_m.f90 julienne_test_m.F90 sourcefile~julienne_command_line_m.f90 julienne_command_line_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_user_defined_collectives_m.f90 julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_user_defined_collectives_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~julienne_test_m.f90~~AfferentGraph sourcefile~julienne_test_m.f90 julienne_test_m.F90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_s.f90 julienne_test_s.F90 sourcefile~julienne_test_s.f90->sourcefile~julienne_test_m.f90 sourcefile~check-for-command-line-argument.f90 check-for-command-line-argument.f90 sourcefile~check-for-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-command-line-flag-value.f90 get-command-line-flag-value.f90 sourcefile~get-command-line-flag-value.f90->sourcefile~julienne_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt #include \"language-support.F90\" module julienne_test_m !! Define an abstract test_t type with deferred bindings (\"subject\" and \"results\") !! used by a type-bound procedure (\"report\") for reporting test results.  The \"report\" !! procedure thus represents an implementation of the Template Method pattern. use julienne_test_result_m , only : test_result_t use julienne_user_defined_collectives_m , only : co_all use julienne_command_line_m , only : command_line_t implicit none private public :: test_t , test_description_substring character ( len = :), allocatable , protected :: test_description_substring type , abstract :: test_t !! Facilitate testing and test reporting contains procedure ( subject_interface ), nopass , deferred :: subject procedure ( results_interface ), nopass , deferred :: results procedure :: report end type abstract interface pure function subject_interface () result ( specimen_description ) !! The result is the name of the test specimen (the subject of testing) character ( len = :), allocatable :: specimen_description end function function results_interface () result ( test_results ) !! The result is an array of test results for subsequent reporting in the \"report\" type-bound procedure import test_result_t type ( test_result_t ), allocatable :: test_results (:) end function end interface interface module subroutine report ( test , passes , tests , skips ) !! Print the test results and increment the tallies of passing tests, total tests, and skipped tests. implicit none class ( test_t ), intent ( in ) :: test integer , intent ( inout ) :: passes , tests , skips end subroutine end interface end module julienne_test_m","tags":"","url":"sourcefile/julienne_test_m.f90.html"},{"title":"get-command-line-flag-value.f90 – Julienne","text":"This file depends on sourcefile~~get-command-line-flag-value.f90~~EfferentGraph sourcefile~get-command-line-flag-value.f90 get-command-line-flag-value.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~get-command-line-flag-value.f90->sourcefile~julienne_m.f90 sourcefile~julienne_bin_m.f90 julienne_bin_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_bin_m.f90 sourcefile~julienne_command_line_m.f90 julienne_command_line_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_file_m.f90 julienne_file_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_file_m.f90 sourcefile~julienne_formats_m.f90 julienne_formats_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_formats_m.f90 sourcefile~julienne_github_ci_m.f90 julienne_github_ci_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_github_ci_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_m.f90 julienne_test_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_vector_test_description_m.f90 julienne_vector_test_description_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_vector_test_description_m.f90 sourcefile~julienne_file_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_user_defined_collectives_m.f90 julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_test_result_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt program get_command_line_flag_value !! This program demonstrates how to find the value of a command-line flag.  Running this program !! as follows should print 'foo=bar' without quotes: !! !! fpm run --example get-command-line-flag-value -- --foo bar !! !! Running the above command either without `bar` or without \"--foo bar\" should print an indication the message \"flag '--foo' not present or present with no value\". !! was provided. use julienne_m , only : command_line_t implicit none type ( command_line_t ) command_line character ( len = :), allocatable :: foo_value foo_value = command_line % flag_value ( \"--foo\" ) if ( len ( foo_value ) /= 0 ) then print '(a)' , new_line ( '' ) // \"foo=\" // foo_value // new_line ( '' ) else print '(a)' , new_line ( '' ) // \"flag '--foo' not present or present with no value\" // new_line ( '' ) end if end program","tags":"","url":"sourcefile/get-command-line-flag-value.f90.html"},{"title":"julienne_vector_test_description_m.F90 – Julienne","text":"This file depends on sourcefile~~julienne_vector_test_description_m.f90~~EfferentGraph sourcefile~julienne_vector_test_description_m.f90 julienne_vector_test_description_m.F90 sourcefile~julienne_string_m.f90 julienne_string_m.f90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_test_diagnosis_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~julienne_vector_test_description_m.f90~~AfferentGraph sourcefile~julienne_vector_test_description_m.f90 julienne_vector_test_description_m.F90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_vector_test_description_m.f90 sourcefile~julienne_vector_test_description_s.f90 julienne_vector_test_description_s.F90 sourcefile~julienne_vector_test_description_s.f90->sourcefile~julienne_vector_test_description_m.f90 sourcefile~check-for-command-line-argument.f90 check-for-command-line-argument.f90 sourcefile~check-for-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~get-command-line-flag-value.f90 get-command-line-flag-value.f90 sourcefile~get-command-line-flag-value.f90->sourcefile~julienne_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt module julienne_vector_test_description_m !! Define an abstraction for describing test intentions and array-valued test functions use julienne_string_m , only : string_t use julienne_test_result_m , only : test_result_t use julienne_test_diagnosis_m , only : test_diagnosis_t implicit none private public :: vector_test_description_t public :: vector_diagnosis_function_i #ifdef __GFORTRAN__ public :: run #endif abstract interface function vector_diagnosis_function_i () result ( diagnoses ) import test_diagnosis_t implicit none type ( test_diagnosis_t ), allocatable :: diagnoses (:) end function end interface type vector_test_description_t private type ( string_t ), allocatable :: descriptions_ (:) procedure ( vector_diagnosis_function_i ), pointer , nopass :: vector_diagnosis_function_ => null () contains procedure run generic :: contains_text => contains_string_t , contains_characters procedure , private :: contains_string_t , contains_characters end type interface vector_test_description_t module function construct_from_strings ( descriptions , vector_diagnosis_function ) result ( vector_test_description ) !! The result is a vector_test_description_t object with the components defined by the dummy arguments implicit none type ( string_t ), intent ( in ) :: descriptions (:) procedure ( vector_diagnosis_function_i ), intent ( in ), pointer , optional :: vector_diagnosis_function type ( vector_test_description_t ) vector_test_description end function end interface interface impure module function run ( self ) result ( test_results ) !! The result encapsulates the test description and test outcome implicit none class ( vector_test_description_t ), intent ( in ) :: self type ( test_result_t ), allocatable :: test_results (:) end function module function contains_characters ( self , substring ) result ( match_vector ) !! The result is .true. if the test description includes the value of substring implicit none class ( vector_test_description_t ), intent ( in ) :: self character ( len =* ), intent ( in ) :: substring logical , allocatable :: match_vector (:) end function module function contains_string_t ( self , substring ) result ( match_vector ) !! The result is .true. if the test description includes the value of substring%string() implicit none class ( vector_test_description_t ), intent ( in ) :: self type ( string_t ), intent ( in ) :: substring logical , allocatable :: match_vector (:) end function end interface end module julienne_vector_test_description_m","tags":"","url":"sourcefile/julienne_vector_test_description_m.f90.html"},{"title":"check-for-command-line-argument.f90 – Julienne","text":"This file depends on sourcefile~~check-for-command-line-argument.f90~~EfferentGraph sourcefile~check-for-command-line-argument.f90 check-for-command-line-argument.f90 sourcefile~julienne_m.f90 julienne_m.f90 sourcefile~check-for-command-line-argument.f90->sourcefile~julienne_m.f90 sourcefile~julienne_bin_m.f90 julienne_bin_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_bin_m.f90 sourcefile~julienne_command_line_m.f90 julienne_command_line_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_file_m.f90 julienne_file_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_file_m.f90 sourcefile~julienne_formats_m.f90 julienne_formats_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_formats_m.f90 sourcefile~julienne_github_ci_m.f90 julienne_github_ci_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_github_ci_m.f90 sourcefile~julienne_string_m.f90 julienne_string_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90 julienne_test_description_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_description_m.f90 sourcefile~julienne_test_diagnosis_m.f90 julienne_test_diagnosis_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_m.f90 julienne_test_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_test_m.f90 sourcefile~julienne_test_result_m.f90 julienne_test_result_m.f90 sourcefile~julienne_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_vector_test_description_m.f90 julienne_vector_test_description_m.F90 sourcefile~julienne_m.f90->sourcefile~julienne_vector_test_description_m.f90 sourcefile~julienne_file_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_test_description_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_test_diagnosis_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_command_line_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_test_result_m.f90 sourcefile~julienne_user_defined_collectives_m.f90 julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_m.f90->sourcefile~julienne_user_defined_collectives_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_test_result_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_string_m.f90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_test_diagnosis_m.f90 sourcefile~julienne_vector_test_description_m.f90->sourcefile~julienne_test_result_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Copyright (c) 2024-2025, The Regents of the University of California and Sourcery Institute ! Terms of use are as specified in LICENSE.txt program check_for_command_line_argument !! This program shows how to use the command_line_t derived type to check whether a !! command-line argument is present.  Running this program as follows with the command !! should print an indication that the command-line argument is present: !! !!   fpm run --example check-for-command-line-argument -- --some-argument !! !! Running the program without the argument or with the argument spelled differently !! should print an indication that the argument is not present: !! !!   fpm run --example check-for-command-line-argument use julienne_m , only : command_line_t implicit none type ( command_line_t ) command_line if ( command_line % argument_present ([ \"--some-argument\" ])) then print '(a)' , new_line ( '' ) // \"argument 'some-argument' present\" // new_line ( '' ) else print '(a)' , new_line ( '' ) // \"argument 'some-argument' not present\" // new_line ( '' ) end if end program","tags":"","url":"sourcefile/check-for-command-line-argument.f90.html"}]}